
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class uda_profile_offsets(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-uda-access-list - based on the path /uda-key/profile/uda-profile-offsets. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__uda_offset1','__uda_offset2','__uda_offset3','__uda_offset4',)

  _yang_name = 'uda-profile-offsets'
  _rest_name = 'uda-offsets'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__uda_offset1 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset1", rest_name="uda-offset1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    self.__uda_offset3 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset3", rest_name="uda-offset3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    self.__uda_offset2 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset2", rest_name="uda-offset2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    self.__uda_offset4 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset4", rest_name="uda-offset4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset4', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'uda-key', u'profile', u'uda-profile-offsets']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'uda-key', u'profile', u'uda-offsets']

  def _get_uda_offset1(self):
    """
    Getter method for uda_offset1, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset1 (union)
    """
    return self.__uda_offset1
      
  def _set_uda_offset1(self, v, load=False):
    """
    Setter method for uda_offset1, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset1 (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_offset1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_offset1() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset1", rest_name="uda-offset1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_offset1 must be of a type compatible with union""",
          'defined-type': "brocade-uda-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset1", rest_name="uda-offset1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)""",
        })

    self.__uda_offset1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_offset1(self):
    self.__uda_offset1 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset1", rest_name="uda-offset1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)


  def _get_uda_offset2(self):
    """
    Getter method for uda_offset2, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset2 (union)
    """
    return self.__uda_offset2
      
  def _set_uda_offset2(self, v, load=False):
    """
    Setter method for uda_offset2, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset2 (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_offset2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_offset2() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset2", rest_name="uda-offset2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_offset2 must be of a type compatible with union""",
          'defined-type': "brocade-uda-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset2", rest_name="uda-offset2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)""",
        })

    self.__uda_offset2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_offset2(self):
    self.__uda_offset2 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset2", rest_name="uda-offset2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)


  def _get_uda_offset3(self):
    """
    Getter method for uda_offset3, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset3 (union)
    """
    return self.__uda_offset3
      
  def _set_uda_offset3(self, v, load=False):
    """
    Setter method for uda_offset3, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset3 (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_offset3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_offset3() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset3", rest_name="uda-offset3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_offset3 must be of a type compatible with union""",
          'defined-type': "brocade-uda-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset3", rest_name="uda-offset3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)""",
        })

    self.__uda_offset3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_offset3(self):
    self.__uda_offset3 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset3", rest_name="uda-offset3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)


  def _get_uda_offset4(self):
    """
    Getter method for uda_offset4, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset4 (union)
    """
    return self.__uda_offset4
      
  def _set_uda_offset4(self, v, load=False):
    """
    Setter method for uda_offset4, mapped from YANG variable /uda_key/profile/uda_profile_offsets/uda_offset4 (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_offset4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_offset4() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset4", rest_name="uda-offset4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset4', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_offset4 must be of a type compatible with union""",
          'defined-type': "brocade-uda-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset4", rest_name="uda-offset4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset4', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)""",
        })

    self.__uda_offset4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_offset4(self):
    self.__uda_offset4 = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ignore': {'value': 0}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 124']}),], is_leaf=True, yang_name="uda-offset4", rest_name="uda-offset4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'offset4', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='union', is_config=True)

  uda_offset1 = __builtin__.property(_get_uda_offset1, _set_uda_offset1)
  uda_offset2 = __builtin__.property(_get_uda_offset2, _set_uda_offset2)
  uda_offset3 = __builtin__.property(_get_uda_offset3, _set_uda_offset3)
  uda_offset4 = __builtin__.property(_get_uda_offset4, _set_uda_offset4)


  _pyangbind_elements = {'uda_offset1': uda_offset1, 'uda_offset2': uda_offset2, 'uda_offset3': uda_offset3, 'uda_offset4': uda_offset4, }


