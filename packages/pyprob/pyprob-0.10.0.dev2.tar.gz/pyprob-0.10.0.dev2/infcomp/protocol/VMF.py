# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class VMF(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVMF(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VMF()
        x.Init(buf, n + offset)
        return x

    # VMF
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VMF
    def PriorMu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VMF
    def PriorKappa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VMF
    def ProposalMu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VMF
    def ProposalKappa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def VMFStart(builder): builder.StartObject(4)
def VMFAddPriorMu(builder, priorMu): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(priorMu), 0)
def VMFAddPriorKappa(builder, priorKappa): builder.PrependFloat64Slot(1, priorKappa, 0.0)
def VMFAddProposalMu(builder, proposalMu): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(proposalMu), 0)
def VMFAddProposalKappa(builder, proposalKappa): builder.PrependFloat64Slot(3, proposalKappa, 0.0)
def VMFEnd(builder): return builder.EndObject()
