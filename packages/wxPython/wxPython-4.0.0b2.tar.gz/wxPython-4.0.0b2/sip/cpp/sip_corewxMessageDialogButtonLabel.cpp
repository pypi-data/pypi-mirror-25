/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 *     Copyright: (c) 2017 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/msgdlg.h>
            #include <wx/msgdlg.h>



PyDoc_STRVAR(doc_wxMessageDialog_ButtonLabel_GetAsString, "GetAsString() -> String\n"
    "\n"
    "Return the associated label as string.");

extern "C" {static PyObject *meth_wxMessageDialog_ButtonLabel_GetAsString(PyObject *, PyObject *);}
static PyObject *meth_wxMessageDialog_ButtonLabel_GetAsString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxMessageDialog::ButtonLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxMessageDialog_ButtonLabel, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetAsString());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ButtonLabel, sipName_GetAsString, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxMessageDialog_ButtonLabel_GetStockId, "GetStockId() -> int\n"
    "\n"
    "Return the stock id or wxID_NONE if this is not a stock label.");

extern "C" {static PyObject *meth_wxMessageDialog_ButtonLabel_GetStockId(PyObject *, PyObject *);}
static PyObject *meth_wxMessageDialog_ButtonLabel_GetStockId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxMessageDialog::ButtonLabel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxMessageDialog_ButtonLabel, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStockId();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ButtonLabel, sipName_GetStockId, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxMessageDialog_ButtonLabel(void *, int);}
static void release_wxMessageDialog_ButtonLabel(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxMessageDialog::ButtonLabel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxMessageDialog_ButtonLabel(sipSimpleWrapper *);}
static void dealloc_wxMessageDialog_ButtonLabel(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxMessageDialog_ButtonLabel(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxMessageDialog_ButtonLabel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxMessageDialog_ButtonLabel(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxMessageDialog::ButtonLabel *sipCpp = 0;

    {
        int stockId;

        static const char *sipKwdList[] = {
            sipName_stockId,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i", &stockId))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxMessageDialog::ButtonLabel(stockId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxString* label;
        int labelState = 0;

        static const char *sipKwdList[] = {
            sipName_label,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1", sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxMessageDialog::ButtonLabel(*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxMessageDialog::ButtonLabel* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxMessageDialog_ButtonLabel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxMessageDialog::ButtonLabel(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxMessageDialog_ButtonLabel[] = {
    {SIP_MLNAME_CAST(sipName_GetAsString), meth_wxMessageDialog_ButtonLabel_GetAsString, METH_VARARGS, SIP_MLDOC_CAST(doc_wxMessageDialog_ButtonLabel_GetAsString)},
    {SIP_MLNAME_CAST(sipName_GetStockId), meth_wxMessageDialog_ButtonLabel_GetStockId, METH_VARARGS, SIP_MLDOC_CAST(doc_wxMessageDialog_ButtonLabel_GetStockId)}
};

sipVariableDef variables_wxMessageDialog_ButtonLabel[] = {
    {PropertyVariable, sipName_StockId, &methods_wxMessageDialog_ButtonLabel[1], NULL, NULL, NULL},
    {PropertyVariable, sipName_AsString, &methods_wxMessageDialog_ButtonLabel[0], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxMessageDialog_ButtonLabel, "ButtonLabel(stockId)\n"
    "ButtonLabel(label)\n"
    "\n"
    "Helper class allowing to use either stock id or string labels.");


sipClassTypeDef sipTypeDef__core_wxMessageDialog_ButtonLabel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxMessageDialog__ButtonLabel,
        {0},
        0
    },
    {
        sipNameNr_ButtonLabel,
        {325, 255, 0},
        2, methods_wxMessageDialog_ButtonLabel,
        0, 0,
        2, variables_wxMessageDialog_ButtonLabel,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxMessageDialog_ButtonLabel,
    -1,
    -1,
    0,
    0,
    init_type_wxMessageDialog_ButtonLabel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxMessageDialog_ButtonLabel,
    0,
    0,
    0,
    release_wxMessageDialog_ButtonLabel,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
