import py.test

from csirtg_smrt import Smrt
from csirtg_smrt.rule import Rule
from csirtg_smrt.constants import REMOTE_ADDR
from pprint import pprint
from csirtg_smrt.utils.zarrow import parse_timestamp

rule = 'test/malwaredomains/malwaredomains.yml'
rule = Rule(path=rule)
rule.fetcher = 'file'
s = Smrt(REMOTE_ADDR, 1234, client='dummy')


def test_malwaredomains_malware():
    rule.remote = 'test/malwaredomains/domains.zip'
    x = s.process(rule, feed="malware_domains")
    x = list(x)

    assert len(x) > 0
    assert len(x[0].indicator) > 4

    indicators = set()
    for i in x:
        indicators.add(i.indicator)

    tags = set()
    for i in x:
        for t in i.tags:
            tags.add(t)

    assert 'exploit' in tags
    assert 'ccjbox.ivyro.net' in indicators

    for i in x:
        assert parse_timestamp(i.reporttime).year > 1980
        assert parse_timestamp(i.lasttime).year > 1980
        assert parse_timestamp(i.firsttime).year > 1980


def test_malwaredomains_botnet():
    rule.remote = 'test/malwaredomains/domains.zip'
    x = s.process(rule, feed="botnet_domains")
    x = list(x)

    assert len(x) > 0
    assert len(x[0].indicator) > 4

    indicators = set()
    for i in x:
        indicators.add(i.indicator)

    tags = set()
    for i in x:
        for t in i.tags:
            tags.add(t)

    assert 'botnet' in tags
    assert 'attack_page' not in tags

    assert '9virgins.com' in indicators


def test_malwaredomains_registrars():
    rule.remote = 'test/malwaredomains/bulk_registrars.zip'
    x = s.process(rule, feed="registrars")
    x = list(x)

    assert len(x) > 0
    assert len(x[0].indicator) > 4

    indicators = set()
    for i in x:
        indicators.add(i.indicator)

    tags = set()
    for i in x:
        for t in i.tags:
            tags.add(t)

    assert 'registrar' in tags
    assert 'aaa.ai' in indicators


def test_malwaredomains_urlshorteners():
    rule.remote = 'test/malwaredomains/url_shorteners.zip'
    x = s.process(rule, feed="url_shorteners")
    x = list(x)

    assert len(x) > 0
    assert len(x[0].indicator) > 4

    indicators = set()
    for i in x:
        indicators.add(i.indicator)

    tags = set()
    for i in x:
        for t in i.tags:
            tags.add(t)

    assert 'service' in tags
    assert 'url123.info' in indicators