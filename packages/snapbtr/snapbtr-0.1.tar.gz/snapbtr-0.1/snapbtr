#!/usr/bin/env python2.7
#
# snapbtr is a small utility that keeps snapshots of btrfs filesystems.
# Copyright (C) 2017 Yuri Volchkov <yuri.volchkov@gmail.com>
# Copyright (C) 2012 Helge Jensen <hej@actua.dk>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Snapbtr is originally written by Helge Jensen. It is re-published
# under the GPLv3 with his consent and blessing.

import re, math, time, os, os.path, sys, shutil, stat, statvfs
from colorama import Fore, Back, Style
from datetime import datetime, timedelta

VERSION='0.1'

DATE_FORMAT = '%Y%m%d-%H%M%S' # date format used for directories to clean
DEFAULT_KEEP_BACKUPS = 2

# find TIME_SCALE: t < 2**32 => e**(t/c) < 2**32
TIME_SCALE = math.ceil(float((2**32)/math.log(2**32)))

def timef(x):
    """make value inverse exponential in the time passed"""
    try:
        v = math.exp(
            time.mktime(
                time.strptime(
                    os.path.split(x)[1],
                    DATE_FORMAT))
            /TIME_SCALE)
    except:
        v = None
    return v

def sorted_value(dirs):
    if len(dirs) <= 0:
        return dirs
    else:
        return _sorted_value(dirs)

def test_quads(items):
    """
>>> test_quads((1,2,3,4))
[(None, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, None)]
>>> test_quads((1,2,3))
[(None, 1, 2, 3), (1, 2, 3, None)]
>>> test_quads((1,2))
[(None, 1, 2, None)]
>>> test_quads((1,2,3,4,5))
[(None, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, None)]
    """
    return list((i) for i in quads(items))

def quads(items):
    rest = iter(items)
    before = None
    a = rest.next()
    b = rest.next()
    for next in rest:
        yield (before, a, b, next)
        before = a
        a = b
        b = next
    yield(before, a, b, None)

def test_sorted_value(dirs):
    """
>>> test_sorted_value(('20101201-000000', '20101201-010000', '20101201-020000', \
    '20101201-030000', '20101201-040000', '20101201-050000', '20101201-060000', \
    '20101201-070000', '20101201-080000'))
['20101201-010000', '20101201-030000', '20101201-050000', '20101201-070000', \
'20101201-020000', '20101201-060000', '20101201-040000']
>>> test_sorted_value(('20161216-214958',  '20161216-215350',  '20161216-222151',\
  '20161216-222154', '20161217-133217'))
['20161216-222151', '20161216-215350', '20161216-222154']
    """
    return list((i) for i in _sorted_value(dirs))

def _sorted_value(dirs):
    """Iterate dirs, sorted by their relative value when deleted"""
    def poles(items):
        """Yield (items[0], items[1]), (items[1], items[2]), ... (items[n-1], items[n])"""
        rest = iter(items)
        last = rest.next()
        for next in rest:
            yield (last, next)
            last = next
    def all_but_last(items):
        """Yield items[0], ..., items[n-1]"""
        rest = iter(items)
        last = rest.next()
        for x in rest:
            yield last
            last = x

    # Remaining candidates for yield,
    # except the "max" one (latest)
    candidates = dict((x, xf)
                      for xf, x
                      in sorted((timef(y), y) for y in dirs)
                      if xf)
    # Keep going as long as there is anything to remove
    while len(candidates) > 2:
        # Get candidates ordered by timestamp (as v is monitonic in timestamp)
        remain = sorted((v, k) for k, v in candidates.iteritems())
        newest_element = remain[-1][1]
        # Find the "amount of information we loose by deleting the
        # latest of the pair"
        diffs = list((to_tf - frm_tf, frm, to)
                     for ((frm_tf, frm), (to_tf, to))
                     in poles(remain))
        # Select the least important one
        mdiff, mfrm, mto = min(diffs)

        for (__before, a, b, __after) in quads(remain):
            # A bit of math mess here, so some explanation of variables
            # meaning would not hurt:
            #    a[0] - logarithmic timestamp
            #    a[1] - text timestemp
            #    mfrm - text timestemp of the 1st dir in the pair
            #    mfto - text timestemp of the 2nd dir in the pair
            before = __before[1] if __before else None
            after = __after[1] if __after else None

            # Now we have found a pair with the smallest logarithmic
            # distance. We need to kill one from this pair. Who is
            # going to be a victim? Following rules apply:
            # 1) It should not be the oldest or newest ever backup
            # 2) The new gap has to be the smallest. Is the resulting
            #    distance smaller then it would be if we choose
            #    another one?
            if a[1] == mfrm:
                if b[1] != mto:
                    raise Exception("unexpected candidate")
                if not after:
                    mkill = mfrm
                elif not before:
                    mkill = mto
                else:
                    diff_before = candidates[mfrm] - candidates[before]
                    diff_after = candidates[after] - candidates[mto]
                    mkill = mto if diff_after < diff_before else mfrm
                break
        # Uncomment to visualize the algorithm
        # cand_str = ""
        # for (i,j) in remain:
        #     if j == mkill:
        #         j = Fore.RED + j + Fore.RESET
        #     elif j == mfrm or j == mto:
        #         j = Fore.GREEN + j + Fore.RESET
        #     cand_str += j + " "
        # print cand_str

        if mkill == newest_element:
            # Protect ourselves. Last backup should not ever be deleted
            raise Exception("attempt to kill the newest backup")
        del candidates[mkill] # That's not a candidate any longer, it's gonna go
        yield mkill

def freespace(path):
    st = os.statvfs(path)
    return st[statvfs.F_BFREE] * st[statvfs.F_FRSIZE]

class Operations:
    def __init__(self, path, trace=None):
        self.tracef = trace
        self.snap_dir = path
    def check_call(self, args):
        cmd_str = " ".join(args)
        self.trace(cmd_str)
        import subprocess
        p = subprocess.Popen(
            args,
            stdout=subprocess.PIPE)
        stdout = p.communicate()[0]
        self.trace(stdout)
        if p.returncode != 0:
            raise Exception("failed %s" % cmd_str)
        return p.returncode
    def unsnap(self, dir):
        import subprocess
        args = ["btrfs", "subvolume", "delete",
                os.path.join(self.snap_dir, dir)]
        self.check_call(args)
    def freespace(self):
        return freespace(self.snap_dir)
    def listdir(self):
        return [d for d in os.listdir(self.snap_dir)
                if timef(d)]
    def snap(self, subvol_path):
        import subprocess

        new_snap_path = os.path.join(self.snap_dir, self.datestamp())
        if os.path.exists(new_snap_path):
            raise Exception("Snapshot " + new_snap_path +
                            " already exists " +
                            "(making snapshots too fast?)")

        args = ["btrfs", "subvolume", "snapshot",
                subvol_path, new_snap_path]
        self.check_call(args)
    def datestamp(self):
        return time.strftime(DATE_FORMAT, time.gmtime(None))
    def trace(self, *args, **kwargs):
        f = self.tracef
        if f:
            f(*args, **kwargs)

class FakeOperations(Operations):
    def __init__(self,
                 path,
                 trace=None,
                 dirs=None,
                 space=None,
                 snap_space=None,
                 time_now=None):
        Operations.__init__(self, path=path, trace=trace)
        if dirs is None:
            dirs = {}
        if space is None:
            space = 0
        self.dirs = dirs
        self.space = space
        if snap_space is None:
            snap_space = 1
        self.snap_space = snap_space
        self.time_now = time_now

    def snap(self, subvol_path):
        self.trace("snap(%s)", subvol_path)
        self.dirs[self.datestamp()] = self.snap_space

    def unsnap(self, dir):
        self.trace("unsnap(%s)", dir)
        v = self.dirs[dir]
        self.space += v
        del self.dirs[dir]
    def listdir(self):
        self.trace("listdir() = %s", self.dirs.keys())
        return self.dirs.iterkeys()
    def freespace(self):
        self.trace("freespace() = %s", self.space)
        return self.space
    def datestamp(self):
        if not self.time_now:
            return super(FakeOperations, self).datestamp()
        else:
            return self.time_now

class DryrunOperations(Operations):
    def snap(self, subvol_path):
        path = os.path.join(self.snap_dir, self.datestamp())
        if os.path.commonprefix((path, os.getcwd())) != '/':
            path = os.path.relpath(path)
        print(Fore.GREEN + "+ " + path + Fore.RESET)
    def unsnap(self, dir):
        path = os.path.join(self.snap_dir, dir)
        if os.path.commonprefix((path, os.getcwd())) != '/':
            path = os.path.relpath(path)
        print(Fore.RED + "- " + path + Fore.RESET)

def test_cleandir(free, backups, keep=DEFAULT_KEEP_BACKUPS, preserve=0):
    """
>>> test_cleandir(None, 3)
(29, ['20101130-000000', '20101204-040000', '20101208-080000'])

>>> test_cleandir(13, None)
(14, ['20101130-000000', '20101202-020000', '20101204-040000',\
 '20101206-060000', '20101207-070000', '20101208-080000'])

>>> test_cleandir(13, 7)
(14, ['20101130-000000', '20101202-020000', '20101204-040000',\
 '20101206-060000', '20101207-070000', '20101208-080000'])

>>> test_cleandir(13, 5)
(21, ['20101130-000000', '20101202-020000', '20101204-040000',\
 '20101206-060000', '20101208-080000'])

>>> test_cleandir(15, 7)
(21, ['20101130-000000', '20101202-020000', '20101204-040000',\
 '20101206-060000', '20101208-080000'])

>>> test_cleandir(34, None)
Reached the minimum number of backups to keep (2)
(33, ['20101130-000000', '20101208-080000'])

>>> test_cleandir(None, 5, 6)
Reached the minimum number of backups to keep (6)
(14, ['20101130-000000', '20101202-020000', '20101204-040000',\
 '20101206-060000', '20101207-070000', '20101208-080000'])

# Here backup N8 is immutable - it stays anyways. Plus, we requested to
# keep 3 more backups
>>> test_cleandir(None, 3, preserve = 1)
(22, ['20101130-000000', '20101204-040000', '20101207-070000', '20101208-080000'])

>>> test_cleandir(None, 3, preserve = 2)
(16, ['20101130-000000', '20101204-040000', '20101206-060000', \
'20101207-070000', '20101208-080000'])

>>> test_cleandir(None, 3, preserve = 7)
Traceback (most recent call last):
SystemExit: Number of backups is less then requested to keep
    """
    class targets_container:
        def __init__(self, keep, free, backups, preserve):
            self.keep_backups = keep
            self.target_freespace = free
            self.target_backups = backups
            self.preserve_days = preserve

    use_trace = None
    # use_trace = default_trace
    ops = FakeOperations(path='.',
                         trace=use_trace,
                         dirs={
                             '20101130-000000': 0,
                             '20101201-010000': 1,
                             '20101202-020000': 2,
                             '20101203-030000': 3,
                             '20101204-040000': 4,
                             '20101205-050000': 5,
                             '20101206-060000': 6,
                             '20101207-070000': 7,
                             '20101208-080000': 8,
                         },
                         space=5,
                         time_now='20101208-080000')
    targets = targets_container(keep, free, backups, preserve)

    cleandir(ops, targets)
    dirs_remained = sorted((i) for (i, j) in ops.dirs.iteritems())
    new_free = ops.space
    return (new_free, dirs_remained)

def test_filter_out_ndays(dirs, ndays, now_ts):
    """
>>> test_filter_out_ndays(('20101201-000000', '20101202-000000',\
 '20101203-000000', '20101204-000000', '20101205-000000',\
 '20101206-000000', '20101207-000000', '20101208-000000',\
 '20101209-000000'), ndays=3, now_ts='20101209-000000')
('20101201-000000', '20101202-000000', '20101203-000000', '20101204-000000',\
 '20101205-000000')

>>> test_filter_out_ndays(('20101201-000000', '20101202-000000',\
 '20101203-000000', '20101204-000000', '20101205-000000',\
 '20101206-000000', '20101207-000000', '20101208-000000',\
 '20101209-000000'), ndays=3, now_ts='20101209-000001')
('20101201-000000', '20101202-000000', '20101203-000000', '20101204-000000',\
 '20101205-000000', '20101206-000000')

>>> test_filter_out_ndays(('20101201-000000', '20101202-000000',\
 '20101203-000000', '20101204-000000', '20101205-000000',\
 '20101206-000000', '20101207-000000', '20101208-000000',\
 '20101209-000000'), ndays=1, now_ts='20101209-100001')
('20101201-000000', '20101202-000000', '20101203-000000', '20101204-000000',\
 '20101205-000000', '20101206-000000', '20101207-000000', '20101208-000000')
    """
    ops = Operations(path='.', trace=None)
    return filter_out_ndays(ops, dirs, ndays, now_ts)

def filter_out_ndays(ops, dirs, ndays, now_ts=None):
    """
    """
    def is_before(dir_name):
        return datetime.strptime(dir_name, DATE_FORMAT) < ndays_before

    if now_ts is None:
        now_ts = ops.datestamp()

    now = datetime.strptime(now_ts, DATE_FORMAT)
    ndays_before = now - timedelta(days=ndays)
    # print ndays_before
    return filter(is_before, dirs)

def cleandir(operations, targets):
    """Perform actual cleanup using 'operations' until 'targets' are met"""
    trace = operations.trace
    keep_backups = targets.keep_backups
    target_fsp = targets.target_freespace
    target_backups = targets.target_backups
    preserve_days = targets.preserve_days
    last_dirs = []
    def first(it):
        for x in it:
            return x

    victims_list = None
    dirs = sorted(operations.listdir())

    if preserve_days != 0:
        dirs = filter_out_ndays(operations, dirs, preserve_days)
    if len(dirs) <= targets.target_backups:
        sys.exit("Number of backups is less then requested to keep")

    while True:
        do_del = None
        dirs_len = len(dirs)
        if dirs_len <= 0:
            raise Exception("No more directories to clean")
            break
        elif sorted(dirs) == last_dirs:
            raise Exception("No directories removed")
            break
        else:
            last_dirs = dirs[:]

        if target_fsp is not None:
            fsp = operations.freespace()
            #print "+++ ", fsp, target_fsp, fsp >= target_fsp
            if fsp >= target_fsp:
                trace("Satisfied freespace target: %s with %s",
                      fsp, target_fsp)
                target_fsp = None
                do_del = False
            else:
                do_del = True

        if target_backups is not None:
            if dirs_len <= target_backups:
                trace("Satisfied target number of backups: %s with %s",
                      target_backups, dirs_len)
                target_backups = None
                if do_del is None:
                    do_del = False
            else:
                do_del = True

        if not do_del:
            break

        if keep_backups is not None:
            if dirs_len <= keep_backups:
                print("Reached the minimum number of backups to keep (%s)" %
                      keep_backups)
                break

        if victims_list is None:
            victims_list = sorted_value(dirs)

        try:
            next_del = victims_list.next()
        except StopIteration:
            trace("Can not satisfy targets - no more victims left")
            break

        if not next_del in dirs:
            raise Exception("victim is not in the directories list")

        dirs.remove(next_del)
        operations.unsnap(next_del)

def default_trace(fmt, *args, **kwargs):
    if args is not None:
        print(fmt % args)
    elif kwargs is not None:
        print(fmt % kwargs)
    else:
        print(fmt)

def main(argv):
    def args():
        import argparse
        def parse_target_freespace(target_str):
            import re
            mods = {
                None: 0,
                'K': 1,
                'M': 2,
                'G': 3
            }
            form = "([0-9]+)(%s)?" % \
                "|".join(x for x in mods.iterkeys() if x is not None)
            m = re.match(form, target_str, re.IGNORECASE)
            if m:
                val, mod = m.groups()
                return int(val) * 1024**mods[mod.upper()]
            else:
                raise "Invalid value: %s, expected: %s" % (target_str, form)

        parser = argparse.ArgumentParser(
            description='Create and kill btrfs snapshots',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
            )

        parser.add_argument('subvolume', nargs='?', default=None,
                            help='Path to backuping subvolume')
        parser.add_argument('snapshots_dir',
                            help='Path to snapshots folder')

        parser.add_argument('-c', '--do-clean', action='store_true',
                            default=False)
        parser.add_argument('-s', '--do-snap', action='store_true',
                            default=False)

        parser.add_argument('-b', '--target-backups',
                            metavar='', type=int,
                            help=
                            'Cleanup PATH until at most B backups remain')

        parser.add_argument('-v', '--verbose', help='Verbose output',
                            action='store_true')
        parser.add_argument('--dry-run',
                            help='Do nothing, report what would have happen',
                            default=False,
                            action='store_true')
        parser.add_argument('--preserve-days', '-P',
                            metavar='DAYS_N',
                            default=0, type=int,
                            help='''Backups which are taken within
                            DAYS_N last days are untouchable''')

        parser.add_argument('-V', '--version', action='version',
                            version=VERSION)

        # TODO:
        # The target-freespace makes little sense in its current
        # implementation, because it checks if condition is met right
        # after removing a snapshot. However, the space freed from
        # removing the snapshot does not appeared in the <df> output
        # right away. Btrfs has to do some background work to make it
        # happen.
        #
        # Just disable option for now. Lets figure out later, whether
        # to remove this functionality, or implement extremely slow
        # version, which waits for background process to be finished
        # after killing every snapshot.

        # target_group.add_argument('--target-freespace', '-F',
        #                           dest='target_freespace',
        #                           metavar = 'SIZE',
        #                           default = None,
        #                           help = '''Cleanup PATH until at
        #                           least SIZE is free. SIZE is #bytes,
        #                           or given with K, M, G or T
        #                           respectively for kilo, ...''')

        # TODO: Now, without --target-freespace, --target-backups and
        # --keep-backups have the same meaning. One of them is disabled for now
        #
        # parser.add_argument('-k', '--keep-backups', type = int,
        #                     default = DEFAULT_KEEP_BACKUPS,
        #                     help = '''How many snapshots should
        #                     stay. Minimum 2: the oldest and newest
        #                     backups are always kept''')

        pa = parser.parse_args(argv[1:])

        # Temporary stub disabled options
        pa.target_freespace = None
        pa.keep_backups = 2

        # TODO: uncomment when --target-freespace is enabled again
        # if pa.target_freespace:
        #     pa.target_freespace = parse_target_freespace(pa.target_freespace)

        return pa, parser


    pa, parser = args()

    if pa.verbose:
        trace = default_trace
    else:
        trace = None

    if (pa.target_freespace is None and pa.target_backups is None
            and pa.do_clean):
        parser.error("Set a target, with --target-backups")

    if pa.do_clean and pa.target_backups < 2:
        parser.error("--target-backups can not be less then 2")

    if pa.dry_run:
        # if pa.target_freespace:
        #     parser.error("--dry-run with --target_freespace is not supported")
        operations = DryrunOperations(path=pa.snapshots_dir, trace=trace)
    else:
        operations = Operations(path=pa.snapshots_dir, trace=trace)

    if pa.do_snap:
        if pa.subvolume == None:
            parser.error("--do-snap requires subvolume")
        operations.snap(subvol_path=pa.subvolume)

    if pa.do_clean:
        cleandir(operations=operations, targets=pa)

if "__main__" == __name__:
    if "--doctest" in sys.argv:
        import doctest
        sys.exit(doctest.testmod())
    else:
        sys.exit(main(sys.argv))
