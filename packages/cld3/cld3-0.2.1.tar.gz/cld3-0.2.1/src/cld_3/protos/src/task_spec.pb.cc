// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/task_spec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/task_spec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {
class TaskInput_PartDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskInput_Part>
     _instance;
} _TaskInput_Part_default_instance_;
class TaskInputDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskInput>
     _instance;
} _TaskInput_default_instance_;
class TaskOutputDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskOutput>
     _instance;
} _TaskOutput_default_instance_;
class TaskSpec_ParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskSpec_Parameter>
     _instance;
} _TaskSpec_Parameter_default_instance_;
class TaskSpecDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskSpec>
     _instance;
} _TaskSpec_default_instance_;

namespace protobuf_src_2ftask_5fspec_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TaskInput_Part_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskInput_Part_default_instance_);_TaskInput_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskInput_default_instance_);_TaskOutput_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskOutput_default_instance_);_TaskSpec_Parameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskSpec_Parameter_default_instance_);_TaskSpec_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskSpec_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_src_2ftask_5fspec_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInput_Part::kFilePatternFieldNumber;
const int TaskInput_Part::kFileFormatFieldNumber;
const int TaskInput_Part::kRecordFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInput_Part::TaskInput_Part()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.TaskInput.Part)
}
TaskInput_Part::TaskInput_Part(const TaskInput_Part& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_pattern()) {
    file_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_pattern_);
  }
  file_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_format()) {
    file_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_format_);
  }
  record_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_format()) {
    record_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_format_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.TaskInput.Part)
}

void TaskInput_Part::SharedCtor() {
  _cached_size_ = 0;
  file_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskInput_Part::~TaskInput_Part() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.TaskInput.Part)
  SharedDtor();
}

void TaskInput_Part::SharedDtor() {
  file_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskInput_Part::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInput_Part& TaskInput_Part::default_instance() {
  protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskInput_Part* TaskInput_Part::New(::google::protobuf::Arena* arena) const {
  TaskInput_Part* n = new TaskInput_Part;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInput_Part::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.TaskInput.Part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!file_pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_pattern_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!file_format_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_format_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!record_format_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_format_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskInput_Part::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.TaskInput.Part)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_pattern = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_format = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string record_format = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.TaskInput.Part)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.TaskInput.Part)
  return false;
#undef DO_
}

void TaskInput_Part::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.TaskInput.Part)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_pattern = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->file_pattern(), output);
  }

  // optional string file_format = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->file_format(), output);
  }

  // optional string record_format = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->record_format(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.TaskInput.Part)
}

size_t TaskInput_Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.TaskInput.Part)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string file_pattern = 7;
    if (has_file_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_pattern());
    }

    // optional string file_format = 8;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }

    // optional string record_format = 9;
    if (has_record_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInput_Part::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInput_Part*>(&from));
}

void TaskInput_Part::MergeFrom(const TaskInput_Part& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.TaskInput.Part)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_pattern();
      file_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_format();
      file_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_format_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_record_format();
      record_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_format_);
    }
  }
}

void TaskInput_Part::CopyFrom(const TaskInput_Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.TaskInput.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInput_Part::IsInitialized() const {
  return true;
}

void TaskInput_Part::Swap(TaskInput_Part* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInput_Part::InternalSwap(TaskInput_Part* other) {
  using std::swap;
  file_pattern_.Swap(&other->file_pattern_);
  file_format_.Swap(&other->file_format_);
  record_format_.Swap(&other->record_format_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TaskInput_Part::GetTypeName() const {
  return "chrome_lang_id.TaskInput.Part";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInput_Part

// optional string file_pattern = 7;
bool TaskInput_Part::has_file_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskInput_Part::set_has_file_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskInput_Part::clear_has_file_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskInput_Part::clear_file_pattern() {
  file_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_pattern();
}
const ::std::string& TaskInput_Part::file_pattern() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.file_pattern)
  return file_pattern_.GetNoArena();
}
void TaskInput_Part::set_file_pattern(const ::std::string& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.file_pattern)
}
#if LANG_CXX11
void TaskInput_Part::set_file_pattern(::std::string&& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.Part.file_pattern)
}
#endif
void TaskInput_Part::set_file_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.Part.file_pattern)
}
void TaskInput_Part::set_file_pattern(const char* value, size_t size) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.Part.file_pattern)
}
::std::string* TaskInput_Part::mutable_file_pattern() {
  set_has_file_pattern();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.file_pattern)
  return file_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInput_Part::release_file_pattern() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.file_pattern)
  clear_has_file_pattern();
  return file_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInput_Part::set_allocated_file_pattern(::std::string* file_pattern) {
  if (file_pattern != NULL) {
    set_has_file_pattern();
  } else {
    clear_has_file_pattern();
  }
  file_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_pattern);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.file_pattern)
}

// optional string file_format = 8;
bool TaskInput_Part::has_file_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskInput_Part::set_has_file_format() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskInput_Part::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskInput_Part::clear_file_format() {
  file_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_format();
}
const ::std::string& TaskInput_Part::file_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.file_format)
  return file_format_.GetNoArena();
}
void TaskInput_Part::set_file_format(const ::std::string& value) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.file_format)
}
#if LANG_CXX11
void TaskInput_Part::set_file_format(::std::string&& value) {
  set_has_file_format();
  file_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.Part.file_format)
}
#endif
void TaskInput_Part::set_file_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.Part.file_format)
}
void TaskInput_Part::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.Part.file_format)
}
::std::string* TaskInput_Part::mutable_file_format() {
  set_has_file_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.file_format)
  return file_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInput_Part::release_file_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.file_format)
  clear_has_file_format();
  return file_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInput_Part::set_allocated_file_format(::std::string* file_format) {
  if (file_format != NULL) {
    set_has_file_format();
  } else {
    clear_has_file_format();
  }
  file_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.file_format)
}

// optional string record_format = 9;
bool TaskInput_Part::has_record_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskInput_Part::set_has_record_format() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskInput_Part::clear_has_record_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskInput_Part::clear_record_format() {
  record_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_format();
}
const ::std::string& TaskInput_Part::record_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.record_format)
  return record_format_.GetNoArena();
}
void TaskInput_Part::set_record_format(const ::std::string& value) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.record_format)
}
#if LANG_CXX11
void TaskInput_Part::set_record_format(::std::string&& value) {
  set_has_record_format();
  record_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.Part.record_format)
}
#endif
void TaskInput_Part::set_record_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.Part.record_format)
}
void TaskInput_Part::set_record_format(const char* value, size_t size) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.Part.record_format)
}
::std::string* TaskInput_Part::mutable_record_format() {
  set_has_record_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.record_format)
  return record_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInput_Part::release_record_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.record_format)
  clear_has_record_format();
  return record_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInput_Part::set_allocated_record_format(::std::string* record_format) {
  if (record_format != NULL) {
    set_has_record_format();
  } else {
    clear_has_record_format();
  }
  record_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.record_format)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInput::kNameFieldNumber;
const int TaskInput::kCreatorFieldNumber;
const int TaskInput::kFileFormatFieldNumber;
const int TaskInput::kRecordFormatFieldNumber;
const int TaskInput::kMultiFileFieldNumber;
const int TaskInput::kPartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInput::TaskInput()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.TaskInput)
}
TaskInput::TaskInput(const TaskInput& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      file_format_(from.file_format_),
      record_format_(from.record_format_),
      part_(from.part_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_creator()) {
    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  multi_file_ = from.multi_file_;
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.TaskInput)
}

void TaskInput::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_file_ = false;
}

TaskInput::~TaskInput() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.TaskInput)
  SharedDtor();
}

void TaskInput::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInput& TaskInput::default_instance() {
  protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskInput* TaskInput::New(::google::protobuf::Arena* arena) const {
  TaskInput* n = new TaskInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInput::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.TaskInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_format_.Clear();
  record_format_.Clear();
  part_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!creator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*creator_.UnsafeRawStringPointer())->clear();
    }
  }
  multi_file_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.TaskInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string creator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string file_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string record_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_record_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool multi_file = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_multi_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multi_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Part = 6 { ... };
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(51u /* 51 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                6, input, add_part()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.TaskInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.TaskInput)
  return false;
#undef DO_
}

void TaskInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.TaskInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string creator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->creator(), output);
  }

  // repeated string file_format = 3;
  for (int i = 0, n = this->file_format_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_format(i), output);
  }

  // repeated string record_format = 4;
  for (int i = 0, n = this->record_format_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->record_format(i), output);
  }

  // optional bool multi_file = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->multi_file(), output);
  }

  // repeated group Part = 6 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->part_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      6, this->part(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.TaskInput)
}

size_t TaskInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.TaskInput)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated string file_format = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->file_format_size());
  for (int i = 0, n = this->file_format_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file_format(i));
  }

  // repeated string record_format = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->record_format_size());
  for (int i = 0, n = this->record_format_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->record_format(i));
  }

  // repeated group Part = 6 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->part_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->part(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional string creator = 2;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator());
    }

    // optional bool multi_file = 5 [default = false];
    if (has_multi_file()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInput*>(&from));
}

void TaskInput::MergeFrom(const TaskInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.TaskInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_format_.MergeFrom(from.file_format_);
  record_format_.MergeFrom(from.record_format_);
  part_.MergeFrom(from.part_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_creator();
      creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
    }
    if (cached_has_bits & 0x00000004u) {
      multi_file_ = from.multi_file_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskInput::CopyFrom(const TaskInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.TaskInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TaskInput::Swap(TaskInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInput::InternalSwap(TaskInput* other) {
  using std::swap;
  file_format_.InternalSwap(&other->file_format_);
  record_format_.InternalSwap(&other->record_format_);
  part_.InternalSwap(&other->part_);
  name_.Swap(&other->name_);
  creator_.Swap(&other->creator_);
  swap(multi_file_, other->multi_file_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TaskInput::GetTypeName() const {
  return "chrome_lang_id.TaskInput";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInput

// required string name = 1;
bool TaskInput::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskInput::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskInput::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskInput::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TaskInput::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.name)
  return name_.GetNoArena();
}
void TaskInput::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.name)
}
#if LANG_CXX11
void TaskInput::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.name)
}
#endif
void TaskInput::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.name)
}
void TaskInput::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.name)
}
::std::string* TaskInput::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInput::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInput::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.name)
}

// optional string creator = 2;
bool TaskInput::has_creator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskInput::set_has_creator() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskInput::clear_has_creator() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskInput::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creator();
}
const ::std::string& TaskInput::creator() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.creator)
  return creator_.GetNoArena();
}
void TaskInput::set_creator(const ::std::string& value) {
  set_has_creator();
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.creator)
}
#if LANG_CXX11
void TaskInput::set_creator(::std::string&& value) {
  set_has_creator();
  creator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.creator)
}
#endif
void TaskInput::set_creator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_creator();
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.creator)
}
void TaskInput::set_creator(const char* value, size_t size) {
  set_has_creator();
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.creator)
}
::std::string* TaskInput::mutable_creator() {
  set_has_creator();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInput::release_creator() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.creator)
  clear_has_creator();
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInput::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    set_has_creator();
  } else {
    clear_has_creator();
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.creator)
}

// repeated string file_format = 3;
int TaskInput::file_format_size() const {
  return file_format_.size();
}
void TaskInput::clear_file_format() {
  file_format_.Clear();
}
const ::std::string& TaskInput::file_format(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.file_format)
  return file_format_.Get(index);
}
::std::string* TaskInput::mutable_file_format(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.file_format)
  return file_format_.Mutable(index);
}
void TaskInput::set_file_format(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.file_format)
  file_format_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TaskInput::set_file_format(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.file_format)
  file_format_.Mutable(index)->assign(std::move(value));
}
#endif
void TaskInput::set_file_format(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_format_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.file_format)
}
void TaskInput::set_file_format(int index, const char* value, size_t size) {
  file_format_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.file_format)
}
::std::string* TaskInput::add_file_format() {
  // @@protoc_insertion_point(field_add_mutable:chrome_lang_id.TaskInput.file_format)
  return file_format_.Add();
}
void TaskInput::add_file_format(const ::std::string& value) {
  file_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.file_format)
}
#if LANG_CXX11
void TaskInput::add_file_format(::std::string&& value) {
  file_format_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.file_format)
}
#endif
void TaskInput::add_file_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_lang_id.TaskInput.file_format)
}
void TaskInput::add_file_format(const char* value, size_t size) {
  file_format_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_lang_id.TaskInput.file_format)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskInput::file_format() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.file_format)
  return file_format_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TaskInput::mutable_file_format() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.file_format)
  return &file_format_;
}

// repeated string record_format = 4;
int TaskInput::record_format_size() const {
  return record_format_.size();
}
void TaskInput::clear_record_format() {
  record_format_.Clear();
}
const ::std::string& TaskInput::record_format(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.record_format)
  return record_format_.Get(index);
}
::std::string* TaskInput::mutable_record_format(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.record_format)
  return record_format_.Mutable(index);
}
void TaskInput::set_record_format(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.record_format)
  record_format_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TaskInput::set_record_format(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.record_format)
  record_format_.Mutable(index)->assign(std::move(value));
}
#endif
void TaskInput::set_record_format(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_format_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.record_format)
}
void TaskInput::set_record_format(int index, const char* value, size_t size) {
  record_format_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.record_format)
}
::std::string* TaskInput::add_record_format() {
  // @@protoc_insertion_point(field_add_mutable:chrome_lang_id.TaskInput.record_format)
  return record_format_.Add();
}
void TaskInput::add_record_format(const ::std::string& value) {
  record_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.record_format)
}
#if LANG_CXX11
void TaskInput::add_record_format(::std::string&& value) {
  record_format_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.record_format)
}
#endif
void TaskInput::add_record_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_lang_id.TaskInput.record_format)
}
void TaskInput::add_record_format(const char* value, size_t size) {
  record_format_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_lang_id.TaskInput.record_format)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskInput::record_format() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.record_format)
  return record_format_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TaskInput::mutable_record_format() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.record_format)
  return &record_format_;
}

// optional bool multi_file = 5 [default = false];
bool TaskInput::has_multi_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskInput::set_has_multi_file() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskInput::clear_has_multi_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskInput::clear_multi_file() {
  multi_file_ = false;
  clear_has_multi_file();
}
bool TaskInput::multi_file() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.multi_file)
  return multi_file_;
}
void TaskInput::set_multi_file(bool value) {
  set_has_multi_file();
  multi_file_ = value;
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.multi_file)
}

// repeated group Part = 6 { ... };
int TaskInput::part_size() const {
  return part_.size();
}
void TaskInput::clear_part() {
  part_.Clear();
}
const ::chrome_lang_id::TaskInput_Part& TaskInput::part(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.part)
  return part_.Get(index);
}
::chrome_lang_id::TaskInput_Part* TaskInput::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.part)
  return part_.Mutable(index);
}
::chrome_lang_id::TaskInput_Part* TaskInput::add_part() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.part)
  return part_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >*
TaskInput::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.part)
  return &part_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >&
TaskInput::part() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.part)
  return part_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskOutput::kNameFieldNumber;
const int TaskOutput::kFileFormatFieldNumber;
const int TaskOutput::kRecordFormatFieldNumber;
const int TaskOutput::kShardsFieldNumber;
const int TaskOutput::kFileBaseFieldNumber;
const int TaskOutput::kFileExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskOutput::TaskOutput()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.TaskOutput)
}
TaskOutput::TaskOutput(const TaskOutput& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_format()) {
    file_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_format_);
  }
  record_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_format()) {
    record_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_format_);
  }
  file_base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_base()) {
    file_base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_base_);
  }
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_extension()) {
    file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
  }
  shards_ = from.shards_;
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.TaskOutput)
}

void TaskOutput::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shards_ = 0;
}

TaskOutput::~TaskOutput() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.TaskOutput)
  SharedDtor();
}

void TaskOutput::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_base_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskOutput& TaskOutput::default_instance() {
  protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskOutput* TaskOutput::New(::google::protobuf::Arena* arena) const {
  TaskOutput* n = new TaskOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.TaskOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!file_format_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_format_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!record_format_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_format_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!file_base_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_base_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!file_extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_extension_.UnsafeRawStringPointer())->clear();
    }
  }
  shards_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.TaskOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string record_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shards = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_shards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_base = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_extension = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.TaskOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.TaskOutput)
  return false;
#undef DO_
}

void TaskOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.TaskOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string file_format = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_format(), output);
  }

  // optional string record_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record_format(), output);
  }

  // optional int32 shards = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shards(), output);
  }

  // optional string file_base = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_base(), output);
  }

  // optional string file_extension = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_extension(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.TaskOutput)
}

size_t TaskOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.TaskOutput)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 62u) {
    // optional string file_format = 2;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }

    // optional string record_format = 3;
    if (has_record_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_format());
    }

    // optional string file_base = 5;
    if (has_file_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_base());
    }

    // optional string file_extension = 6;
    if (has_file_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_extension());
    }

    // optional int32 shards = 4 [default = 0];
    if (has_shards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shards());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskOutput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskOutput*>(&from));
}

void TaskOutput::MergeFrom(const TaskOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.TaskOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_format();
      file_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_format_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_record_format();
      record_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_format_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_file_base();
      file_base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_base_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_file_extension();
      file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
    }
    if (cached_has_bits & 0x00000020u) {
      shards_ = from.shards_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskOutput::CopyFrom(const TaskOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.TaskOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TaskOutput::Swap(TaskOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskOutput::InternalSwap(TaskOutput* other) {
  using std::swap;
  name_.Swap(&other->name_);
  file_format_.Swap(&other->file_format_);
  record_format_.Swap(&other->record_format_);
  file_base_.Swap(&other->file_base_);
  file_extension_.Swap(&other->file_extension_);
  swap(shards_, other->shards_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TaskOutput::GetTypeName() const {
  return "chrome_lang_id.TaskOutput";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskOutput

// required string name = 1;
bool TaskOutput::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskOutput::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskOutput::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskOutput::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TaskOutput::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.name)
  return name_.GetNoArena();
}
void TaskOutput::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.name)
}
#if LANG_CXX11
void TaskOutput::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.name)
}
#endif
void TaskOutput::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.name)
}
void TaskOutput::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.name)
}
::std::string* TaskOutput::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskOutput::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskOutput::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.name)
}

// optional string file_format = 2;
bool TaskOutput::has_file_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskOutput::set_has_file_format() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskOutput::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskOutput::clear_file_format() {
  file_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_format();
}
const ::std::string& TaskOutput::file_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_format)
  return file_format_.GetNoArena();
}
void TaskOutput::set_file_format(const ::std::string& value) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_format)
}
#if LANG_CXX11
void TaskOutput::set_file_format(::std::string&& value) {
  set_has_file_format();
  file_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.file_format)
}
#endif
void TaskOutput::set_file_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.file_format)
}
void TaskOutput::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.file_format)
}
::std::string* TaskOutput::mutable_file_format() {
  set_has_file_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_format)
  return file_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskOutput::release_file_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_format)
  clear_has_file_format();
  return file_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskOutput::set_allocated_file_format(::std::string* file_format) {
  if (file_format != NULL) {
    set_has_file_format();
  } else {
    clear_has_file_format();
  }
  file_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_format)
}

// optional string record_format = 3;
bool TaskOutput::has_record_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskOutput::set_has_record_format() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskOutput::clear_has_record_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskOutput::clear_record_format() {
  record_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_format();
}
const ::std::string& TaskOutput::record_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.record_format)
  return record_format_.GetNoArena();
}
void TaskOutput::set_record_format(const ::std::string& value) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.record_format)
}
#if LANG_CXX11
void TaskOutput::set_record_format(::std::string&& value) {
  set_has_record_format();
  record_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.record_format)
}
#endif
void TaskOutput::set_record_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.record_format)
}
void TaskOutput::set_record_format(const char* value, size_t size) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.record_format)
}
::std::string* TaskOutput::mutable_record_format() {
  set_has_record_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.record_format)
  return record_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskOutput::release_record_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.record_format)
  clear_has_record_format();
  return record_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskOutput::set_allocated_record_format(::std::string* record_format) {
  if (record_format != NULL) {
    set_has_record_format();
  } else {
    clear_has_record_format();
  }
  record_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.record_format)
}

// optional int32 shards = 4 [default = 0];
bool TaskOutput::has_shards() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TaskOutput::set_has_shards() {
  _has_bits_[0] |= 0x00000020u;
}
void TaskOutput::clear_has_shards() {
  _has_bits_[0] &= ~0x00000020u;
}
void TaskOutput::clear_shards() {
  shards_ = 0;
  clear_has_shards();
}
::google::protobuf::int32 TaskOutput::shards() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.shards)
  return shards_;
}
void TaskOutput::set_shards(::google::protobuf::int32 value) {
  set_has_shards();
  shards_ = value;
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.shards)
}

// optional string file_base = 5;
bool TaskOutput::has_file_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TaskOutput::set_has_file_base() {
  _has_bits_[0] |= 0x00000008u;
}
void TaskOutput::clear_has_file_base() {
  _has_bits_[0] &= ~0x00000008u;
}
void TaskOutput::clear_file_base() {
  file_base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_base();
}
const ::std::string& TaskOutput::file_base() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_base)
  return file_base_.GetNoArena();
}
void TaskOutput::set_file_base(const ::std::string& value) {
  set_has_file_base();
  file_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_base)
}
#if LANG_CXX11
void TaskOutput::set_file_base(::std::string&& value) {
  set_has_file_base();
  file_base_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.file_base)
}
#endif
void TaskOutput::set_file_base(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_base();
  file_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.file_base)
}
void TaskOutput::set_file_base(const char* value, size_t size) {
  set_has_file_base();
  file_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.file_base)
}
::std::string* TaskOutput::mutable_file_base() {
  set_has_file_base();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_base)
  return file_base_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskOutput::release_file_base() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_base)
  clear_has_file_base();
  return file_base_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskOutput::set_allocated_file_base(::std::string* file_base) {
  if (file_base != NULL) {
    set_has_file_base();
  } else {
    clear_has_file_base();
  }
  file_base_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_base);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_base)
}

// optional string file_extension = 6;
bool TaskOutput::has_file_extension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TaskOutput::set_has_file_extension() {
  _has_bits_[0] |= 0x00000010u;
}
void TaskOutput::clear_has_file_extension() {
  _has_bits_[0] &= ~0x00000010u;
}
void TaskOutput::clear_file_extension() {
  file_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_extension();
}
const ::std::string& TaskOutput::file_extension() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_extension)
  return file_extension_.GetNoArena();
}
void TaskOutput::set_file_extension(const ::std::string& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_extension)
}
#if LANG_CXX11
void TaskOutput::set_file_extension(::std::string&& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.file_extension)
}
#endif
void TaskOutput::set_file_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.file_extension)
}
void TaskOutput::set_file_extension(const char* value, size_t size) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.file_extension)
}
::std::string* TaskOutput::mutable_file_extension() {
  set_has_file_extension();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_extension)
  return file_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskOutput::release_file_extension() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_extension)
  clear_has_file_extension();
  return file_extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskOutput::set_allocated_file_extension(::std::string* file_extension) {
  if (file_extension != NULL) {
    set_has_file_extension();
  } else {
    clear_has_file_extension();
  }
  file_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_extension);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_extension)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskSpec_Parameter::kNameFieldNumber;
const int TaskSpec_Parameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskSpec_Parameter::TaskSpec_Parameter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.TaskSpec.Parameter)
}
TaskSpec_Parameter::TaskSpec_Parameter(const TaskSpec_Parameter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.TaskSpec.Parameter)
}

void TaskSpec_Parameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskSpec_Parameter::~TaskSpec_Parameter() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.TaskSpec.Parameter)
  SharedDtor();
}

void TaskSpec_Parameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskSpec_Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskSpec_Parameter& TaskSpec_Parameter::default_instance() {
  protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskSpec_Parameter* TaskSpec_Parameter::New(::google::protobuf::Arena* arena) const {
  TaskSpec_Parameter* n = new TaskSpec_Parameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskSpec_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.TaskSpec.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskSpec_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.TaskSpec.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.TaskSpec.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.TaskSpec.Parameter)
  return false;
#undef DO_
}

void TaskSpec_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.TaskSpec.Parameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.TaskSpec.Parameter)
}

size_t TaskSpec_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.TaskSpec.Parameter)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string name = 4;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional string value = 5;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpec_Parameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskSpec_Parameter*>(&from));
}

void TaskSpec_Parameter::MergeFrom(const TaskSpec_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.TaskSpec.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void TaskSpec_Parameter::CopyFrom(const TaskSpec_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.TaskSpec.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec_Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TaskSpec_Parameter::Swap(TaskSpec_Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskSpec_Parameter::InternalSwap(TaskSpec_Parameter* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TaskSpec_Parameter::GetTypeName() const {
  return "chrome_lang_id.TaskSpec.Parameter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskSpec_Parameter

// required string name = 4;
bool TaskSpec_Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskSpec_Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskSpec_Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskSpec_Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TaskSpec_Parameter::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.Parameter.name)
  return name_.GetNoArena();
}
void TaskSpec_Parameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.Parameter.name)
}
#if LANG_CXX11
void TaskSpec_Parameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.Parameter.name)
}
#endif
void TaskSpec_Parameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.Parameter.name)
}
void TaskSpec_Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.Parameter.name)
}
::std::string* TaskSpec_Parameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.Parameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskSpec_Parameter::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.Parameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskSpec_Parameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.Parameter.name)
}

// optional string value = 5;
bool TaskSpec_Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskSpec_Parameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskSpec_Parameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskSpec_Parameter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& TaskSpec_Parameter::value() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.Parameter.value)
  return value_.GetNoArena();
}
void TaskSpec_Parameter::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.Parameter.value)
}
#if LANG_CXX11
void TaskSpec_Parameter::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.Parameter.value)
}
#endif
void TaskSpec_Parameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.Parameter.value)
}
void TaskSpec_Parameter::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.Parameter.value)
}
::std::string* TaskSpec_Parameter::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.Parameter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskSpec_Parameter::release_value() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.Parameter.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskSpec_Parameter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.Parameter.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskSpec::kTaskNameFieldNumber;
const int TaskSpec::kTaskTypeFieldNumber;
const int TaskSpec::kParameterFieldNumber;
const int TaskSpec::kInputFieldNumber;
const int TaskSpec::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskSpec::TaskSpec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.TaskSpec)
}
TaskSpec::TaskSpec(const TaskSpec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      parameter_(from.parameter_),
      input_(from.input_),
      output_(from.output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_task_name()) {
    task_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_name_);
  }
  task_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_task_type()) {
    task_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_type_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.TaskSpec)
}

void TaskSpec::SharedCtor() {
  _cached_size_ = 0;
  task_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskSpec::~TaskSpec() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.TaskSpec)
  SharedDtor();
}

void TaskSpec::SharedDtor() {
  task_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskSpec& TaskSpec::default_instance() {
  protobuf_src_2ftask_5fspec_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskSpec* TaskSpec::New(::google::protobuf::Arena* arena) const {
  TaskSpec* n = new TaskSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_.Clear();
  input_.Clear();
  output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!task_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*task_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!task_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*task_type_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.TaskSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string task_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string task_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Parameter = 3 { ... };
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(27u /* 27 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                3, input, add_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_lang_id.TaskInput input = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chrome_lang_id.TaskOutput output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.TaskSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.TaskSpec)
  return false;
#undef DO_
}

void TaskSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string task_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_name(), output);
  }

  // optional string task_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_type(), output);
  }

  // repeated group Parameter = 3 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parameter_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      3, this->parameter(static_cast<int>(i)), output);
  }

  // repeated .chrome_lang_id.TaskInput input = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->input(static_cast<int>(i)), output);
  }

  // repeated .chrome_lang_id.TaskOutput output = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->output(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.TaskSpec)
}

size_t TaskSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.TaskSpec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated group Parameter = 3 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->parameter_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->parameter(static_cast<int>(i)));
    }
  }

  // repeated .chrome_lang_id.TaskInput input = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->input_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input(static_cast<int>(i)));
    }
  }

  // repeated .chrome_lang_id.TaskOutput output = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->output_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string task_name = 1;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional string task_type = 2;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskSpec*>(&from));
}

void TaskSpec::MergeFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.TaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_.MergeFrom(from.parameter_);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_task_name();
      task_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_task_type();
      task_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_type_);
    }
  }
}

void TaskSpec::CopyFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.TaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->parameter())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->input())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->output())) return false;
  return true;
}

void TaskSpec::Swap(TaskSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskSpec::InternalSwap(TaskSpec* other) {
  using std::swap;
  parameter_.InternalSwap(&other->parameter_);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  task_name_.Swap(&other->task_name_);
  task_type_.Swap(&other->task_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string TaskSpec::GetTypeName() const {
  return "chrome_lang_id.TaskSpec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskSpec

// optional string task_name = 1;
bool TaskSpec::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskSpec::set_has_task_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskSpec::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskSpec::clear_task_name() {
  task_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_name();
}
const ::std::string& TaskSpec::task_name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.task_name)
  return task_name_.GetNoArena();
}
void TaskSpec::set_task_name(const ::std::string& value) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.task_name)
}
#if LANG_CXX11
void TaskSpec::set_task_name(::std::string&& value) {
  set_has_task_name();
  task_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.task_name)
}
#endif
void TaskSpec::set_task_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.task_name)
}
void TaskSpec::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.task_name)
}
::std::string* TaskSpec::mutable_task_name() {
  set_has_task_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.task_name)
  return task_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskSpec::release_task_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.task_name)
  clear_has_task_name();
  return task_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskSpec::set_allocated_task_name(::std::string* task_name) {
  if (task_name != NULL) {
    set_has_task_name();
  } else {
    clear_has_task_name();
  }
  task_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.task_name)
}

// optional string task_type = 2;
bool TaskSpec::has_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskSpec::set_has_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskSpec::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskSpec::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_type();
}
const ::std::string& TaskSpec::task_type() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.task_type)
  return task_type_.GetNoArena();
}
void TaskSpec::set_task_type(const ::std::string& value) {
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.task_type)
}
#if LANG_CXX11
void TaskSpec::set_task_type(::std::string&& value) {
  set_has_task_type();
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.task_type)
}
#endif
void TaskSpec::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.task_type)
}
void TaskSpec::set_task_type(const char* value, size_t size) {
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.task_type)
}
::std::string* TaskSpec::mutable_task_type() {
  set_has_task_type();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskSpec::release_task_type() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.task_type)
  clear_has_task_type();
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskSpec::set_allocated_task_type(::std::string* task_type) {
  if (task_type != NULL) {
    set_has_task_type();
  } else {
    clear_has_task_type();
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.task_type)
}

// repeated group Parameter = 3 { ... };
int TaskSpec::parameter_size() const {
  return parameter_.size();
}
void TaskSpec::clear_parameter() {
  parameter_.Clear();
}
const ::chrome_lang_id::TaskSpec_Parameter& TaskSpec::parameter(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.parameter)
  return parameter_.Get(index);
}
::chrome_lang_id::TaskSpec_Parameter* TaskSpec::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.parameter)
  return parameter_.Mutable(index);
}
::chrome_lang_id::TaskSpec_Parameter* TaskSpec::add_parameter() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.parameter)
  return parameter_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >*
TaskSpec::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.parameter)
  return &parameter_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >&
TaskSpec::parameter() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.parameter)
  return parameter_;
}

// repeated .chrome_lang_id.TaskInput input = 6;
int TaskSpec::input_size() const {
  return input_.size();
}
void TaskSpec::clear_input() {
  input_.Clear();
}
const ::chrome_lang_id::TaskInput& TaskSpec::input(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.input)
  return input_.Get(index);
}
::chrome_lang_id::TaskInput* TaskSpec::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.input)
  return input_.Mutable(index);
}
::chrome_lang_id::TaskInput* TaskSpec::add_input() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.input)
  return input_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >*
TaskSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.input)
  return &input_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >&
TaskSpec::input() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.input)
  return input_;
}

// repeated .chrome_lang_id.TaskOutput output = 7;
int TaskSpec::output_size() const {
  return output_.size();
}
void TaskSpec::clear_output() {
  output_.Clear();
}
const ::chrome_lang_id::TaskOutput& TaskSpec::output(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.output)
  return output_.Get(index);
}
::chrome_lang_id::TaskOutput* TaskSpec::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.output)
  return output_.Mutable(index);
}
::chrome_lang_id::TaskOutput* TaskSpec::add_output() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.output)
  return output_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >*
TaskSpec::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.output)
  return &output_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >&
TaskSpec::output() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.output)
  return output_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)
