# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-29 18:53
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import habitat.food.models.meal
import habitat.food.models.product


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DayPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
                ('calories', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MaxValueValidator(5000), django.core.validators.MinValueValidator(0)], verbose_name='Calories')),
            ],
            options={
                'verbose_name': 'Day Plan',
                'verbose_name_plural': 'Day Plans',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('type', models.CharField(blank=True, choices=[('basic', 'Basic'), ('healthy', 'Healthy'), ('sport', 'Sport')], db_index=True, default=None, max_length=30, null=True, verbose_name='Type')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Diet',
                'verbose_name_plural': 'Diets',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
                ('preparation_time', models.CharField(blank=True, default=None, help_text='Example: 12h pickiling + 2h preparation + 2h cooking', max_length=255, null=True, verbose_name='Preparation Time')),
                ('difficulty', models.CharField(blank=True, choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], db_index=True, default=None, max_length=30, null=True, verbose_name='Difficulty')),
                ('type', models.CharField(blank=True, choices=[('breakfast', 'Breakfast'), ('brunch', 'Brunch'), ('lunch', 'Lunch'), ('tea', 'Tea'), ('supper', 'Supper')], db_index=True, default=None, max_length=30, null=True, verbose_name='Type')),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to=habitat.food.models.meal.upload_path, verbose_name='Image')),
                ('diet', models.ManyToManyField(blank=True, default=None, to='food.Diet', verbose_name='Diet')),
            ],
            options={
                'verbose_name': 'Meal',
                'verbose_name_plural': 'Meals',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to=habitat.food.models.product.upload_path, verbose_name='Image')),
                ('type', models.CharField(choices=[('custom', 'Custom Made'), ('brand', 'Brand Product'), ('gourmet', 'Gourmet Food'), ('restaurant', 'Restaurant')], db_index=True, default=None, max_length=30, verbose_name='Type')),
                ('category', models.CharField(choices=[('other', 'Other'), ('fruits', 'Fruits'), ('vegetables', 'Vegetables'), ('meat', 'Meat')], db_index=True, default=None, max_length=30, verbose_name='Category')),
                ('modification_date', models.DateTimeField(auto_now=True, verbose_name='Modification Date')),
                ('measurements_physical_form', models.CharField(blank=True, choices=[('solid', 'Solid'), ('liquid', 'Liquid')], db_index=True, default=None, max_length=20, null=True, verbose_name='Phisical Form')),
                ('measurements_volume', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='ml', max_digits=5, null=True, verbose_name='Volume')),
                ('measurements_weight', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g', max_digits=5, null=True, verbose_name='Net Weight')),
                ('calories', models.PositiveSmallIntegerField(blank=True, default=None, help_text='kcal', null=True, verbose_name='Calories')),
                ('roughage', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Roughage')),
                ('cooking_waste', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Cooking Waste')),
                ('cooking_factor', models.IntegerField(blank=True, default=None, null=True, verbose_name='Cooking Factor')),
                ('proteins', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Proteins')),
                ('proteins_animal', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Animal Proteins')),
                ('proteins_plant', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Plant Proteins')),
                ('fats', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Fats')),
                ('fats_saturated', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Saturated Fats')),
                ('fats_monounsaturated', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Monounsaturated Fats')),
                ('fats_polyunsaturated', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Polyunsaturated Fats')),
                ('cholesterol', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Cholesterol')),
                ('carbohydrates', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Carbohydrates')),
                ('carbohydrates_sugars', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='g/100g', max_digits=5, null=True, verbose_name='Sugars')),
                ('vitamins_folic_acid', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='µg/100g', max_digits=5, null=True, verbose_name='Folic Acid')),
                ('vitamins_a', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='µg/100g', max_digits=5, null=True, verbose_name='Vitamin A')),
                ('vitamins_b1', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Vitamin B1')),
                ('vitamins_b2', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Vitamin B2')),
                ('vitamins_b6', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Vitamin B6')),
                ('vitamins_b12', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='µg/100g', max_digits=5, null=True, verbose_name='Vitamin B12')),
                ('vitamins_c', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Vitamin C')),
                ('vitamins_d', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='µg/100g', max_digits=5, null=True, verbose_name='Vitamin D')),
                ('vitamins_e', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Vitamin E')),
                ('vitamins_pp', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Vitamin PP')),
                ('minerals_zinc', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Zinc')),
                ('minerals_phosphorus', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Phosphorus')),
                ('minerals_iodine', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='µg/100g', max_digits=5, null=True, verbose_name='Iodine')),
                ('minerals_magnesium', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Magnesium')),
                ('minerals_copper', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Copper')),
                ('minerals_potasium', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Potasium')),
                ('minerals_selenium', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='µg/100g', max_digits=5, null=True, verbose_name='Selenium')),
                ('minerals_sodium', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Sodium')),
                ('minerals_calcium', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Calcium')),
                ('minerals_iron', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='mg/100g', max_digits=5, null=True, verbose_name='Iron')),
                ('cooking_product', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='food.Product', verbose_name='From Product')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='food.ProductCategory', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
            },
        ),
        migrations.CreateModel(
            name='ProductShoppingUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveSmallIntegerField(default=None, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='ProductUsageUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveSmallIntegerField(default=None, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
                ('type', models.CharField(choices=[('product', 'Product'), ('plan', 'Plan'), ('meal', 'Meal')], default='product', max_length=30, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(default=None, editable=False, verbose_name='Slug')),
                ('type', models.CharField(choices=[('shopping', 'Shopping'), ('usage', 'Usage')], default='usage', max_length=30, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Unit',
                'verbose_name_plural': 'Units',
            },
        ),
        migrations.AddField(
            model_name='productusageunits',
            name='unit',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='food.Unit', verbose_name='Unit'),
        ),
        migrations.AddField(
            model_name='productshoppingunits',
            name='unit',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='food.Unit', verbose_name='Unit'),
        ),
        migrations.AddField(
            model_name='product',
            name='measurements_shopping_unit',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shopping_unit', to='food.Unit', verbose_name='Shopping Unit'),
        ),
        migrations.AddField(
            model_name='product',
            name='measurements_usage_unit',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='usage_unit', to='food.Unit', verbose_name='Usage Unit'),
        ),
        migrations.AddField(
            model_name='product',
            name='modification_author',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Modification Author'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, default=None, to='food.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='meal',
            name='tags',
            field=models.ManyToManyField(blank=True, default=None, to='food.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='breakfast',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='breakfast', to='food.Meal', verbose_name='Breakfast'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='brunch',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brunch', to='food.Meal', verbose_name='Brunch'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='diet',
            field=models.ManyToManyField(blank=True, default=None, to='food.Diet', verbose_name='Diet'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='lunch',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lunch', to='food.Meal', verbose_name='Lunch'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='supper',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supper', to='food.Meal', verbose_name='Supper'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='tags',
            field=models.ManyToManyField(blank=True, default=None, to='food.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='dayplan',
            name='tea',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tea', to='food.Meal', verbose_name='Tea'),
        ),
    ]
