# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-21 20:52
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EtlEventMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_url', models.URLField(help_text='The source URL of the public data set.', unique=True)),
                ('refresh_rate', models.TextField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('months', 'Months'), ('years', 'Years'), ('never', 'Never')], default='never', help_text='Time period for processing the data set.')),
                ('refresh_interval', models.PositiveIntegerField(blank=True, default=None, help_text='Offset for the time period for processing the data set.', null=True)),
                ('refresh_starts_on', models.DateTimeField(blank=True, default=None, help_text='A specific date to wait until before processing the data', null=True)),
                ('last_refreshed', models.DateTimeField(blank=True, default=None, help_text='The date the data set was last processed.', null=True)),
                ('next_refresh', models.DateTimeField(blank=True, default=None, help_text='The next date the data set will be processed.', null=True)),
                ('state', django_fsm.FSMField(default='new', help_text='Processing state of the data set.', max_length=50, protected=True)),
                ('ds_srid', models.TextField(blank=True, default=4326, help_text='The SRID applied to geometry fields.')),
                ('ds_bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, default=None, help_text='A bounding box surrounding the data set geometry fields.', null=True, srid=4326)),
                ('ds_configured_point_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[], help_text='User configured point fields composed of source fields.')),
                ('ds_timezone', models.TextField(blank=True, default='UTC', help_text='The timezone applied to date fields.')),
                ('ds_timerange', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, default=None, help_text='A time range the encompasses the data set date fields.', null=True)),
                ('ds_configured_date_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[], help_text='User configured date fields composed of source fields.')),
                ('name', models.TextField(help_text='The name of the data set.', unique=True)),
                ('slug', models.SlugField(blank=True, editable=False, help_text='String identifier - used in URLs.', unique=True)),
                ('description', models.TextField(blank=True, default=None, help_text='A description of the data set.', null=True)),
                ('attribution', models.TextField(blank=True, default=None, help_text='Where the data set was sourced from.', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date the meta data was created.')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date the meta data was last updated.')),
                ('ds_first_run_date', models.DateTimeField(default=None, help_text='The date the data set was first processed.', null=True)),
                ('ds_last_run_date', models.DateTimeField(default=None, help_text='The date the data set was last processed.', null=True)),
                ('ds_source_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[], help_text='Mapping of source fields to Django fields.')),
                ('contributor', models.ForeignKey(help_text='The owner of the data set.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ETL Event Data Set',
                'abstract': False,
            },
            bases=(django_fsm.ConcurrentTransitionMixin, models.Model),
        ),
    ]
