#!/usr/bin/env python

import argparse
import distutils.spawn
import os
import re
import signal
import subprocess
import sys

# Require python 2.7
if sys.version_info < (2, 7):
    sys.exit("CS50 CLI requires Python 2.7 or higher")
if sys.version_info < (3, 0):
    input = raw_input


def main():

    # Listen for ctrl-c
    signal.signal(signal.SIGINT, handler)

    # Parse command-line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--fast", action="store_true", help="skip autoupdate")
    parser.add_argument("directory", default=os.getcwd(), nargs="?", help="directory to mount")
    args = vars(parser.parse_args())

    # Check for docker
    if not distutils.spawn.find_executable("docker"):
        parser.error("docker not installed")

    # Ensure directory exists
    directory = os.path.realpath(args["directory"])
    if not os.path.isdir(directory):
        parser.error("{}: no such directory".format(args["directory"]))

    # Update image
    if not args["fast"]:
        subprocess.call(["docker", "pull", "cs50/cli:ubuntu"])

    # Check for running containers
    try:
        stdout = subprocess.check_output([
                "docker", "ps",
                "--all",
                "--filter",
                "volume={}".format(directory),
                "--format", "{{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}"
                ]).decode("utf-8")
    except subprocess.CalledProcessError:
        sys.exit(1)
    else:
        containers = []
        for line in stdout.rstrip().splitlines():
                ID, Image, RunningFor, Status = line.split("\t")
                if Image == "cs50/cli" and Status.startswith("Up"):
                    containers.append((ID, RunningFor.lower()))

    # Ask whether to use a running container
    if containers:
        print("{} is already mounted in {} {}.".format(directory, len(containers), "containers" if len(containers) > 1 else "container"))
    for ID, RunningFor in containers:
        while True:
            stdin = input("New shell in {}, running for {}? [Y] ".format(ID, RunningFor))
            if re.match("^\s*(?:y|yes)?\s*$", stdin, re.I):
                subprocess.call([
                    "docker", "exec",
                        "--interactive",
                        "--tty",
                        ID,
                        "bash",
                        "--login"
                        ])
                sys.exit(0)
            else:
                break

    # Options
    options = ["--interactive",
               "--publish", "8080-8082", # a la CS50 IDE
               "--rm",
               "--security-opt", "seccomp=unconfined", # https://stackoverflow.com/q/35860527#comment62818827_35860527
               "--tty",
               "--volume", directory + ":/home/ubuntu/workspace",
               "--workdir", "/home/ubuntu/workspace"]

    # Mount ~/.gitconfig read-only, if exists
    gitconfig = os.path.join(os.path.expanduser("~"), ".gitconfig")
    if os.path.isfile(gitconfig):
        options += ["--volume", "{}:/home/ubuntu/.gitconfig:ro".format(gitconfig)]

    # Mount directory in new container
    subprocess.call(["docker", "run"] + options + ["cs50/cli:ubuntu"])


def handler(number, frame):
    """Handle SIGINT."""
    print("")
    sys.exit(0)


if __name__ == "__main__":
    main()
