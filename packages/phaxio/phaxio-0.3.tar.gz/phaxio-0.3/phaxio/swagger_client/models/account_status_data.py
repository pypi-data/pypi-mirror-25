# coding: utf-8

"""
    Phaxio API

    API Definition for Phaxio

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountStatusData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, balance=None, faxes_today=None, faxes_this_month=None):
        """
        AccountStatusData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'balance': 'int',
            'faxes_today': 'int',
            'faxes_this_month': 'int'
        }

        self.attribute_map = {
            'balance': 'balance',
            'faxes_today': 'faxes_today',
            'faxes_this_month': 'faxes_this_month'
        }

        self._balance = balance
        self._faxes_today = faxes_today
        self._faxes_this_month = faxes_this_month

    @property
    def balance(self):
        """
        Gets the balance of this AccountStatusData.

        :return: The balance of this AccountStatusData.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """
        Sets the balance of this AccountStatusData.

        :param balance: The balance of this AccountStatusData.
        :type: int
        """

        self._balance = balance

    @property
    def faxes_today(self):
        """
        Gets the faxes_today of this AccountStatusData.

        :return: The faxes_today of this AccountStatusData.
        :rtype: int
        """
        return self._faxes_today

    @faxes_today.setter
    def faxes_today(self, faxes_today):
        """
        Sets the faxes_today of this AccountStatusData.

        :param faxes_today: The faxes_today of this AccountStatusData.
        :type: int
        """

        self._faxes_today = faxes_today

    @property
    def faxes_this_month(self):
        """
        Gets the faxes_this_month of this AccountStatusData.

        :return: The faxes_this_month of this AccountStatusData.
        :rtype: int
        """
        return self._faxes_this_month

    @faxes_this_month.setter
    def faxes_this_month(self, faxes_this_month):
        """
        Sets the faxes_this_month of this AccountStatusData.

        :param faxes_this_month: The faxes_this_month of this AccountStatusData.
        :type: int
        """

        self._faxes_this_month = faxes_this_month

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
