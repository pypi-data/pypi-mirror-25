# coding: utf-8

"""
    Phaxio API

    API Definition for Phaxio

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FaxInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, direction=None, num_pages=None, cost=None, status=None, is_test=None, created_at=None, from_number=None, to_number=None, recipients=None, tags=None, error_type=None, error_message=None, error_id=None, completed_at=None):
        """
        FaxInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'direction': 'str',
            'num_pages': 'int',
            'cost': 'int',
            'status': 'str',
            'is_test': 'bool',
            'created_at': 'datetime',
            'from_number': 'str',
            'to_number': 'str',
            'recipients': 'list[Recipient]',
            'tags': 'dict(str, str)',
            'error_type': 'str',
            'error_message': 'str',
            'error_id': 'int',
            'completed_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'direction': 'direction',
            'num_pages': 'num_pages',
            'cost': 'cost',
            'status': 'status',
            'is_test': 'is_test',
            'created_at': 'created_at',
            'from_number': 'from_number',
            'to_number': 'to_number',
            'recipients': 'recipients',
            'tags': 'tags',
            'error_type': 'error_type',
            'error_message': 'error_message',
            'error_id': 'error_id',
            'completed_at': 'completed_at'
        }

        self._id = id
        self._direction = direction
        self._num_pages = num_pages
        self._cost = cost
        self._status = status
        self._is_test = is_test
        self._created_at = created_at
        self._from_number = from_number
        self._to_number = to_number
        self._recipients = recipients
        self._tags = tags
        self._error_type = error_type
        self._error_message = error_message
        self._error_id = error_id
        self._completed_at = completed_at

    @property
    def id(self):
        """
        Gets the id of this FaxInfo.

        :return: The id of this FaxInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FaxInfo.

        :param id: The id of this FaxInfo.
        :type: int
        """

        self._id = id

    @property
    def direction(self):
        """
        Gets the direction of this FaxInfo.

        :return: The direction of this FaxInfo.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this FaxInfo.

        :param direction: The direction of this FaxInfo.
        :type: str
        """
        allowed_values = ["sent", "received"]
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def num_pages(self):
        """
        Gets the num_pages of this FaxInfo.

        :return: The num_pages of this FaxInfo.
        :rtype: int
        """
        return self._num_pages

    @num_pages.setter
    def num_pages(self, num_pages):
        """
        Sets the num_pages of this FaxInfo.

        :param num_pages: The num_pages of this FaxInfo.
        :type: int
        """

        self._num_pages = num_pages

    @property
    def cost(self):
        """
        Gets the cost of this FaxInfo.

        :return: The cost of this FaxInfo.
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this FaxInfo.

        :param cost: The cost of this FaxInfo.
        :type: int
        """

        self._cost = cost

    @property
    def status(self):
        """
        Gets the status of this FaxInfo.

        :return: The status of this FaxInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this FaxInfo.

        :param status: The status of this FaxInfo.
        :type: str
        """
        allowed_values = ["queued", "pendingbatch", "inprogress", "success", "failure", "partialsuccess"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_test(self):
        """
        Gets the is_test of this FaxInfo.

        :return: The is_test of this FaxInfo.
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """
        Sets the is_test of this FaxInfo.

        :param is_test: The is_test of this FaxInfo.
        :type: bool
        """

        self._is_test = is_test

    @property
    def created_at(self):
        """
        Gets the created_at of this FaxInfo.

        :return: The created_at of this FaxInfo.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this FaxInfo.

        :param created_at: The created_at of this FaxInfo.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def from_number(self):
        """
        Gets the from_number of this FaxInfo.

        :return: The from_number of this FaxInfo.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """
        Sets the from_number of this FaxInfo.

        :param from_number: The from_number of this FaxInfo.
        :type: str
        """

        self._from_number = from_number

    @property
    def to_number(self):
        """
        Gets the to_number of this FaxInfo.

        :return: The to_number of this FaxInfo.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """
        Sets the to_number of this FaxInfo.

        :param to_number: The to_number of this FaxInfo.
        :type: str
        """

        self._to_number = to_number

    @property
    def recipients(self):
        """
        Gets the recipients of this FaxInfo.

        :return: The recipients of this FaxInfo.
        :rtype: list[Recipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """
        Sets the recipients of this FaxInfo.

        :param recipients: The recipients of this FaxInfo.
        :type: list[Recipient]
        """

        self._recipients = recipients

    @property
    def tags(self):
        """
        Gets the tags of this FaxInfo.

        :return: The tags of this FaxInfo.
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this FaxInfo.

        :param tags: The tags of this FaxInfo.
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def error_type(self):
        """
        Gets the error_type of this FaxInfo.

        :return: The error_type of this FaxInfo.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """
        Sets the error_type of this FaxInfo.

        :param error_type: The error_type of this FaxInfo.
        :type: str
        """

        self._error_type = error_type

    @property
    def error_message(self):
        """
        Gets the error_message of this FaxInfo.

        :return: The error_message of this FaxInfo.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this FaxInfo.

        :param error_message: The error_message of this FaxInfo.
        :type: str
        """

        self._error_message = error_message

    @property
    def error_id(self):
        """
        Gets the error_id of this FaxInfo.

        :return: The error_id of this FaxInfo.
        :rtype: int
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """
        Sets the error_id of this FaxInfo.

        :param error_id: The error_id of this FaxInfo.
        :type: int
        """

        self._error_id = error_id

    @property
    def completed_at(self):
        """
        Gets the completed_at of this FaxInfo.

        :return: The completed_at of this FaxInfo.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """
        Sets the completed_at of this FaxInfo.

        :param completed_at: The completed_at of this FaxInfo.
        :type: datetime
        """

        self._completed_at = completed_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
