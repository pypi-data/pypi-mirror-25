# coding: utf-8

"""
    Phaxio API

    API Definition for Phaxio

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Country(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, alpha2=None, country_code=None, price_per_page=None, send_support=None, receive_support=None):
        """
        Country - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'alpha2': 'str',
            'country_code': 'int',
            'price_per_page': 'int',
            'send_support': 'str',
            'receive_support': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'alpha2': 'alpha2',
            'country_code': 'country_code',
            'price_per_page': 'price_per_page',
            'send_support': 'send_support',
            'receive_support': 'receive_support'
        }

        self._name = name
        self._alpha2 = alpha2
        self._country_code = country_code
        self._price_per_page = price_per_page
        self._send_support = send_support
        self._receive_support = receive_support

    @property
    def name(self):
        """
        Gets the name of this Country.

        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Country.

        :param name: The name of this Country.
        :type: str
        """

        self._name = name

    @property
    def alpha2(self):
        """
        Gets the alpha2 of this Country.

        :return: The alpha2 of this Country.
        :rtype: str
        """
        return self._alpha2

    @alpha2.setter
    def alpha2(self, alpha2):
        """
        Sets the alpha2 of this Country.

        :param alpha2: The alpha2 of this Country.
        :type: str
        """

        self._alpha2 = alpha2

    @property
    def country_code(self):
        """
        Gets the country_code of this Country.

        :return: The country_code of this Country.
        :rtype: int
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this Country.

        :param country_code: The country_code of this Country.
        :type: int
        """

        self._country_code = country_code

    @property
    def price_per_page(self):
        """
        Gets the price_per_page of this Country.

        :return: The price_per_page of this Country.
        :rtype: int
        """
        return self._price_per_page

    @price_per_page.setter
    def price_per_page(self, price_per_page):
        """
        Sets the price_per_page of this Country.

        :param price_per_page: The price_per_page of this Country.
        :type: int
        """

        self._price_per_page = price_per_page

    @property
    def send_support(self):
        """
        Gets the send_support of this Country.

        :return: The send_support of this Country.
        :rtype: str
        """
        return self._send_support

    @send_support.setter
    def send_support(self, send_support):
        """
        Sets the send_support of this Country.

        :param send_support: The send_support of this Country.
        :type: str
        """

        self._send_support = send_support

    @property
    def receive_support(self):
        """
        Gets the receive_support of this Country.

        :return: The receive_support of this Country.
        :rtype: str
        """
        return self._receive_support

    @receive_support.setter
    def receive_support(self, receive_support):
        """
        Sets the receive_support of this Country.

        :param receive_support: The receive_support of this Country.
        :type: str
        """

        self._receive_support = receive_support

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
