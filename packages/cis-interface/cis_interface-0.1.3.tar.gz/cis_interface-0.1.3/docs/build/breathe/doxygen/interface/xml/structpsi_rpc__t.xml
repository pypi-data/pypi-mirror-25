<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structpsi_rpc__t" kind="struct" language="C++" prot="public">
    <compoundname>psiRpc_t</compoundname>
    <includes refid="_psi_interface_8h" local="no">PsiInterface.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" prot="public" static="no" mutable="no">
        <type><ref refid="structpsi_input__t" kindref="compound">psiInput_t</ref></type>
        <definition>psiInput_t psiRpc_t::_input</definition>
        <argsstring></argsstring>
        <name>_input</name>
        <briefdescription>
<para>Input queue structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="811" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" prot="public" static="no" mutable="no">
        <type><ref refid="structpsi_output__t" kindref="compound">psiOutput_t</ref></type>
        <definition>psiOutput_t psiRpc_t::_output</definition>
        <argsstring></argsstring>
        <name>_output</name>
        <briefdescription>
<para>Output queue structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="812" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpsi_rpc__t_1a31c6a55cda7c12d643fbe358e429c207" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* psiRpc_t::_inFmt</definition>
        <argsstring></argsstring>
        <name>_inFmt</name>
        <briefdescription>
<para>Format string used for input queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="813" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structpsi_rpc__t_1a5f04717309ffe83b639b459d5052ea19" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* psiRpc_t::_outFmt</definition>
        <argsstring></argsstring>
        <name>_outFmt</name>
        <briefdescription>
<para>Format string used for output queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="814" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="814" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Remote Procedure Call (RPC) structure. Contains information required to coordinate sending/receiving response/requests from/to an RPC server/client. </para>    </briefdescription>
    <detaileddescription>
<para>Remote Procedure Call (RPC) IO</para><para>Handle IO case of a server receiving input from clients, performing some calculation, and then sending a response back to the client.</para><para>Server Usage:<orderedlist>
<listitem><para>One-time: Create server channels with format specifiers for input and output. <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> srv = psiRpcServer(&quot;srv_name&quot;, &quot;%d&quot;, &quot;%d %d&quot;);</para></listitem><listitem><para>Prepare: Allocate space for recovered variables from request. int a;</para></listitem><listitem><para>Receive request: int ret = rpcRecv(srv, &amp;a);</para></listitem><listitem><para>Process: Do tasks the server should do with input to produce output. int b = 2*a; int c = 3*a;</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Send response: ret = rpcSend(srv, b, c);</para></listitem></orderedlist>
</para><para>Client Usage:<orderedlist>
<listitem><para>One-time: Create client channels to desired server with format specifiers for output and input (should be the same arguments as for the server except for name). <ref refid="structpsi_rpc__t" kindref="compound">psiRpc_t</ref> cli = psiRpcClient(&quot;cli_name&quot;, &quot;%d&quot;, &quot;%d %d&quot;);</para></listitem><listitem><para>Prepare: Allocate space for recovered variables from response. int b, c;</para></listitem><listitem><para>Call server: int ret = rpcCall(cli, 1, &amp;b, &amp;c);</para></listitem></orderedlist>
</para><para>Clients can also send several requests at once before receiving any responses. This allows the server to be processing the next requests while the client handles the previous response, thereby increasing efficiency. The responses are assumed to be in the same order as the generating requests (i.e. first come, first served). </para>    </detaileddescription>
    <collaborationgraph>
      <node id="49">
        <label>psiInput_t</label>
        <link refid="structpsi_input__t"/>
      </node>
      <node id="47">
        <label>psiRpc_t</label>
        <link refid="structpsi_rpc__t"/>
        <childnode refid="48" relation="usage">
          <edgelabel>_output</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>_input</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>psiOutput_t</label>
        <link refid="structpsi_output__t"/>
      </node>
    </collaborationgraph>
    <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" line="810" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/interface/PsiInterface.h" bodystart="810" bodyend="815"/>
    <listofallmembers>
      <member refid="structpsi_rpc__t_1a31c6a55cda7c12d643fbe358e429c207" prot="public" virt="non-virtual"><scope>psiRpc_t</scope><name>_inFmt</name></member>
      <member refid="structpsi_rpc__t_1a957a8bcaac05ec113b43b6ba77915ec3" prot="public" virt="non-virtual"><scope>psiRpc_t</scope><name>_input</name></member>
      <member refid="structpsi_rpc__t_1a5f04717309ffe83b639b459d5052ea19" prot="public" virt="non-virtual"><scope>psiRpc_t</scope><name>_outFmt</name></member>
      <member refid="structpsi_rpc__t_1a17f0094559da23188f3782d9cca1157a" prot="public" virt="non-virtual"><scope>psiRpc_t</scope><name>_output</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
