<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_ascii_file_8h" kind="file" language="C++">
    <compoundname>AsciiFile.h</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>string.h</label>
      </node>
      <node id="0">
        <label>/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h</label>
        <link refid="_ascii_file_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_ascii_file" prot="public">AsciiFile</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_ascii_file_8h_1ac68bae2984ae6cc400d0e6ca823dd28b" prot="public" static="no">
        <name>LINE_SIZE_MAX</name>
        <initializer>1024*64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="6" column="9" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_ascii_file_8h_1ad744132f03b4b89bb47911c4ec7a82f1" prot="public" static="no">
        <type>struct <ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref></type>
        <definition>typedef struct AsciiFile  AsciiFile</definition>
        <argsstring></argsstring>
        <name>AsciiFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="14" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_ascii_file_8h_1a3190a61794d85fda62485cea7650320e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_is_open</definition>
        <argsstring>(const AsciiFile t)</argsstring>
        <name>af_is_open</name>
        <param>
          <type>const <ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="17" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="17" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="_ascii_file_8h_1ae34d5f34cfaac1ecb64c0d98b8098a7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_open</definition>
        <argsstring>(AsciiFile *t)</argsstring>
        <name>af_open</name>
        <param>
          <type><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="25" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_ascii_file_8h_1ad2594d6d1e3a868fde31070089a9f5f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void af_close</definition>
        <argsstring>(AsciiFile *t)</argsstring>
        <name>af_close</name>
        <param>
          <type><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="36" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_ascii_file_8h_1aa715a34cb66225c368f6ecc2d9490275" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_is_comment</definition>
        <argsstring>(AsciiFile t, char *line)</argsstring>
        <name>af_is_comment</name>
        <param>
          <type><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="44" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_ascii_file_8h_1aab169ebcefeef51fbdfd869ab95c1b91" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_readline_full</definition>
        <argsstring>(const AsciiFile t, char **line, size_t *n)</argsstring>
        <name>af_readline_full</name>
        <param>
          <type>const <ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="52" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="_ascii_file_8h_1a6735b69ee05db53b9fdabe358bb4fb26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int af_writeline_full</definition>
        <argsstring>(const AsciiFile t, const char *line)</argsstring>
        <name>af_writeline_full</name>
        <param>
          <type>const <ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="60" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="_ascii_file_8h_1a8412b025390313d73923a4b16a6e90d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref></type>
        <definition>static AsciiFile ascii_file</definition>
        <argsstring>(const char *filepath, const char *io_mode, char *comment, char *newline)</argsstring>
        <name>ascii_file</name>
        <param>
          <type>const char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>io_mode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>newline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" line="67" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h" bodystart="67" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINE_SIZE_MAX<sp/>1024*64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="struct_ascii_file" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filepath;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>io_mode[64];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comment[64];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>newline[64];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>FILE<sp/>*fd;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}<sp/><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_is_open(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.fd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_open(<ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(*t)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>(*t).fd<sp/>=<sp/>fopen((*t).filepath,<sp/>(*t).io_mode);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*t).fd<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>af_close(<ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(*t)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose((*t).fd);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>(*t).fd<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_is_comment(<ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line,<sp/>t.comment,<sp/>strlen(t.comment))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_readline_full(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>t,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**line,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*n)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(t)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getline(line,<sp/>n,<sp/>t.fd);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>af_writeline_full(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(af_is_open(t)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fwrite(line,<sp/>1,<sp/>strlen(line),<sp/>t.fd);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>ascii_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filepath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*io_mode,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*comment,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newline)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="struct_ascii_file" kindref="compound">AsciiFile</ref><sp/>t;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>t.fd<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>t.filepath<sp/>=<sp/>filepath;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>strcpy(t.io_mode,<sp/>io_mode);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>defaults<sp/>for<sp/>optional<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.comment,<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.comment,<sp/>comment);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newline<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.newline,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(t.newline,<sp/>newline);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/dataio/AsciiFile.h"/>
  </compounddef>
</doxygen>
