<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ascii__io_8m" kind="file" language="Objective-C">
    <compoundname>ascii_io.m</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ascii__io_8m_1afc18e577af99af0c4440bcf0d486f4e6" prot="public" static="no" mutable="no">
        <type>Input &amp;output to an ASCII file line by line</type>
        <definition>Input&amp; output to an ASCII file line by line in_file</definition>
        <argsstring></argsstring>
        <name>in_file</name>
        <initializer>= PsiInterface(&apos;<ref refid="classPsiAsciiFileInput" kindref="compound">PsiAsciiFileInput</ref>&apos;, &apos;inputM_file&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="2" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a034f2070c23a065cbb78273e7f687f59" prot="public" static="no" mutable="no">
        <type></type>
        <definition>out_file</definition>
        <argsstring></argsstring>
        <name>out_file</name>
        <initializer>= PsiInterface(&apos;<ref refid="classPsiAsciiFileOutput" kindref="compound">PsiAsciiFileOutput</ref>&apos;, &apos;outputM_file&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="3" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a55fb2612d2853a899a9126579a16a561" prot="public" static="no" mutable="no">
        <type>Input &amp;output from a table row by row</type>
        <definition>Input&amp; output from a table row by row in_table</definition>
        <argsstring></argsstring>
        <name>in_table</name>
        <initializer>= PsiInterface(&apos;<ref refid="classPsiAsciiTableInput" kindref="compound">PsiAsciiTableInput</ref>&apos;, &apos;inputM_table&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="5" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a07478ffaf76fa41e3d6eeb75d2ac1a81" prot="public" static="no" mutable="no">
        <type></type>
        <definition>out_table</definition>
        <argsstring></argsstring>
        <name>out_table</name>
        <initializer>= PsiInterface(&apos;<ref refid="classPsiAsciiTableOutput" kindref="compound">PsiAsciiTableOutput</ref>&apos;, &apos;outputM_table&apos;, ...
			 &apos;%5s\t%ld\t%3.1f\n&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="6" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a38d6c5780e631a5ba7d331df87d50036" prot="public" static="no" mutable="no">
        <type>Input &amp;output from a table as an array</type>
        <definition>Input&amp; output from a table as an array in_array</definition>
        <argsstring></argsstring>
        <name>in_array</name>
        <initializer>= PsiInterface(&apos;<ref refid="classPsiAsciiTableInput" kindref="compound">PsiAsciiTableInput</ref>&apos;, &apos;inputM_array&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="9" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1ab57bdf0a2748ff4ba9feccb46316d04e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>out_array</definition>
        <argsstring></argsstring>
        <name>out_array</name>
        <initializer>= PsiInterface(&apos;<ref refid="classPsiAsciiTableOutput" kindref="compound">PsiAsciiTableOutput</ref>&apos;, &apos;outputM_array&apos;, ...
			 &apos;%5s\t%ld\t%3.1f\n&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="10" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a7903e2dda632391a10f1b2c07bc2a219" prot="public" static="no" mutable="no">
        <type>Read lines from ASCII text file until end of file is reached As each line is</type>
        <definition>Read rows from ASCII table until end of file is reached As each row is received</definition>
        <argsstring></argsstring>
        <name>received</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="14" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a6eabc41b7aadf1c284672fc13e2cf973" prot="public" static="no" mutable="no">
        <type>while</type>
        <definition>Get input static from channel res</definition>
        <argsstring></argsstring>
        <name>res</name>
        <initializer>{1}
  % Receive a single line
  res = in_file.recv_line()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="17" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1aaa0d1af72e101521e394af651474de27" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Send output to a local file ret</definition>
        <argsstring></argsstring>
        <name>ret</name>
        <initializer>= out_file.send_line(res{2})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="23" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a91cf6fbebedd86150a36e5ac3d5d3bfc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>break</definition>
        <argsstring></argsstring>
        <name>break</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="26" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1afb358f48b1646c750fb9da6c6585be2b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="27" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1ae3a426f493bfddf5b4a3af4e4f89b888" prot="public" static="no" mutable="no">
        <type>else If the receive was not</type>
        <definition>else If the receive was not succesful</definition>
        <argsstring></argsstring>
        <name>succesful</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="29" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a32357421ad5f907d299f9ba6de5623ae" prot="public" static="no" mutable="no">
        <type>if send the values to output Formatting is taken care of on the output driver side</type>
        <definition>if send the values to output Formatting is taken care of on the output driver side line</definition>
        <argsstring></argsstring>
        <name>line</name>
        <initializer>= res{2}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="45" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1a6315dfe6e05d2814c94e9eb9a5eab999" prot="public" static="no" mutable="no">
        <type></type>
        <definition>arr</definition>
        <argsstring></argsstring>
        <name>arr</name>
        <initializer>= res{2}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="66" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ascii__io_8m_1aa3fd597d4c855c9208b8a17136f2cf13" prot="public" static="no" mutable="no">
        <type>Print each line in the array for</type>
        <definition>end end Receive responses for all requests that were sent for i</definition>
        <argsstring></argsstring>
        <name>i</name>
        <initializer>= 1:arr.size
  line = arr.item(i-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="69" column="1" bodyfile="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ascii__io_8m_1ac85fb1938ce39e282a40bdbb18f5452c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Read lines from ASCII text file until end of file is reached As each line is it is then sent to the output ASCII file</type>
        <definition>Read lines from ASCII text file until end of file is reached As each line is it is then sent to the output ASCII file disp</definition>
        <argsstring>(&apos;ascii_io(M):Receiving/sending ASCII file.&apos;) res</argsstring>
        <name>disp</name>
        <param>
          <type>&apos;ascii_io(M):Receiving/sending ASCII file.&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1ac25b24d30c07c385cbb637995a96eade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>if send the line to output</type>
        <definition>if send the line to output fprintf</definition>
        <argsstring>(&apos;File:%s&apos;, char(res{2}))</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos;File:%s&apos;</type>
        </param>
        <param>
          <type>char(res{2})</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1acb58dcce9da5e79d109c568816407b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(~ret)</argsstring>
        <name>if</name>
        <param>
          <type>~</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1aae2b108e98db9c48aa2ecadfd68ef40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>disp</definition>
        <argsstring>(&apos;ascii_io(M):ERROR SENDING LINE&apos;)</argsstring>
        <name>disp</name>
        <param>
          <type>&apos;ascii_io(M):ERROR SENDING LINE&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1a89d88e47a9189484203ec7100a97216c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>&apos;End of file input(Matlab</type>
        <definition>&apos;End of file input (Matlab disp</definition>
        <argsstring>()</argsstring>
        <name>disp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1a8d5cf7a17928fd5ae3bab22957492e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>out_file</type>
        <definition>out_table send_eof</definition>
        <argsstring>()</argsstring>
        <name>send_eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1abfcf4eb9d6747a09a813a22b14cea56b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fprintf</definition>
        <argsstring>(&apos;Table:%s, %d, %f\n&apos;, char(line{1}), line{2}, line{3})</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos;Table:%</type>
          <declname>s</declname>
        </param>
        <param>
          <type>%</type>
          <declname>d</declname>
        </param>
        <param>
          <type>%f\n&apos;</type>
        </param>
        <param>
          <type>char(line{1})</type>
        </param>
        <param>
          <type>line{2}</type>
        </param>
        <param>
          <type>line{3}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1ae9c84ea22b019335ff9211bd5aace096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>disp</definition>
        <argsstring>(&apos;ascii_io(M):ERROR SENDING ROW&apos;)</argsstring>
        <name>disp</name>
        <param>
          <type>&apos;ascii_io(M):ERROR SENDING ROW&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1a408c14acd74f6a381df9d8671c979d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(~res{1})</argsstring>
        <name>if</name>
        <param>
          <type>~res{1}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1aee216b0af32ef0fd79638ddbeb088701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>disp</definition>
        <argsstring>(&apos;ascii_io(M):ERROR RECVING ARRAY&apos;)</argsstring>
        <name>disp</name>
        <param>
          <type>&apos;ascii_io(M):ERROR RECVING ARRAY&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1af50b3d88fee3112c7ed3cd06920e0677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>exit</definition>
        <argsstring>(-1)</argsstring>
        <name>exit</name>
        <param>
          <type>-</type>
          <declname>1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1af0cfd8de11930482638ef1632ee0aa0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fprintf</definition>
        <argsstring>(&apos;Array:(%d rows)\n&apos;, arr.size)</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos;Array:(%d rows)\n&apos;</type>
        </param>
        <param>
          <type>arr.</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1af622f13e2d11aef7f13e367ce0fa5f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fprintf</definition>
        <argsstring>(&apos;%5s, %d, %f\n&apos;, char(line{1}), line{2}, line{3})</argsstring>
        <name>fprintf</name>
        <param>
          <type>&apos;%</type>
          <declname>5s</declname>
        </param>
        <param>
          <type>%</type>
          <declname>d</declname>
        </param>
        <param>
          <type>%f\n&apos;</type>
        </param>
        <param>
          <type>char(line{1})</type>
        </param>
        <param>
          <type>line{2}</type>
        </param>
        <param>
          <type>line{3}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1a05a1f6cddd167552262423a8c2e70106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>disp</definition>
        <argsstring>(&apos;ascii_io(M):ERROR SENDING ARRAY&apos;)</argsstring>
        <name>disp</name>
        <param>
          <type>&apos;ascii_io(M):ERROR SENDING ARRAY&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ascii__io_8m_1adf5c804dfce7a70e36dda02995fad481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>exit</definition>
        <argsstring>(0)</argsstring>
        <name>exit</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m" line="80" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%<sp/>Input<sp/>&amp;<sp/>output<sp/>to<sp/>an<sp/>ASCII<sp/>file<sp/>line<sp/>by<sp/>line<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="normal">in_file<sp/>=<sp/>PsiInterface(</highlight><highlight class="stringliteral">&apos;PsiAsciiFileInput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;inputM_file&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3"><highlight class="normal">out_file<sp/>=<sp/>PsiInterface(</highlight><highlight class="stringliteral">&apos;PsiAsciiFileOutput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;outputM_file&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4"><highlight class="normal">%<sp/>Input<sp/>&amp;<sp/>output<sp/>from<sp/>a<sp/>table<sp/>row<sp/>by<sp/>row</highlight></codeline>
<codeline lineno="5"><highlight class="normal">in_table<sp/>=<sp/>PsiInterface(</highlight><highlight class="stringliteral">&apos;PsiAsciiTableInput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;inputM_table&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6"><highlight class="normal">out_table<sp/>=<sp/>PsiInterface(</highlight><highlight class="stringliteral">&apos;PsiAsciiTableOutput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;outputM_table&apos;</highlight><highlight class="normal">,<sp/>...</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;%5s\t%ld\t%3.1f\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal">%<sp/>Input<sp/>&amp;<sp/>output<sp/>from<sp/>a<sp/>table<sp/>as<sp/>an<sp/>array</highlight></codeline>
<codeline lineno="9"><highlight class="normal">in_array<sp/>=<sp/>PsiInterface(</highlight><highlight class="stringliteral">&apos;PsiAsciiTableInput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;inputM_array&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal">out_array<sp/>=<sp/>PsiInterface(</highlight><highlight class="stringliteral">&apos;PsiAsciiTableOutput&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;outputM_array&apos;</highlight><highlight class="normal">,<sp/>...</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;%5s\t%ld\t%3.1f\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">%<sp/>Read<sp/>lines<sp/>from<sp/>ASCII<sp/>text<sp/>file<sp/>until<sp/>end<sp/>of<sp/>file<sp/>is<sp/>reached.</highlight></codeline>
<codeline lineno="14"><highlight class="normal">%<sp/>As<sp/>each<sp/>line<sp/>is<sp/>received,<sp/>it<sp/>is<sp/>then<sp/>sent<sp/>to<sp/>the<sp/>output<sp/>ASCII<sp/>file.</highlight></codeline>
<codeline lineno="15"><highlight class="normal">disp(</highlight><highlight class="stringliteral">&apos;ascii_io(M):<sp/>Receiving/sending<sp/>ASCII<sp/>file.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">res<sp/>=<sp/>py.tuple({logical(1),<sp/>logical(1)});</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>res{1}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>%<sp/>Receive<sp/>a<sp/>single<sp/>line</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>in_file.recv_line();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>res{1}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>If<sp/>the<sp/>receive<sp/>was<sp/>succesful,<sp/>send<sp/>the<sp/>line<sp/>to<sp/>output</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;File:<sp/>%s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(res{2}));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>out_file.send_line(res{2});</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~ret);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;ascii_io(M):<sp/>ERROR<sp/>SENDING<sp/>LINE&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>end;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>If<sp/>the<sp/>receive<sp/>was<sp/>not<sp/>succesful,<sp/>send<sp/>the<sp/>end-of-file<sp/>message<sp/>to</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>close<sp/>the<sp/>output<sp/>file.<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>disp(&apos;End<sp/>of<sp/>file<sp/>input<sp/>(Matlab)&apos;);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>out_file.send_eof();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">end;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">%<sp/>Read<sp/>rows<sp/>from<sp/>ASCII<sp/>table<sp/>until<sp/>end<sp/>of<sp/>file<sp/>is<sp/>reached.</highlight></codeline>
<codeline lineno="37"><highlight class="normal">%<sp/>As<sp/>each<sp/>row<sp/>is<sp/>received,<sp/>it<sp/>is<sp/>then<sp/>sent<sp/>to<sp/>the<sp/>output<sp/>ASCII<sp/>table</highlight></codeline>
<codeline lineno="38"><highlight class="normal">res<sp/>=<sp/>py.tuple({logical(1),<sp/>logical(1)});</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>res{1}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>%<sp/>Receive<sp/>a<sp/>single<sp/>row</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>in_table.recv_row();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>res{1}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>If<sp/>the<sp/>receive<sp/>was<sp/>succesful,<sp/>send<sp/>the<sp/>values<sp/>to<sp/>output.</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>Formatting<sp/>is<sp/>taken<sp/>care<sp/>of<sp/>on<sp/>the<sp/>output<sp/>driver<sp/>side.</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>res{2};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;Table:<sp/>%s,<sp/>%d,<sp/>%f\n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(line{1}),<sp/>line{2},<sp/>line{3});</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>out_table.send_row(res{2});</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~ret);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;ascii_io(M):<sp/>ERROR<sp/>SENDING<sp/>ROW&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>end;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>If<sp/>the<sp/>receive<sp/>was<sp/>not<sp/>succesful,<sp/>send<sp/>the<sp/>end-of-file<sp/>message<sp/>to</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>close<sp/>the<sp/>output<sp/>file.</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>disp(&apos;End<sp/>of<sp/>table<sp/>input<sp/>(Matlab)&apos;);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>out_table.send_eof();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">end;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">%<sp/>Read<sp/>entire<sp/>array<sp/>from<sp/>ASCII<sp/>table<sp/>into<sp/>an<sp/>array</highlight></codeline>
<codeline lineno="61"><highlight class="normal">res<sp/>=<sp/>in_array.recv_array();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~res{1});</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;ascii_io(M):<sp/>ERROR<sp/>RECVING<sp/>ARRAY&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">end;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">arr<sp/>=<sp/>res{2};</highlight></codeline>
<codeline lineno="67"><highlight class="normal">fprintf(</highlight><highlight class="stringliteral">&apos;Array:<sp/>(%d<sp/>rows)\n&apos;</highlight><highlight class="normal">,<sp/>arr.size);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">%<sp/>Print<sp/>each<sp/>line<sp/>in<sp/>the<sp/>array</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1:arr.size</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>line<sp/>=<sp/>arr.item(i-1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>fprintf(</highlight><highlight class="stringliteral">&apos;%5s,<sp/>%d,<sp/>%f\n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(line{1}),<sp/>line{2},<sp/>line{3});</highlight></codeline>
<codeline lineno="72"><highlight class="normal">end;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">%<sp/>Send<sp/>the<sp/>array<sp/>to<sp/>output.<sp/>Formatting<sp/>is<sp/>handled<sp/>on<sp/>the<sp/>output<sp/>driver<sp/>side.</highlight></codeline>
<codeline lineno="74"><highlight class="normal">ret<sp/>=<sp/>out_array.send_array(arr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~ret);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>disp(</highlight><highlight class="stringliteral">&apos;ascii_io(M):<sp/>ERROR<sp/>SENDING<sp/>ARRAY&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">end;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">exit(0);</highlight></codeline>
    </programlisting>
    <location file="/home/ubuntu/langmm/cis_iterface/cis_interface/examples/ascii_io/src/ascii_io.m"/>
  </compounddef>
</doxygen>
