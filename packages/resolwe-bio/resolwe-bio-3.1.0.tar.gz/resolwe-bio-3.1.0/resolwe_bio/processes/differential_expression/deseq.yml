# ===============================
# Differential Expression - DESeq
# ===============================
---

- slug: differentialexpression-deseq2
  name: DESeq2
  requirements:
    expression-engine: jinja
  data_name: 'Differential expression (case vs. control)'
  version: 1.0.12
  type: data:differentialexpression:deseq2
  category: analyses
  persistence: CACHED
  description: >
    Find differentially expressed genes.
  input:
    - name: case
      label: Case
      type: list:data:expression
      description: >
        Case samples (replicates)
    - name: control
      label: Control
      type: list:data:expression
      description: >
        Control samples (replicates)
    - name: filter
      label: Raw counts filtering threshold
      type: basic:integer
      default: 10
      description: >
        Filter genes in the expression matrix input. Remove genes where the
        number of counts in all samples is below the threshold.
  output:
    - name: raw
      label: Differential expression
      type: basic:file
    - name: de_json
      label: Results table (JSON)
      type: basic:json
    - name: de_file
      label: Results table (file)
      type: basic:file
    - name: source
      label: Gene ID source
      type: basic:string
  run:
    runtime: polyglot
    language: bash
    program: |
      controls=()
      cases=()
      sample_conditions=()

      {% for c in control %}
        {% if not c.rc.file %}
          re-error "Read counts are required when using DESeq2"
        {% endif %}
        controls+=({{c.rc.file}})
        sample_conditions+=('control')
      {% endfor %}

      {% for t in case %}
        {% if not t.rc.file %}
          re-error "Read counts are required when using DESeq2"
        {% endif %}
        {% if t not in control %}
          cases+=({{t.rc.file}})
          sample_conditions+=('case')
        {% else %}
          re-error "DE analysis failed. Case and Control groups must contain unique samples."
        {% endif %}
      {% endfor %}

      {% for c in control %}
        {% for t in case %}
          {% if control.0.source != c.source or c.source != t.source %}
            re-error "DE analysis must be crated using the expression data from the same source."
          {% endif %}
        {% endfor %}
      {% endfor %}

      sample_files=("${controls[@]}" "${cases[@]}")

      re-progress 0.1

      expressionmerge.py \
        "${sample_files[@]}" \
        --experiments "${sample_files[@]}" \
        --intersection \
        --out 'counts.tab'
      re-checkrc "Error merging read counts."

      diffexp_filtering.R \
        -counts counts.tab \
        -filter {{filter}} \
        -out counts_filtered.tab

      run_deseq2.R \
        counts_filtered.tab \
        --sampleConditions "${sample_conditions[@]}"
      re-checkrc "Error computing differential expression (DESeq2)."

      re-progress 0.95

      parse_diffexp.py \
        diffexp_deseq2.tab \
        de_data.json \
        de_file.tab.gz \
        --gene_id gene_id \
        --fdr padj \
        --pvalue pvalue \
        --logfc log2FoldChange \
        --stat stat

      gzip diffexp_deseq2.tab

      re-save de_json de_data.json
      re-save-file raw diffexp_deseq2.tab.gz
      re-save-file de_file de_file.tab.gz
      re-save source {{ case.0.source }}
