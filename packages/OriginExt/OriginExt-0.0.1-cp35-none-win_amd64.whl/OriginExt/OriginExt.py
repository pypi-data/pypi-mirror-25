# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_OriginExt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_OriginExt')
    _OriginExt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_OriginExt', [dirname(__file__)])
        except ImportError:
            import _OriginExt
            return _OriginExt
        try:
            _mod = imp.load_module('_OriginExt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _OriginExt = swig_import_helper()
    del swig_import_helper
else:
    import _OriginExt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OriginExt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _OriginExt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OriginExt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OriginExt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OriginExt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OriginExt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OriginExt.SwigPyIterator_copy(self)

    def next(self):
        return _OriginExt.SwigPyIterator_next(self)

    def __next__(self):
        return _OriginExt.SwigPyIterator___next__(self)

    def previous(self):
        return _OriginExt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OriginExt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OriginExt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OriginExt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OriginExt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OriginExt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OriginExt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OriginExt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _OriginExt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OriginExt.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OriginExt.IntVector___nonzero__(self)

    def __bool__(self):
        return _OriginExt.IntVector___bool__(self)

    def __len__(self):
        return _OriginExt.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _OriginExt.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OriginExt.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OriginExt.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OriginExt.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OriginExt.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OriginExt.IntVector___setitem__(self, *args)

    def pop(self):
        return _OriginExt.IntVector_pop(self)

    def append(self, x):
        return _OriginExt.IntVector_append(self, x)

    def empty(self):
        return _OriginExt.IntVector_empty(self)

    def size(self):
        return _OriginExt.IntVector_size(self)

    def swap(self, v):
        return _OriginExt.IntVector_swap(self, v)

    def begin(self):
        return _OriginExt.IntVector_begin(self)

    def end(self):
        return _OriginExt.IntVector_end(self)

    def rbegin(self):
        return _OriginExt.IntVector_rbegin(self)

    def rend(self):
        return _OriginExt.IntVector_rend(self)

    def clear(self):
        return _OriginExt.IntVector_clear(self)

    def get_allocator(self):
        return _OriginExt.IntVector_get_allocator(self)

    def pop_back(self):
        return _OriginExt.IntVector_pop_back(self)

    def erase(self, *args):
        return _OriginExt.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _OriginExt.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OriginExt.IntVector_push_back(self, x)

    def front(self):
        return _OriginExt.IntVector_front(self)

    def back(self):
        return _OriginExt.IntVector_back(self)

    def assign(self, n, x):
        return _OriginExt.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _OriginExt.IntVector_resize(self, *args)

    def insert(self, *args):
        return _OriginExt.IntVector_insert(self, *args)

    def reserve(self, n):
        return _OriginExt.IntVector_reserve(self, n)

    def capacity(self):
        return _OriginExt.IntVector_capacity(self)
    __swig_destroy__ = _OriginExt.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _OriginExt.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OriginExt.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OriginExt.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _OriginExt.DoubleVector___bool__(self)

    def __len__(self):
        return _OriginExt.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _OriginExt.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OriginExt.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OriginExt.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OriginExt.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OriginExt.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OriginExt.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _OriginExt.DoubleVector_pop(self)

    def append(self, x):
        return _OriginExt.DoubleVector_append(self, x)

    def empty(self):
        return _OriginExt.DoubleVector_empty(self)

    def size(self):
        return _OriginExt.DoubleVector_size(self)

    def swap(self, v):
        return _OriginExt.DoubleVector_swap(self, v)

    def begin(self):
        return _OriginExt.DoubleVector_begin(self)

    def end(self):
        return _OriginExt.DoubleVector_end(self)

    def rbegin(self):
        return _OriginExt.DoubleVector_rbegin(self)

    def rend(self):
        return _OriginExt.DoubleVector_rend(self)

    def clear(self):
        return _OriginExt.DoubleVector_clear(self)

    def get_allocator(self):
        return _OriginExt.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _OriginExt.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _OriginExt.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _OriginExt.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OriginExt.DoubleVector_push_back(self, x)

    def front(self):
        return _OriginExt.DoubleVector_front(self)

    def back(self):
        return _OriginExt.DoubleVector_back(self)

    def assign(self, n, x):
        return _OriginExt.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _OriginExt.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _OriginExt.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _OriginExt.DoubleVector_reserve(self, n)

    def capacity(self):
        return _OriginExt.DoubleVector_capacity(self)
    __swig_destroy__ = _OriginExt.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _OriginExt.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OriginExt.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OriginExt.StringVector___nonzero__(self)

    def __bool__(self):
        return _OriginExt.StringVector___bool__(self)

    def __len__(self):
        return _OriginExt.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _OriginExt.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OriginExt.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OriginExt.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OriginExt.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OriginExt.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OriginExt.StringVector___setitem__(self, *args)

    def pop(self):
        return _OriginExt.StringVector_pop(self)

    def append(self, x):
        return _OriginExt.StringVector_append(self, x)

    def empty(self):
        return _OriginExt.StringVector_empty(self)

    def size(self):
        return _OriginExt.StringVector_size(self)

    def swap(self, v):
        return _OriginExt.StringVector_swap(self, v)

    def begin(self):
        return _OriginExt.StringVector_begin(self)

    def end(self):
        return _OriginExt.StringVector_end(self)

    def rbegin(self):
        return _OriginExt.StringVector_rbegin(self)

    def rend(self):
        return _OriginExt.StringVector_rend(self)

    def clear(self):
        return _OriginExt.StringVector_clear(self)

    def get_allocator(self):
        return _OriginExt.StringVector_get_allocator(self)

    def pop_back(self):
        return _OriginExt.StringVector_pop_back(self)

    def erase(self, *args):
        return _OriginExt.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _OriginExt.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OriginExt.StringVector_push_back(self, x)

    def front(self):
        return _OriginExt.StringVector_front(self)

    def back(self):
        return _OriginExt.StringVector_back(self)

    def assign(self, n, x):
        return _OriginExt.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _OriginExt.StringVector_resize(self, *args)

    def insert(self, *args):
        return _OriginExt.StringVector_insert(self, *args)

    def reserve(self, n):
        return _OriginExt.StringVector_reserve(self, n)

    def capacity(self):
        return _OriginExt.StringVector_capacity(self)
    __swig_destroy__ = _OriginExt.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _OriginExt.StringVector_swigregister
StringVector_swigregister(StringVector)

class OriginBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OriginBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginBase
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.OriginBase_IsValid(self)

    def GetApplication(self):
        return _OriginExt.OriginBase_GetApplication(self)

    def GetParent(self):
        return _OriginExt.OriginBase_GetParent(self)
    Application = property(GetApplication)
    Parent = property(GetParent)
OriginBase_swigregister = _OriginExt.OriginBase_swigregister
OriginBase_swigregister(OriginBase)

class OriginObject(OriginBase):
    __swig_setmethods__ = {}
    for _s in [OriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginObject
    __del__ = lambda self: None

    def __str__(self):
        return _OriginExt.OriginObject___str__(self)

    def __len__(self):
        return _OriginExt.OriginObject___len__(self)

    def GetName(self):
        return _OriginExt.OriginObject_GetName(self)

    def PutName(self, str):
        return _OriginExt.OriginObject_PutName(self, str)
    SetName = PutName

    def GetLongName(self):
        return _OriginExt.OriginObject_GetLongName(self)

    def PutLongName(self, str):
        return _OriginExt.OriginObject_PutLongName(self, str)
    SetLongName = PutLongName

    def Destroy(self):
        return _OriginExt.OriginObject_Destroy(self)

    def GetShow(self):
        return _OriginExt.OriginObject_GetShow(self)

    def PutShow(self, bShow):
        return _OriginExt.OriginObject_PutShow(self, bShow)
    SetShow = PutShow

    def GetIndex(self):
        return _OriginExt.OriginObject_GetIndex(self)

    def PutIndex(self, nIndex):
        return _OriginExt.OriginObject_PutIndex(self, nIndex)
    SetIndex = PutIndex

    def GetBinaryStorageNames(self):
        return _OriginExt.OriginObject_GetBinaryStorageNames(self)

    def GetBinaryStorageData(self, Name, format=0):
        return _OriginExt.OriginObject_GetBinaryStorageData(self, Name, format)

    def SetBinaryStorageData(self, Name, values):
        return _OriginExt.OriginObject_SetBinaryStorageData(self, Name, values)

    def GetTheme(self):
        return _OriginExt.OriginObject_GetTheme(self)

    def PutTheme(self, pTheme):
        return _OriginExt.OriginObject_PutTheme(self, pTheme)
    SetTheme = PutTheme

    def GetMetaData(self, Name, bVisibleToUser):
        return _OriginExt.OriginObject_GetMetaData(self, Name, bVisibleToUser)

    def SetMetaData(self, xml, Name, bVisibleToUser):
        return _OriginExt.OriginObject_SetMetaData(self, xml, Name, bVisibleToUser)

    def Execute(self, LabTalkStr):
        return _OriginExt.OriginObject_Execute(self, LabTalkStr)
    LT_execute = Execute

    def Activate(self):
        return _OriginExt.OriginObject_Activate(self)

    def GetRange(self):
        return _OriginExt.OriginObject_GetRange(self)

    def GetTypeName(self):
        return _OriginExt.OriginObject_GetTypeName(self)

    def GetPEPath(self):
        return _OriginExt.OriginObject_GetPEPath(self)
    Range = property(GetRange)
    TypeName = property(GetTypeName)
    PEPath = property(GetPEPath)
    Name = property(GetName, PutName)
    LongName = property(GetLongName, PutLongName)
    Show = property(GetShow, PutShow)
    Index = property(GetIndex, PutIndex)
    BinaryStorageNames = property(GetBinaryStorageNames)
    Theme = property(GetTheme, PutTheme)
OriginObject_swigregister = _OriginExt.OriginObject_swigregister
OriginObject_swigregister(OriginObject)

class PageBase(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_PageBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_PageBase
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.PageBase_IsValid(self)

    def GetType(self):
        return _OriginExt.PageBase_GetType(self)

    def GetFolder(self):
        return _OriginExt.PageBase_GetFolder(self)
    Type = property(GetType, 0)
    Folder = property(GetFolder, 0)
PageBase_swigregister = _OriginExt.PageBase_swigregister
PageBase_swigregister(PageBase)

class Page(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Page, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Page, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Page
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.Page_IsValid(self)

    def __len__(self):
        return _OriginExt.Page___len__(self)

    def AddLayer(self, *args):
        return _OriginExt.Page_AddLayer(self, *args)

    def Layers(self, *args):
        return _OriginExt.Page_Layers(self, *args)

    def __iter__(self):
        return _OriginExt.Page___iter__(self)

    def __getitem__(self, *args):
        return _OriginExt.Page___getitem__(self, *args)
Page_swigregister = _OriginExt.Page_swigregister
Page_swigregister(Page)

class PageBaseI(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageBaseI, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageBaseI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_PageBaseI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_PageBaseI
    __del__ = lambda self: None
PageBaseI_swigregister = _OriginExt.PageBaseI_swigregister
PageBaseI_swigregister(PageBaseI)

class PageI(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageI, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_PageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_PageI
    __del__ = lambda self: None
PageI_swigregister = _OriginExt.PageI_swigregister
PageI_swigregister(PageI)

class GraphPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_GraphPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_GraphPage
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.GraphPage_IsValid(self)

    def GetPageViewMode(self):
        return _OriginExt.GraphPage_GetPageViewMode(self)

    def SetPageViewMode(self, nValue):
        return _OriginExt.GraphPage_SetPageViewMode(self, nValue)

    def GetHeight(self):
        return _OriginExt.GraphPage_GetHeight(self)

    def SetHeight(self, dHeight):
        return _OriginExt.GraphPage_SetHeight(self, dHeight)

    def GetWidth(self):
        return _OriginExt.GraphPage_GetWidth(self)

    def SetWidth(self, dWidth):
        return _OriginExt.GraphPage_SetWidth(self, dWidth)

    def Layers(self, *args):
        return _OriginExt.GraphPage_Layers(self, *args)

    def __getitem__(self, *args):
        return _OriginExt.GraphPage___getitem__(self, *args)

    def __iter__(self):
        return _OriginExt.GraphPage___iter__(self)
    PageViewMode = property(GetPageViewMode, SetPageViewMode)
    Height = property(GetHeight, SetHeight)
    Width = property(GetWidth, SetWidth)
GraphPage_swigregister = _OriginExt.GraphPage_swigregister
GraphPage_swigregister(GraphPage)

class GraphPageI(GraphPage):
    __swig_setmethods__ = {}
    for _s in [GraphPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_GraphPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_GraphPageI
    __del__ = lambda self: None
GraphPageI_swigregister = _OriginExt.GraphPageI_swigregister
GraphPageI_swigregister(GraphPageI)

class LayoutPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_LayoutPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_LayoutPage
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.LayoutPage_IsValid(self)
LayoutPage_swigregister = _OriginExt.LayoutPage_swigregister
LayoutPage_swigregister(LayoutPage)

class LayoutPageI(LayoutPage):
    __swig_setmethods__ = {}
    for _s in [LayoutPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [LayoutPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_LayoutPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_LayoutPageI
    __del__ = lambda self: None
LayoutPageI_swigregister = _OriginExt.LayoutPageI_swigregister
LayoutPageI_swigregister(LayoutPageI)

class WorksheetPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorksheetPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorksheetPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_WorksheetPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_WorksheetPage
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.WorksheetPage_IsValid(self)

    def Layers(self, *args):
        return _OriginExt.WorksheetPage_Layers(self, *args)

    def __iter__(self):
        return _OriginExt.WorksheetPage___iter__(self)

    def __getitem__(self, *args):
        return _OriginExt.WorksheetPage___getitem__(self, *args)
WorksheetPage_swigregister = _OriginExt.WorksheetPage_swigregister
WorksheetPage_swigregister(WorksheetPage)

class WorksheetPageI(WorksheetPage):
    __swig_setmethods__ = {}
    for _s in [WorksheetPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorksheetPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [WorksheetPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorksheetPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_WorksheetPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_WorksheetPageI
    __del__ = lambda self: None
WorksheetPageI_swigregister = _OriginExt.WorksheetPageI_swigregister
WorksheetPageI_swigregister(WorksheetPageI)

class MatrixPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_MatrixPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_MatrixPage
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.MatrixPage_IsValid(self)

    def Layers(self, *args):
        return _OriginExt.MatrixPage_Layers(self, *args)

    def __iter__(self):
        return _OriginExt.MatrixPage___iter__(self)

    def __getitem__(self, *args):
        return _OriginExt.MatrixPage___getitem__(self, *args)
MatrixPage_swigregister = _OriginExt.MatrixPage_swigregister
MatrixPage_swigregister(MatrixPage)

class MatrixPageI(MatrixPage):
    __swig_setmethods__ = {}
    for _s in [MatrixPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_MatrixPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_MatrixPageI
    __del__ = lambda self: None
MatrixPageI_swigregister = _OriginExt.MatrixPageI_swigregister
MatrixPageI_swigregister(MatrixPageI)

class NotePage(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotePage, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotePage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_NotePage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_NotePage
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.NotePage_IsValid(self)

    def GetText(self):
        return _OriginExt.NotePage_GetText(self)

    def SetText(self, strText):
        return _OriginExt.NotePage_SetText(self, strText)
    Text = property(GetText, SetText)
NotePage_swigregister = _OriginExt.NotePage_swigregister
NotePage_swigregister(NotePage)

class NotePageI(NotePage):
    __swig_setmethods__ = {}
    for _s in [NotePage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotePageI, name, value)
    __swig_getmethods__ = {}
    for _s in [NotePage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotePageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_NotePageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_NotePageI
    __del__ = lambda self: None
NotePageI_swigregister = _OriginExt.NotePageI_swigregister
NotePageI_swigregister(NotePageI)

class ExternalDialogPage(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalDialogPage, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalDialogPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ExternalDialogPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ExternalDialogPage
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.ExternalDialogPage_IsValid(self)
ExternalDialogPage_swigregister = _OriginExt.ExternalDialogPage_swigregister
ExternalDialogPage_swigregister(ExternalDialogPage)

class ExternalDialogPageI(ExternalDialogPage):
    __swig_setmethods__ = {}
    for _s in [ExternalDialogPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalDialogPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalDialogPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalDialogPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ExternalDialogPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ExternalDialogPageI
    __del__ = lambda self: None
ExternalDialogPageI_swigregister = _OriginExt.ExternalDialogPageI_swigregister
ExternalDialogPageI_swigregister(ExternalDialogPageI)

class Layer(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Layer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Layer
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.Layer_IsValid(self)

    def __len__(self):
        return _OriginExt.Layer___len__(self)

    def GetPage(self):
        return _OriginExt.Layer_GetPage(self)

    def GraphObjects(self, *args):
        return _OriginExt.Layer_GraphObjects(self, *args)

    def __iter__(self):
        return _OriginExt.Layer___iter__(self)
Layer_swigregister = _OriginExt.Layer_swigregister
Layer_swigregister(Layer)

class LayerI(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerI, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_LayerI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_LayerI
    __del__ = lambda self: None
LayerI_swigregister = _OriginExt.LayerI_swigregister
LayerI_swigregister(LayerI)

class GraphLayer(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_GraphLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_GraphLayer
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.GraphLayer_IsValid(self)

    def AddPlot(self, pPyRange, nPlotType):
        return _OriginExt.GraphLayer_AddPlot(self, pPyRange, nPlotType)

    def DataPlots(self, *args):
        return _OriginExt.GraphLayer_DataPlots(self, *args)

    def __getitem__(self, *args):
        return _OriginExt.GraphLayer___getitem__(self, *args)

    def __iter__(self):
        return _OriginExt.GraphLayer___iter__(self)
GraphLayer_swigregister = _OriginExt.GraphLayer_swigregister
GraphLayer_swigregister(GraphLayer)

class GraphLayerI(GraphLayer):
    __swig_setmethods__ = {}
    for _s in [GraphLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphLayerI, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphLayerI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_GraphLayerI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_GraphLayerI
    __del__ = lambda self: None
GraphLayerI_swigregister = _OriginExt.GraphLayerI_swigregister
GraphLayerI_swigregister(GraphLayerI)

class Datasheet(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datasheet, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datasheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Datasheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Datasheet
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.Datasheet_IsValid(self)

    def FindCol(self, lpcszLabel, nBegin=0, bCasesensitive=False, bFullMatch=True, nEnd=-1, bAllowShortName=True):
        return _OriginExt.Datasheet_FindCol(self, lpcszLabel, nBegin, bCasesensitive, bFullMatch, nEnd, bAllowShortName)

    def Cell(self, nRow, nCol):
        return _OriginExt.Datasheet_Cell(self, nRow, nCol)

    def TCell(self, nRow, nCol):
        return _OriginExt.Datasheet_TCell(self, nRow, nCol)

    def SetCell(self, *args):
        return _OriginExt.Datasheet_SetCell(self, *args)

    def Transpose(self, bSelOnly=False):
        return _OriginExt.Datasheet_Transpose(self, bSelOnly)

    def GetColCount(self):
        return _OriginExt.Datasheet_GetColCount(self)

    def SetColCount(self, nCols):
        return _OriginExt.Datasheet_SetColCount(self, nCols)
    Cols = property(GetColCount, SetColCount)

    def GetRowCount(self):
        return _OriginExt.Datasheet_GetRowCount(self)

    def SetRowCount(self, nRows):
        return _OriginExt.Datasheet_SetRowCount(self, nRows)
    Rows = property(GetRowCount, SetRowCount)

    def ClearData(self, nC1, nC2):
        return _OriginExt.Datasheet_ClearData(self, nC1, nC2)
Datasheet_swigregister = _OriginExt.Datasheet_swigregister
Datasheet_swigregister(Datasheet)

class Worksheet(Datasheet):
    __swig_setmethods__ = {}
    for _s in [Datasheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Worksheet, name, value)
    __swig_getmethods__ = {}
    for _s in [Datasheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Worksheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Worksheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Worksheet
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.Worksheet_IsValid(self)

    def GetCell(self, nRow, nCol):
        return _OriginExt.Worksheet_GetCell(self, nRow, nCol)

    def Columns(self, *args):
        return _OriginExt.Worksheet_Columns(self, *args)

    def __iter__(self):
        return _OriginExt.Worksheet___iter__(self)

    def __getitem__(self, *args):
        return _OriginExt.Worksheet___getitem__(self, *args)

    def DeleteCol(self, nColIndex):
        return _OriginExt.Worksheet_DeleteCol(self, nColIndex)

    def DeleteRow(self, nRowIndex):
        return _OriginExt.Worksheet_DeleteRow(self, nRowIndex)

    def InsertCol(self, nPos, strColName):
        return _OriginExt.Worksheet_InsertCol(self, nPos, strColName)

    def InsertRow(self, nPos):
        return _OriginExt.Worksheet_InsertRow(self, nPos)

    def SetLowerBound(self, iR1, nC1=0, nC2=-1):
        return _OriginExt.Worksheet_SetLowerBound(self, iR1, nC1, nC2)

    def SetUpperBound(self, iR2, nC1=0, nC2=-1):
        return _OriginExt.Worksheet_SetUpperBound(self, iR2, nC1, nC2)

    def ShowCol(self, nCol, nCols=1, bShow=True):
        return _OriginExt.Worksheet_ShowCol(self, nCol, nCols, bShow)

    def SetColDesignations(self, strColDesig, bRepeat=True, nC1=0, nC2=-1):
        return _OriginExt.Worksheet_SetColDesignations(self, strColDesig, bRepeat, nC1, nC2)

    def GetColFormats(self):
        return _OriginExt.Worksheet_GetColFormats(self)

    def SetColFormats(self, strFormats, bRepeat=True):
        return _OriginExt.Worksheet_SetColFormats(self, strFormats, bRepeat)

    def GetBounds(self, nC1, nC2, bIncludeMissingValues=True):
        return _OriginExt.Worksheet_GetBounds(self, nC1, nC2, bIncludeMissingValues)

    def GetSelectedColumns(self):
        return _OriginExt.Worksheet_GetSelectedColumns(self)

    def ExportASCII(self, *args):
        return _OriginExt.Worksheet_ExportASCII(self, *args)

    def SetScript(self, *args):
        return _OriginExt.Worksheet_SetScript(self, *args)

    def SetData(self, *args):
        return _OriginExt.Worksheet_SetData(self, *args)

    def GetLabelVisible(self, nLabelType):
        return _OriginExt.Worksheet_GetLabelVisible(self, nLabelType)

    def SetLabelVisible(self, nLabelType, bShow=True):
        return _OriginExt.Worksheet_SetLabelVisible(self, nLabelType, bShow)

    def GetUserDefLabel(self, nIndex):
        return _OriginExt.Worksheet_GetUserDefLabel(self, nIndex)

    def SetUserDefLabel(self, nIndex, strLabel):
        return _OriginExt.Worksheet_SetUserDefLabel(self, nIndex, strLabel)

    def ShowLabels(self, strLabels):
        return _OriginExt.Worksheet_ShowLabels(self, strLabels)

    def Copy(self, nR1=0, nC1=0, nR2=-1, nC2=-1, bFullPrecision=True):
        return _OriginExt.Worksheet_Copy(self, nR1, nC1, nR2, nC2, bFullPrecision)

    def MergeCells(self, nR1, nC1, nR2, nC2, bLabels=False):
        return _OriginExt.Worksheet_MergeCells(self, nR1, nC1, nR2, nC2, bLabels)
Worksheet_swigregister = _OriginExt.Worksheet_swigregister
Worksheet_swigregister(Worksheet)

class WorksheetI(Worksheet):
    __swig_setmethods__ = {}
    for _s in [Worksheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorksheetI, name, value)
    __swig_getmethods__ = {}
    for _s in [Worksheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorksheetI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_WorksheetI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_WorksheetI
    __del__ = lambda self: None
WorksheetI_swigregister = _OriginExt.WorksheetI_swigregister
WorksheetI_swigregister(WorksheetI)

class Matrixsheet(Datasheet):
    __swig_setmethods__ = {}
    for _s in [Datasheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrixsheet, name, value)
    __swig_getmethods__ = {}
    for _s in [Datasheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrixsheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Matrixsheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Matrixsheet
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.Matrixsheet_IsValid(self)

    def MatrixObjects(self, *args):
        return _OriginExt.Matrixsheet_MatrixObjects(self, *args)

    def __iter__(self):
        return _OriginExt.Matrixsheet___iter__(self)

    def __getitem__(self, *args):
        return _OriginExt.Matrixsheet___getitem__(self, *args)
Matrixsheet_swigregister = _OriginExt.Matrixsheet_swigregister
Matrixsheet_swigregister(Matrixsheet)

class MatrixsheetI(Matrixsheet):
    __swig_setmethods__ = {}
    for _s in [Matrixsheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixsheetI, name, value)
    __swig_getmethods__ = {}
    for _s in [Matrixsheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixsheetI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_MatrixsheetI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_MatrixsheetI
    __del__ = lambda self: None
MatrixsheetI_swigregister = _OriginExt.MatrixsheetI_swigregister
MatrixsheetI_swigregister(MatrixsheetI)

class DataRange(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRange, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataRange, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_DataRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_DataRange
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.DataRange_IsValid(self)

    def Add(self, strType, pPyWks, nR1, nC1, nR2, nC2):
        return _OriginExt.DataRange_Add(self, strType, pPyWks, nR1, nC1, nR2, nC2)

    def AddSimple(self, pPyWks, nR1, nC1, nR2, nC2):
        return _OriginExt.DataRange_AddSimple(self, pPyWks, nR1, nC1, nR2, nC2)

    def AddMatrix(self, pPyMatrix, nIndex=0):
        return _OriginExt.DataRange_AddMatrix(self, pPyMatrix, nIndex)
DataRange_swigregister = _OriginExt.DataRange_swigregister
DataRange_swigregister(DataRange)

class DataObjectBase(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObjectBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataObjectBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_DataObjectBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_DataObjectBase
    __del__ = lambda self: None
DataObjectBase_swigregister = _OriginExt.DataObjectBase_swigregister
DataObjectBase_swigregister(DataObjectBase)

class DataObject(DataObjectBase):
    __swig_setmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_DataObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_DataObject
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.DataObject_IsValid(self)

    def SetFormula(self, *args):
        return _OriginExt.DataObject_SetFormula(self, *args)

    def GetFormula(self):
        return _OriginExt.DataObject_GetFormula(self)
    Formula = property(GetFormula, SetFormula)

    def ExecuteFormula(self, nBegin=0, nEnd=-1, nC1=-1, nC2=-1):
        return _OriginExt.DataObject_ExecuteFormula(self, nBegin, nEnd, nC1, nC2)

    def GetDigits(self):
        return _OriginExt.DataObject_GetDigits(self)

    def SetDigits(self, value):
        return _OriginExt.DataObject_SetDigits(self, value)
    Digits = property(GetDigits, SetDigits)

    def GetDigitMode(self):
        return _OriginExt.DataObject_GetDigitMode(self)

    def SetDigitMode(self, value):
        return _OriginExt.DataObject_SetDigitMode(self, value)
    DigitMode = property(GetDigitMode, SetDigitMode)

    def GetDataFormat(self):
        return _OriginExt.DataObject_GetDataFormat(self)

    def SetDataFormat(self, value):
        return _OriginExt.DataObject_SetDataFormat(self, value)
    DataFormat = property(GetDataFormat, SetDataFormat)

    def GetDisplayFormat(self):
        return _OriginExt.DataObject_GetDisplayFormat(self)

    def SetDisplayFormat(self, value):
        return _OriginExt.DataObject_SetDisplayFormat(self, value)
    DisplayFormat = property(GetDisplayFormat, SetDisplayFormat)
DataObject_swigregister = _OriginExt.DataObject_swigregister
DataObject_swigregister(DataObject)

class Column(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Column, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Column, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Column()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Column
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.Column_IsValid(self)

    def GetData(self, nStart=0, nEnd=-1):
        return _OriginExt.Column_GetData(self, nStart, nEnd)

    def SetData(self, *args):
        return _OriginExt.Column_SetData(self, *args)

    def SetLowerBound(self, nR1):
        return _OriginExt.Column_SetLowerBound(self, nR1)

    def GetLowerBound(self):
        return _OriginExt.Column_GetLowerBound(self)

    def SetUpperBound(self, nR2):
        return _OriginExt.Column_SetUpperBound(self, nR2)

    def GetUpperBound(self):
        return _OriginExt.Column_GetUpperBound(self)
    LowerBound = property(GetLowerBound, SetLowerBound)
    UpperBound = property(GetUpperBound, SetUpperBound)

    def PutStringArray(self, *args):
        return _OriginExt.Column_PutStringArray(self, *args)
    SetStringArray = PutStringArray

    def GetStringArray(self, *args):
        return _OriginExt.Column_GetStringArray(self, *args)

    def GetX0(self):
        return _OriginExt.Column_GetX0(self)

    def SetX0(self, dX0):
        return _OriginExt.Column_SetX0(self, dX0)
    X0 = property(GetX0, SetX0)

    def GetX1(self):
        return _OriginExt.Column_GetX1(self)

    def SetX1(self, dX1):
        return _OriginExt.Column_SetX1(self, dX1)
    X1 = property(GetX1, SetX1)

    def GetFormat(self):
        return _OriginExt.Column_GetFormat(self)

    def SetFormat(self, nFormat):
        return _OriginExt.Column_SetFormat(self, nFormat)
    Format = property(GetFormat, SetFormat)

    def GetSubFormat(self, *args):
        return _OriginExt.Column_GetSubFormat(self, *args)
    SubFormat = property(GetSubFormat, GetSubFormat)

    def GetUnits(self):
        return _OriginExt.Column_GetUnits(self)

    def GetComments(self):
        return _OriginExt.Column_GetComments(self)

    def GetParameter(self, nIndex):
        return _OriginExt.Column_GetParameter(self, nIndex)

    def SetUnits(self, strNewValue):
        return _OriginExt.Column_SetUnits(self, strNewValue)

    def SetComments(self, strNewValue):
        return _OriginExt.Column_SetComments(self, strNewValue)

    def SetParameter(self, nIndex, strNewValue):
        return _OriginExt.Column_SetParameter(self, nIndex, strNewValue)

    def GetParent(self):
        return _OriginExt.Column_GetParent(self)

    def GetType(self):
        return _OriginExt.Column_GetType(self)

    def SetType(self, nType):
        return _OriginExt.Column_SetType(self, nType)
    Type = property(GetType, SetType)

    def GetUserDefLabel(self, nIndex):
        return _OriginExt.Column_GetUserDefLabel(self, nIndex)

    def SetUserDefLabel(self, nIndex, strLabel):
        return _OriginExt.Column_SetUserDefLabel(self, nIndex, strLabel)
    Units = property(GetUnits, SetUnits)
    Comments = property(GetComments, SetComments)
Column_swigregister = _OriginExt.Column_swigregister
Column_swigregister(Column)

class ColumnI(Column):
    __swig_setmethods__ = {}
    for _s in [Column]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnI, name, value)
    __swig_getmethods__ = {}
    for _s in [Column]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ColumnI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ColumnI
    __del__ = lambda self: None
ColumnI_swigregister = _OriginExt.ColumnI_swigregister
ColumnI_swigregister(ColumnI)

class MatrixObject(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixObject, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_MatrixObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_MatrixObject
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.MatrixObject_IsValid(self)

    def GetData(self, nMR1=0, nMC1=0, nMR2=-1, nMC2=-1):
        return _OriginExt.MatrixObject_GetData(self, nMR1, nMC1, nMR2, nMC2)

    def SetData(self, *args):
        return _OriginExt.MatrixObject_SetData(self, *args)

    def GetXY(self):
        return _OriginExt.MatrixObject_GetXY(self)

    def SetXY(self, varValues):
        return _OriginExt.MatrixObject_SetXY(self, varValues)

    def HasBitmap(self, bExcludeLeadBitmap):
        return _OriginExt.MatrixObject_HasBitmap(self, bExcludeLeadBitmap)
MatrixObject_swigregister = _OriginExt.MatrixObject_swigregister
MatrixObject_swigregister(MatrixObject)

class MatrixObjectI(MatrixObject):
    __swig_setmethods__ = {}
    for _s in [MatrixObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixObjectI, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixObjectI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_MatrixObjectI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_MatrixObjectI
    __del__ = lambda self: None
MatrixObjectI_swigregister = _OriginExt.MatrixObjectI_swigregister
MatrixObjectI_swigregister(MatrixObjectI)

class DataPlot(DataObjectBase):
    __swig_setmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPlot, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPlot, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_DataPlot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_DataPlot
    __del__ = lambda self: None
DataPlot_swigregister = _OriginExt.DataPlot_swigregister
DataPlot_swigregister(DataPlot)

class DataPlotI(DataPlot):
    __swig_setmethods__ = {}
    for _s in [DataPlot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPlotI, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPlot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPlotI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_DataPlotI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_DataPlotI
    __del__ = lambda self: None
DataPlotI_swigregister = _OriginExt.DataPlotI_swigregister
DataPlotI_swigregister(DataPlotI)

class GraphObject(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_GraphObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_GraphObject
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.GraphObject_IsValid(self)

    def GetObjectType(self):
        return _OriginExt.GraphObject_GetObjectType(self)

    def GetText(self):
        return _OriginExt.GraphObject_GetText(self)

    def SetText(self, strText):
        return _OriginExt.GraphObject_SetText(self, strText)

    def GetLeft(self):
        return _OriginExt.GraphObject_GetLeft(self)

    def SetLeft(self, nLeft):
        return _OriginExt.GraphObject_SetLeft(self, nLeft)

    def GetTop(self):
        return _OriginExt.GraphObject_GetTop(self)

    def SetTop(self, nTop):
        return _OriginExt.GraphObject_SetTop(self, nTop)

    def GetWidth(self):
        return _OriginExt.GraphObject_GetWidth(self)

    def SetWidth(self, nWidth):
        return _OriginExt.GraphObject_SetWidth(self, nWidth)

    def GetHeight(self):
        return _OriginExt.GraphObject_GetHeight(self)

    def SetHeight(self, nHeight):
        return _OriginExt.GraphObject_SetHeight(self, nHeight)

    def GetX(self):
        return _OriginExt.GraphObject_GetX(self)

    def SetX(self, dX):
        return _OriginExt.GraphObject_SetX(self, dX)

    def GetY(self):
        return _OriginExt.GraphObject_GetY(self)

    def SetY(self, dY):
        return _OriginExt.GraphObject_SetY(self, dY)

    def GetDX(self):
        return _OriginExt.GraphObject_GetDX(self)

    def SetDX(self, dDX):
        return _OriginExt.GraphObject_SetDX(self, dDX)

    def GetDY(self):
        return _OriginExt.GraphObject_GetDY(self)

    def SetDY(self, dDY):
        return _OriginExt.GraphObject_SetDY(self, dDY)
    Text = property(GetText, SetText)
    Left = property(GetLeft, SetText)
    Top = property(GetTop, SetTop)
    Width = property(GetWidth, SetWidth)
    Height = property(GetHeight, SetHeight)
    X = property(GetX, SetX)
    Y = property(GetY, SetY)
    DX = property(GetDX, SetDX)
    DY = property(GetDY, SetDY)
GraphObject_swigregister = _OriginExt.GraphObject_swigregister
GraphObject_swigregister(GraphObject)

class GraphObjectI(GraphObject):
    __swig_setmethods__ = {}
    for _s in [GraphObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphObjectI, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphObjectI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_GraphObjectI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_GraphObjectI
    __del__ = lambda self: None
GraphObjectI_swigregister = _OriginExt.GraphObjectI_swigregister
GraphObjectI_swigregister(GraphObjectI)

class ProjectInfo(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ProjectInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ProjectInfo
    __del__ = lambda self: None

    def GetVersion(self):
        return _OriginExt.ProjectInfo_GetVersion(self)

    def GetOrgVersion(self):
        return _OriginExt.ProjectInfo_GetOrgVersion(self)
ProjectInfo_swigregister = _OriginExt.ProjectInfo_swigregister
ProjectInfo_swigregister(ProjectInfo)

class Folder(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Folder, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Folder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Folder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Folder
    __del__ = lambda self: None

    def Path(self):
        return _OriginExt.Folder_Path(self)

    def GetIndex(self):
        return _OriginExt.Folder_GetIndex(self)

    def GetResultText(self, bRecrsive):
        return _OriginExt.Folder_GetResultText(self, bRecrsive)

    def GetParent(self):
        return _OriginExt.Folder_GetParent(self)

    def PageBases(self):
        return _OriginExt.Folder_PageBases(self)

    def __iter__(self):
        return _OriginExt.Folder___iter__(self)
Folder_swigregister = _OriginExt.Folder_swigregister
Folder_swigregister(Folder)

class TreeNode(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNode, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_TreeNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_TreeNode
    __del__ = lambda self: None

    def __str__(self):
        return _OriginExt.TreeNode___str__(self)

    def IsValid(self):
        return _OriginExt.TreeNode_IsValid(self)

    def GetStrValue(self, *args):
        return _OriginExt.TreeNode_GetStrValue(self, *args)

    def SetStrValue(self, *args):
        return _OriginExt.TreeNode_SetStrValue(self, *args)

    def GetIntValue(self, *args):
        return _OriginExt.TreeNode_GetIntValue(self, *args)

    def SetIntValue(self, *args):
        return _OriginExt.TreeNode_SetIntValue(self, *args)

    def GetDoubleValue(self, *args):
        return _OriginExt.TreeNode_GetDoubleValue(self, *args)

    def SetDoubleValue(self, *args):
        return _OriginExt.TreeNode_SetDoubleValue(self, *args)

    def GetValue(self, *args):
        return _OriginExt.TreeNode_GetValue(self, *args)

    def PutValue(self, lpcszIndex, value):
        return _OriginExt.TreeNode_PutValue(self, lpcszIndex, value)

    def GetChildren(self):
        return _OriginExt.TreeNode_GetChildren(self)

    def __iter__(self):
        return _OriginExt.TreeNode___iter__(self)

    def GetfirstChild(self):
        return _OriginExt.TreeNode_GetfirstChild(self)

    def GetnextSibling(self):
        return _OriginExt.TreeNode_GetnextSibling(self)
    Children = property(GetChildren)
    firstChild = property(GetfirstChild)
    nextSibling = property(GetnextSibling)
TreeNode_swigregister = _OriginExt.TreeNode_swigregister
TreeNode_swigregister(TreeNode)

class TreeNodeI(TreeNode):
    __swig_setmethods__ = {}
    for _s in [TreeNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeI, name, value)
    __swig_getmethods__ = {}
    for _s in [TreeNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_TreeNodeI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_TreeNodeI
    __del__ = lambda self: None
TreeNodeI_swigregister = _OriginExt.TreeNodeI_swigregister
TreeNodeI_swigregister(TreeNodeI)

class ColorMap(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ColorMap
    __del__ = lambda self: None
ColorMap_swigregister = _OriginExt.ColorMap_swigregister
ColorMap_swigregister(ColorMap)

class OriginCollectionBase(OriginBase):
    __swig_setmethods__ = {}
    for _s in [OriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionBase
    __del__ = lambda self: None

    def __iter__(self):
        return _OriginExt.OriginCollectionBase___iter__(self)

    def __next__(self):
        return _OriginExt.OriginCollectionBase___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionBase_next(self)

    def __len__(self):
        return _OriginExt.OriginCollectionBase___len__(self)

    def GetCount(self):
        return _OriginExt.OriginCollectionBase_GetCount(self)

    def GetParent(self):
        return _OriginExt.OriginCollectionBase_GetParent(self)
    Count = property(GetCount)

    def	__iter__(self):
    	return self

OriginCollectionBase_swigregister = _OriginExt.OriginCollectionBase_swigregister
OriginCollectionBase_swigregister(OriginCollectionBase)

class OriginCollectionPagesBase(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionPagesBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionPagesBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionPagesBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionPagesBase
    __del__ = lambda self: None

    def IsValid(self):
        return _OriginExt.OriginCollectionPagesBase_IsValid(self)

    def __next__(self):
        return _OriginExt.OriginCollectionPagesBase___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionPagesBase_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionPagesBase___getitem__(self, *args)
    GetItem = __getitem__
OriginCollectionPagesBase_swigregister = _OriginExt.OriginCollectionPagesBase_swigregister
OriginCollectionPagesBase_swigregister(OriginCollectionPagesBase)

class OriginCollectionPages(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionPages
    __del__ = lambda self: None

    def __call__(self, strPageName):
        return _OriginExt.OriginCollectionPages___call__(self, strPageName)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionPages___getitem__(self, *args)

    def __next__(self):
        return _OriginExt.OriginCollectionPages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionPages_next(self)
OriginCollectionPages_swigregister = _OriginExt.OriginCollectionPages_swigregister
OriginCollectionPages_swigregister(OriginCollectionPages)

class OriginCollectionWorksheetPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionWorksheetPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionWorksheetPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionWorksheetPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionWorksheetPages
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionWorksheetPages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionWorksheetPages_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionWorksheetPages___getitem__(self, *args)
OriginCollectionWorksheetPages_swigregister = _OriginExt.OriginCollectionWorksheetPages_swigregister
OriginCollectionWorksheetPages_swigregister(OriginCollectionWorksheetPages)

class OriginCollectionMatrixPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionMatrixPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionMatrixPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionMatrixPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionMatrixPages
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionMatrixPages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionMatrixPages_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionMatrixPages___getitem__(self, *args)
OriginCollectionMatrixPages_swigregister = _OriginExt.OriginCollectionMatrixPages_swigregister
OriginCollectionMatrixPages_swigregister(OriginCollectionMatrixPages)

class OriginCollectionGraphPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionGraphPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionGraphPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionGraphPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionGraphPages
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionGraphPages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionGraphPages_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionGraphPages___getitem__(self, *args)
OriginCollectionGraphPages_swigregister = _OriginExt.OriginCollectionGraphPages_swigregister
OriginCollectionGraphPages_swigregister(OriginCollectionGraphPages)

class OriginCollectionLayoutPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionLayoutPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionLayoutPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionLayoutPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionLayoutPages
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionLayoutPages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionLayoutPages_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionLayoutPages___getitem__(self, *args)
OriginCollectionLayoutPages_swigregister = _OriginExt.OriginCollectionLayoutPages_swigregister
OriginCollectionLayoutPages_swigregister(OriginCollectionLayoutPages)

class OriginCollectionDataPlots(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionDataPlots, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionDataPlots, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionDataPlots()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionDataPlots
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionDataPlots___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionDataPlots_next(self)
OriginCollectionDataPlots_swigregister = _OriginExt.OriginCollectionDataPlots_swigregister
OriginCollectionDataPlots_swigregister(OriginCollectionDataPlots)

class OriginCollectionGraphObjects(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionGraphObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionGraphObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionGraphObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionGraphObjects
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionGraphObjects___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionGraphObjects_next(self)
OriginCollectionGraphObjects_swigregister = _OriginExt.OriginCollectionGraphObjects_swigregister
OriginCollectionGraphObjects_swigregister(OriginCollectionGraphObjects)

class OriginCollectionLayers(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionLayers, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionLayers, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionLayers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionLayers
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionLayers___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionLayers_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionLayers___getitem__(self, *args)
OriginCollectionLayers_swigregister = _OriginExt.OriginCollectionLayers_swigregister
OriginCollectionLayers_swigregister(OriginCollectionLayers)

class OriginCollectionGraphLayer(OriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionGraphLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionGraphLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionGraphLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionGraphLayer
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionGraphLayer___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionGraphLayer_next(self)
OriginCollectionGraphLayer_swigregister = _OriginExt.OriginCollectionGraphLayer_swigregister
OriginCollectionGraphLayer_swigregister(OriginCollectionGraphLayer)

class OriginCollectionWorksheets(OriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionWorksheets, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionWorksheets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionWorksheets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionWorksheets
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionWorksheets___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionWorksheets_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionWorksheets___getitem__(self, *args)
OriginCollectionWorksheets_swigregister = _OriginExt.OriginCollectionWorksheets_swigregister
OriginCollectionWorksheets_swigregister(OriginCollectionWorksheets)

class OriginCollectionColumns(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionColumns, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionColumns, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionColumns()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionColumns
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionColumns___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionColumns_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionColumns___getitem__(self, *args)
OriginCollectionColumns_swigregister = _OriginExt.OriginCollectionColumns_swigregister
OriginCollectionColumns_swigregister(OriginCollectionColumns)

class OriginCollectionMatrixsheets(OriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionMatrixsheets, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionMatrixsheets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionMatrixsheets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionMatrixsheets
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionMatrixsheets___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionMatrixsheets_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionMatrixsheets___getitem__(self, *args)
OriginCollectionMatrixsheets_swigregister = _OriginExt.OriginCollectionMatrixsheets_swigregister
OriginCollectionMatrixsheets_swigregister(OriginCollectionMatrixsheets)

class OriginCollectionMatrixObjects(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionMatrixObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionMatrixObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionMatrixObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionMatrixObjects
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionMatrixObjects___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionMatrixObjects_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionMatrixObjects___getitem__(self, *args)
OriginCollectionMatrixObjects_swigregister = _OriginExt.OriginCollectionMatrixObjects_swigregister
OriginCollectionMatrixObjects_swigregister(OriginCollectionMatrixObjects)

class OriginCollectionTreeNodes(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionTreeNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionTreeNodes, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionTreeNodes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionTreeNodes
    __del__ = lambda self: None

    def __next__(self):
        return _OriginExt.OriginCollectionTreeNodes___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionTreeNodes_next(self)

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionTreeNodes___getitem__(self, *args)
OriginCollectionTreeNodes_swigregister = _OriginExt.OriginCollectionTreeNodes_swigregister
OriginCollectionTreeNodes_swigregister(OriginCollectionTreeNodes)

GROBJTYPE_UNKNOWN = _OriginExt.GROBJTYPE_UNKNOWN
GROBJTYPE_GROUP = _OriginExt.GROBJTYPE_GROUP
GROBJTYPE_TEXT = _OriginExt.GROBJTYPE_TEXT
GROBJTYPE_LEGEND = _OriginExt.GROBJTYPE_LEGEND
GROBJTYPE_LINE2 = _OriginExt.GROBJTYPE_LINE2
GROBJTYPE_LINE4 = _OriginExt.GROBJTYPE_LINE4
GROBJTYPE_POLYLINE = _OriginExt.GROBJTYPE_POLYLINE
GROBJTYPE_BEZIER = _OriginExt.GROBJTYPE_BEZIER
GROBJTYPE_RECT = _OriginExt.GROBJTYPE_RECT
GROBJTYPE_ELLIPSE = _OriginExt.GROBJTYPE_ELLIPSE
GROBJTYPE_TRIANGLE = _OriginExt.GROBJTYPE_TRIANGLE
GROBJTYPE_POLYGON = _OriginExt.GROBJTYPE_POLYGON
GROBJTYPE_POLYGONBEZIER = _OriginExt.GROBJTYPE_POLYGONBEZIER
GROBJTYPE_COLORSCALE = _OriginExt.GROBJTYPE_COLORSCALE
GROBJTYPE_BITMAP = _OriginExt.GROBJTYPE_BITMAP
GROBJTYPE_METAFILE = _OriginExt.GROBJTYPE_METAFILE
GROBJTYPE_EMETAFILE = _OriginExt.GROBJTYPE_EMETAFILE
GROBJTYPE_MEMORY = _OriginExt.GROBJTYPE_MEMORY
GROBJTYPE_LINK = _OriginExt.GROBJTYPE_LINK
GROBJTYPE_EMBEDDED = _OriginExt.GROBJTYPE_EMBEDDED
GROBJTYPE_RAKE = _OriginExt.GROBJTYPE_RAKE
GROBJTYPE_POLYPOLYGON = _OriginExt.GROBJTYPE_POLYPOLYGON
GROBJTYPE_POLYPOLYLINE = _OriginExt.GROBJTYPE_POLYPOLYLINE
GROBJTYPE_DATASELECTOR = _OriginExt.GROBJTYPE_DATASELECTOR
GROBJTYPE_MARKER = _OriginExt.GROBJTYPE_MARKER
GROBJTYPE_CURSOR = _OriginExt.GROBJTYPE_CURSOR
GROBJTYPE_TABLE = _OriginExt.GROBJTYPE_TABLE
GROBJTYPE_SCALER = _OriginExt.GROBJTYPE_SCALER
GROBJTYPE_BUBBLE_LEGEND = _OriginExt.GROBJTYPE_BUBBLE_LEGEND
GROBJTYPE_IMG = _OriginExt.GROBJTYPE_IMG
GROBJTYPE_GROUP_ROOT = _OriginExt.GROBJTYPE_GROUP_ROOT
LABEL_LONG_NAME = _OriginExt.LABEL_LONG_NAME
LABEL_UNITS = _OriginExt.LABEL_UNITS
LABEL_COMMENTS = _OriginExt.LABEL_COMMENTS
LABEL_PARAM = _OriginExt.LABEL_PARAM
LABEL_SAMPLE_RATE = _OriginExt.LABEL_SAMPLE_RATE
LABEL_SPARKLINE = _OriginExt.LABEL_SPARKLINE
LABEL_UDL = _OriginExt.LABEL_UDL
LABEL_REPLICATES = _OriginExt.LABEL_REPLICATES
LABEL_COL_FILTER = _OriginExt.LABEL_COL_FILTER
LABEL_FORMULA = _OriginExt.LABEL_FORMULA
LABEL_CATEGORIES = _OriginExt.LABEL_CATEGORIES
STORAGETYPE_INI = _OriginExt.STORAGETYPE_INI
STORAGETYPE_BINARY = _OriginExt.STORAGETYPE_BINARY
STORAGETYPE_ALL = _OriginExt.STORAGETYPE_ALL
COLFORMAT_NUMERIC = _OriginExt.COLFORMAT_NUMERIC
COLFORMAT_TEXT = _OriginExt.COLFORMAT_TEXT
COLFORMAT_TIME = _OriginExt.COLFORMAT_TIME
COLFORMAT_DATE = _OriginExt.COLFORMAT_DATE
COLFORMAT_MONTH = _OriginExt.COLFORMAT_MONTH
COLFORMAT_WEEKDAY = _OriginExt.COLFORMAT_WEEKDAY
COLFORMAT_TEXT_NUMERIC = _OriginExt.COLFORMAT_TEXT_NUMERIC
COLTYPE_DESIGN_INVALID = _OriginExt.COLTYPE_DESIGN_INVALID
COLTYPE_DESIGN_X = _OriginExt.COLTYPE_DESIGN_X
COLTYPE_DESIGN_Y = _OriginExt.COLTYPE_DESIGN_Y
COLTYPE_DESIGN_Z = _OriginExt.COLTYPE_DESIGN_Z
COLTYPE_DESIGN_L = _OriginExt.COLTYPE_DESIGN_L
COLTYPE_DESIGN_NONE = _OriginExt.COLTYPE_DESIGN_NONE
COLTYPE_DESIGN_XERR = _OriginExt.COLTYPE_DESIGN_XERR
COLTYPE_DESIGN_YERR = _OriginExt.COLTYPE_DESIGN_YERR
COLTYPE_DESIGN_GROUP = _OriginExt.COLTYPE_DESIGN_GROUP
COLTYPE_DESIGN_SUBJECT = _OriginExt.COLTYPE_DESIGN_SUBJECT
COLTYPE_DESIGN_WEIGHT = _OriginExt.COLTYPE_DESIGN_WEIGHT
class OriginFinder(OriginBase):
    __swig_setmethods__ = {}
    for _s in [OriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginFinder, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginFinder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginFinder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginFinder
    __del__ = lambda self: None

    def Clean(self):
        return _OriginExt.OriginFinder_Clean(self)

    def GetLocations(self):
        return _OriginExt.OriginFinder_GetLocations(self)

    def PutLocations(self, nVal):
        return _OriginExt.OriginFinder_PutLocations(self, nVal)
    SetLocations = PutLocations

    def GetOptions(self):
        return _OriginExt.OriginFinder_GetOptions(self)

    def PutOptions(self, nVal):
        return _OriginExt.OriginFinder_PutOptions(self, nVal)
    SetOptions = PutOptions

    def Find(self, Text):
        return _OriginExt.OriginFinder_Find(self, Text)

    def GetObject(self, Index):
        return _OriginExt.OriginFinder_GetObject(self, Index)

    def GetMetaData(self, Index):
        return _OriginExt.OriginFinder_GetMetaData(self, Index)

    def GetMetadataValue(self, Index):
        return _OriginExt.OriginFinder_GetMetadataValue(self, Index)
OriginFinder_swigregister = _OriginExt.OriginFinder_swigregister
OriginFinder_swigregister(OriginFinder)
cvar = _OriginExt.cvar
MISSINGVALUE = cvar.MISSINGVALUE
JULIANDATEOFFSET = cvar.JULIANDATEOFFSET

class OriginCollectionNotePages(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionNotePages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionNotePages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionNotePages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionNotePages
    __del__ = lambda self: None

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionNotePages___getitem__(self, *args)

    def __next__(self):
        return _OriginExt.OriginCollectionNotePages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionNotePages_next(self)
OriginCollectionNotePages_swigregister = _OriginExt.OriginCollectionNotePages_swigregister
OriginCollectionNotePages_swigregister(OriginCollectionNotePages)

class OriginCollectionExternalDialogPages(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionExternalDialogPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionExternalDialogPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_OriginCollectionExternalDialogPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_OriginCollectionExternalDialogPages
    __del__ = lambda self: None

    def __getitem__(self, *args):
        return _OriginExt.OriginCollectionExternalDialogPages___getitem__(self, *args)

    def __next__(self):
        return _OriginExt.OriginCollectionExternalDialogPages___next__(self)

    def next(self):
        return _OriginExt.OriginCollectionExternalDialogPages_next(self)
OriginCollectionExternalDialogPages_swigregister = _OriginExt.OriginCollectionExternalDialogPages_swigregister
OriginCollectionExternalDialogPages_swigregister(OriginCollectionExternalDialogPages)

class ApplicationBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ApplicationBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ApplicationBase
    __del__ = lambda self: None
    MAINWND_HIDE = _OriginExt.ApplicationBase_MAINWND_HIDE
    MAINWND_SHOW = _OriginExt.ApplicationBase_MAINWND_SHOW
    MAINWND_SHOWMINIMIZED = _OriginExt.ApplicationBase_MAINWND_SHOWMINIMIZED
    MAINWND_SHOWMAXIMIZED = _OriginExt.ApplicationBase_MAINWND_SHOWMAXIMIZED
    MAINWND_SHOW_BRING_TO_FRONT = _OriginExt.ApplicationBase_MAINWND_SHOW_BRING_TO_FRONT

    def GetVisible(self):
        return _OriginExt.ApplicationBase_GetVisible(self)

    def PutVisible(self, nVisible):
        return _OriginExt.ApplicationBase_PutVisible(self, nVisible)
    SetVisible = PutVisible

    def GetIsModified(self):
        return _OriginExt.ApplicationBase_GetIsModified(self)

    def PutIsModified(self, val):
        return _OriginExt.ApplicationBase_PutIsModified(self, val)
    SetIsModified = PutIsModified

    def Execute(self, *args):
        return _OriginExt.ApplicationBase_Execute(self, *args)

    def PutMatrix(self, Name, data):
        return _OriginExt.ApplicationBase_PutMatrix(self, Name, data)
    SetMatrix = PutMatrix

    def GetMatrix(self, Name, format=0):
        return _OriginExt.ApplicationBase_GetMatrix(self, Name, format)

    def PutWorksheet(self, Name, data, r1=0, c1=0):
        return _OriginExt.ApplicationBase_PutWorksheet(self, Name, data, r1, c1)
    SetWorksheet = PutWorksheet
    ARRAY2D_VARIANT = _OriginExt.ApplicationBase_ARRAY2D_VARIANT
    ARRAY1D_NUMERIC = _OriginExt.ApplicationBase_ARRAY1D_NUMERIC
    ARRAY2D_NUMERIC = _OriginExt.ApplicationBase_ARRAY2D_NUMERIC
    ARRAY2D_TEXT = _OriginExt.ApplicationBase_ARRAY2D_TEXT
    ARRAY2D_TEXT_FULL_PRECISION = _OriginExt.ApplicationBase_ARRAY2D_TEXT_FULL_PRECISION
    ARRAY1D_VARIANT = _OriginExt.ApplicationBase_ARRAY1D_VARIANT
    ARRAY1D_TEXT = _OriginExt.ApplicationBase_ARRAY1D_TEXT
    ARRAY1D_TEXT_FULL_PRECISION = _OriginExt.ApplicationBase_ARRAY1D_TEXT_FULL_PRECISION
    ARRAY1D_STR = _OriginExt.ApplicationBase_ARRAY1D_STR
    ARRAY2D_STR = _OriginExt.ApplicationBase_ARRAY2D_STR
    ARRAY1D_STR_FULL_PRECISION = _OriginExt.ApplicationBase_ARRAY1D_STR_FULL_PRECISION
    ARRAY2D_STR_FULL_PRECISION = _OriginExt.ApplicationBase_ARRAY2D_STR_FULL_PRECISION

    def GetWorksheet(self, *args):
        return _OriginExt.ApplicationBase_GetWorksheet(self, *args)

    def BeginSession(self):
        return _OriginExt.ApplicationBase_BeginSession(self)

    def EndSession(self):
        return _OriginExt.ApplicationBase_EndSession(self)

    def PageSetValue(self, *args):
        return _OriginExt.ApplicationBase_PageSetValue(self, *args)

    def PageGetValue(self, *args):
        return _OriginExt.ApplicationBase_PageGetValue(self, *args)

    def GetLTStr(self, Name):
        return _OriginExt.ApplicationBase_GetLTStr(self, Name)

    def PutLTStr(self, Name, Value):
        return _OriginExt.ApplicationBase_PutLTStr(self, Name, Value)
    SetLTStr = PutLTStr

    def GetLTVar(self, Name):
        return _OriginExt.ApplicationBase_GetLTVar(self, Name)

    def PutLTVar(self, Name, Value):
        return _OriginExt.ApplicationBase_PutLTVar(self, Name, Value)
    SetLTVar = PutLTVar

    def GetPageString(self, *args):
        return _OriginExt.ApplicationBase_GetPageString(self, *args)

    def PutPageString(self, Name, LTString, NewValue):
        return _OriginExt.ApplicationBase_PutPageString(self, Name, LTString, NewValue)
    SetPageString = PutPageString

    def CopyPage(self, Name, format=0, dpi=150, colordepth=16):
        return _OriginExt.ApplicationBase_CopyPage(self, Name, format, dpi, colordepth)

    def SetRangeName(self, strRangeName, strWksName, r1, c1, r2, c2):
        return _OriginExt.ApplicationBase_SetRangeName(self, strRangeName, strWksName, r1, c1, r2, c2)

    def SetRangeEvent(self, strRangeName, eventtype=-1, bSet=True):
        return _OriginExt.ApplicationBase_SetRangeEvent(self, strRangeName, eventtype, bSet)

    def NewProject(self):
        return _OriginExt.ApplicationBase_NewProject(self)

    def Exit(self):
        return _OriginExt.ApplicationBase_Exit(self)

    def GetEmptyTree(self):
        return _OriginExt.ApplicationBase_GetEmptyTree(self)

    def PutTree(self, strName, trNode):
        return _OriginExt.ApplicationBase_PutTree(self, strName, trNode)

    def Path(self, Type):
        return _OriginExt.ApplicationBase_Path(self, Type)
    RM_LET_ORIGIN_DECIDE = _OriginExt.ApplicationBase_RM_LET_ORIGIN_DECIDE
    RM_HIDE_WITH_NO_FOR_ANSWER = _OriginExt.ApplicationBase_RM_HIDE_WITH_NO_FOR_ANSWER
    RM_HIDE_WITH_YES_FOR_ANSWER = _OriginExt.ApplicationBase_RM_HIDE_WITH_YES_FOR_ANSWER

    def GetReminderMsg(self):
        return _OriginExt.ApplicationBase_GetReminderMsg(self)

    def PutReminderMsg(self, val):
        return _OriginExt.ApplicationBase_PutReminderMsg(self, val)
    SetReminderMsg = PutReminderMsg

    def ProjectSearch(self, Text):
        return _OriginExt.ApplicationBase_ProjectSearch(self, Text)

    def GetFinder(self):
        return _OriginExt.ApplicationBase_GetFinder(self)

    def GetPageBases(self):
        return _OriginExt.ApplicationBase_GetPageBases(self)

    def GetPages(self):
        return _OriginExt.ApplicationBase_GetPages(self)

    def GetWorksheetPages(self):
        return _OriginExt.ApplicationBase_GetWorksheetPages(self)

    def GetGraphPages(self):
        return _OriginExt.ApplicationBase_GetGraphPages(self)

    def GetLayoutPages(self):
        return _OriginExt.ApplicationBase_GetLayoutPages(self)

    def GetMatrixPages(self):
        return _OriginExt.ApplicationBase_GetMatrixPages(self)

    def GetNotes(self):
        return _OriginExt.ApplicationBase_GetNotes(self)

    def GetExternalDialogPages(self):
        return _OriginExt.ApplicationBase_GetExternalDialogPages(self)

    def GetActiveFolder(self):
        return _OriginExt.ApplicationBase_GetActiveFolder(self)

    def PutActiveFolder(self, pFolder):
        return _OriginExt.ApplicationBase_PutActiveFolder(self, pFolder)
    SetActiveFolder = PutActiveFolder

    def GetActivePage(self):
        return _OriginExt.ApplicationBase_GetActivePage(self)

    def GetActiveNote(self):
        return _OriginExt.ApplicationBase_GetActiveNote(self)

    def GetName(self):
        return _OriginExt.ApplicationBase_GetName(self)

    def GetCanClose(self):
        return _OriginExt.ApplicationBase_GetCanClose(self)

    def PutCanClose(self, val):
        return _OriginExt.ApplicationBase_PutCanClose(self, val)
    SetCanClose = PutCanClose

    def OriginVer(self):
        return _OriginExt.ApplicationBase_OriginVer(self)

    def GetPage(self, strPageName):
        return _OriginExt.ApplicationBase_GetPage(self, strPageName)

    def Pages(self, strPageName):
        return _OriginExt.ApplicationBase_Pages(self, strPageName)

    def WorksheetPages(self, strPageName):
        return _OriginExt.ApplicationBase_WorksheetPages(self, strPageName)

    def GetActiveLayer(self):
        return _OriginExt.ApplicationBase_GetActiveLayer(self)

    def GetProjectName(self):
        return _OriginExt.ApplicationBase_GetProjectName(self)
    PATHTYPE_PROJECT = _OriginExt.ApplicationBase_PATHTYPE_PROJECT
    PATHTYPE_USER = _OriginExt.ApplicationBase_PATHTYPE_USER
    PATHTYPE_GROUP = _OriginExt.ApplicationBase_PATHTYPE_GROUP
    PATHTYPE_SYSTEM = _OriginExt.ApplicationBase_PATHTYPE_SYSTEM
    PATHTYPE_SYSTEMP = _OriginExt.ApplicationBase_PATHTYPE_SYSTEMP
    PATHTYPE_APPS = _OriginExt.ApplicationBase_PATHTYPE_APPS

    def GetPath(self, *args):
        return _OriginExt.ApplicationBase_GetPath(self, *args)

    def GetRootFolder(self):
        return _OriginExt.ApplicationBase_GetRootFolder(self)

    def MatrixPages(self, strPageName):
        return _OriginExt.ApplicationBase_MatrixPages(self, strPageName)

    def GraphPages(self, strPageName):
        return _OriginExt.ApplicationBase_GraphPages(self, strPageName)

    def LayoutPages(self, strPageName):
        return _OriginExt.ApplicationBase_LayoutPages(self, strPageName)

    def FindGraphLayer(self, Name):
        return _OriginExt.ApplicationBase_FindGraphLayer(self, Name)

    def FindMatrixSheet(self, Name):
        return _OriginExt.ApplicationBase_FindMatrixSheet(self, Name)

    def FindWorksheet(self, Name):
        return _OriginExt.ApplicationBase_FindWorksheet(self, Name)

    def ActiveNotePage(self):
        return _OriginExt.ApplicationBase_ActiveNotePage(self)

    def GetTree(self, strName):
        return _OriginExt.ApplicationBase_GetTree(self, strName)

    def EmptyTree(self):
        return _OriginExt.ApplicationBase_EmptyTree(self)
    PGTYPE_WKS = _OriginExt.ApplicationBase_PGTYPE_WKS
    PGTYPE_MATRIX = _OriginExt.ApplicationBase_PGTYPE_MATRIX
    PGTYPE_GRAPH = _OriginExt.ApplicationBase_PGTYPE_GRAPH
    PGTYPE_NOTES = _OriginExt.ApplicationBase_PGTYPE_NOTES
    PGTYPE_LAYOUT = _OriginExt.ApplicationBase_PGTYPE_LAYOUT

    def CreatePage(self, *args):
        return _OriginExt.ApplicationBase_CreatePage(self, *args)

    def GetNotePage(self, strPageName):
        return _OriginExt.ApplicationBase_GetNotePage(self, strPageName)

    def CreateNotePage(self, *args):
        return _OriginExt.ApplicationBase_CreateNotePage(self, *args)

    def GetProjectInfo(self):
        return _OriginExt.ApplicationBase_GetProjectInfo(self)

    def NewDataRange(self, *args):
        return _OriginExt.ApplicationBase_NewDataRange(self, *args)

    def SetModified(self, bNewValue):
        return _OriginExt.ApplicationBase_SetModified(self, bNewValue)

    def DestroyPage(self, strPageName):
        return _OriginExt.ApplicationBase_DestroyPage(self, strPageName)

    def Reset(self, bReduceWks, bReduceMat):
        return _OriginExt.ApplicationBase_Reset(self, bReduceWks, bReduceMat)

    def Save(self, strPathName):
        return _OriginExt.ApplicationBase_Save(self, strPathName)

    def Load(self, strPath, bReadOnly=False):
        return _OriginExt.ApplicationBase_Load(self, strPath, bReadOnly)

    def AddTree(self, strName, trNode):
        return _OriginExt.ApplicationBase_AddTree(self, strName, trNode)

    def Run(self):
        return _OriginExt.ApplicationBase_Run(self)

    def LT_execute(self, lpcszScript):
        return _OriginExt.ApplicationBase_LT_execute(self, lpcszScript)

    def LT_get_str(self, lpcszVar):
        return _OriginExt.ApplicationBase_LT_get_str(self, lpcszVar)

    def LT_set_str(self, lpcszVar, lpcszVal):
        return _OriginExt.ApplicationBase_LT_set_str(self, lpcszVar, lpcszVal)

    def LT_get_var(self, lpcszVar):
        return _OriginExt.ApplicationBase_LT_get_var(self, lpcszVar)

    def LT_set_var(self, lpcszVar, dValue):
        return _OriginExt.ApplicationBase_LT_set_var(self, lpcszVar, dValue)

    def LT_GetCurrentThreadId(self):
        return _OriginExt.ApplicationBase_LT_GetCurrentThreadId(self)
    Visible = property(GetVisible, SetVisible)
    IsModified = property(GetIsModified, SetIsModified)
    ActiveFolder = property(GetActiveFolder, SetActiveFolder)
    CanClose = property(GetCanClose, SetCanClose)
    PageBases = property(GetPageBases)
    Pages = property(GetPages)
    GraphPages = property(GetGraphPages)
    LayoutPages = property(GetLayoutPages)
    WorksheetPages = property(GetWorksheetPages)
    MatrixPages = property(GetMatrixPages)
    Notes = property(GetNotes)
    ExternalDialogPages = property(GetExternalDialogPages)
    RootFolder = property(GetRootFolder)
    ProjectInfo = property(GetProjectInfo)
    Name = property(GetName)
    ActivePage = property(GetActivePage)
    ActiveNote = property(GetActiveNote)
ApplicationBase_swigregister = _OriginExt.ApplicationBase_swigregister
ApplicationBase_swigregister(ApplicationBase)

class Application(ApplicationBase):
    __swig_setmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_Application()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_Application
    __del__ = lambda self: None
Application_swigregister = _OriginExt.Application_swigregister
Application_swigregister(Application)

class ApplicationSI(ApplicationBase):
    __swig_setmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationSI, name, value)
    __swig_getmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationSI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ApplicationSI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ApplicationSI
    __del__ = lambda self: None
ApplicationSI_swigregister = _OriginExt.ApplicationSI_swigregister
ApplicationSI_swigregister(ApplicationSI)

class ApplicationCOMSI(ApplicationBase):
    __swig_setmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationCOMSI, name, value)
    __swig_getmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationCOMSI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OriginExt.new_ApplicationCOMSI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OriginExt.delete_ApplicationCOMSI
    __del__ = lambda self: None
ApplicationCOMSI_swigregister = _OriginExt.ApplicationCOMSI_swigregister
ApplicationCOMSI_swigregister(ApplicationCOMSI)

# This file is compatible with both classic and new-style classes.


