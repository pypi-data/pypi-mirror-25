from thrift.transport.TSocket import TServerSocket
from thrift.transport.TTransport import TFramedTransportFactory
from thrift.protocol.TCompactProtocol import TCompactProtocolAcceleratedFactory
from thrift.server.TServer import TThreadPoolServer
import logging

LOG = logging.getLogger(__name__)


class TServer:
    """
    Implements a multiplexed Thrift server.

    After creating a instance of this, start the Server with serve()

    The service_module should come directly from the python code generated by thrift.
    So if you create a service TestService in the namespace thrift_test the
    correct argument would be thrift_test.TestService here.

    :param port: The port on which to start the server
    :param service_module: the thrift service module belonging to this service.
    :param service_impl: the python handler implementing the service
    :param protocol_factory_class: the thrift protocol factory to use
    :param transport_factory_class: the thrift transport factory to use
    :param server: the thrift server to use
    """

    def __init__(self,
                 port: int,
                 service_module,
                 service_impl,
                 protocol_factory_class=TCompactProtocolAcceleratedFactory,
                 transport_factory_class=TFramedTransportFactory,
                 server=TThreadPoolServer):
        """"""
        self._socket = TServerSocket(port=port)
        self._pfactory = protocol_factory_class()
        self._tfactory = transport_factory_class()
        self._processor = service_module.Processor(service_impl)
        self._server_class = server

    def serve(self) -> None:
        """
        Start serving the server.
        """
        server = self._server_class(self._processor, self._socket, self._tfactory, self._pfactory)
        LOG.info("Starting server.")
        server.serve()
