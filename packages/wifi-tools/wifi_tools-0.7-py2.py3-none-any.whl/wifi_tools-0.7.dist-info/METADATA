Metadata-Version: 2.0
Name: wifi-tools
Version: 0.7
Summary: Wifi python scripts for raspberry pi wardriving. Supports wifi, bluetooth, nrf24
Home-page: https://github.com/pepe/wifi_tools
Author: llazzaro
Author-email: llazzaro@dc.uba.ar
License: ISCL
Keywords: wifi_tools
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: ISC License (ISCL)
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Requires-Dist: dpkt
Requires-Dist: pypcap
Requires-Dist: pybluez
Requires-Dist: tqdm
Requires-Dist: scapy-python3
Requires-Dist: redis
Requires-Dist: sqlalchemy
Requires-Dist: SpoofMAC
Requires-Dist: netifaces
Requires-Dist: requests
Requires-Dist: netaddr
Requires-Dist: lcubo-helpers
Requires-Dist: pyrcrack
Requires-Dist: python3-wifi
Requires-Dist: nosexcover
Requires-Dist: python-dateutil
Requires-Dist: python-nmap
Requires-Dist: multiprocessing-logging
Requires-Dist: gpsd-py3
Requires-Dist: pygpio
Requires-Dist: RPi.GPIO
Requires-Dist: char-lcd
Requires-Dist: Adafruit-GPIO
Requires-Dist: Pillow
Requires-Dist: pypcap
Requires-Dist: raspjack

# wifi\_tools

Instalation
--------

Python 3.5 is required!

For Ubuntu
```bash
sudo apt-get install macchanger gpsd libjpeg-dev python-scapy libiw-dev iw aircrack-ng libiw-dev python-dev redis-server libbluetooth-dev libpcap-dev
python setup.py install
manage
```

For OSX

```bash
brew install --with-python libdnet
sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
```

Settings
--------

This projects uses settings.py with some example configuration, however with the command manage you can speficy the path of your settings.

DUMP\_DIRECTORY = path where all captured packets will be save. inside this path a folder wpa\_handshake will be created where all handshakes will be stored.
LOG\_FILENAME = path for the logging filename
DEBUG\_LEVEL = logging level. ex: info, warn, debug, etc.

How to use it
--------

The main entry point of this application is manage command.
Running this command will save every packet in an specific location, which can be changed in the setting.py.
Dot11 packets will be saved in files with "dot11" prefix, all other packets will be saved without the "dot11" prefix.

Example of wifi jamming usage

```bash
manage -i wlan0mon -s 00:11:BB:33:44:AA
```

where 00:11:BB:33:44:AA is your access point (this param avoids sending deauths to that mac address)

Example of usage for offline pcap analysis

```bash
manage -o old_capture.pcap
```

Importing data from wigle
--------

Wigle allows to use cellphone gps to track access point locations.
Since wigle uses a sqlite database it's easy to import all the data from the cellphone

```bash
import_wigle -i wigle.sqlite
```

Export KML
--------

This software allows to extract aps location for usage with google earth.

```bash
generate_kml -o exported.kml
```

Logging
--------

this software logs all the information in the file "wifi\_tools.log"

Features
--------

* Multiprocessing
* Offline pcap analysis
* Wifi Jammer mode
* Specific attacks for each encryption type
* Allows to target a specific access point
* Geographic location of access points
* Multiple wifi network interfaces

Future Features
--------

* Launch access point based on probe requests information
* Client geographic location



Credits
---------


=======
History
=======

0.1.0 (2015-12-13)
------------------

* First release on PyPI.


