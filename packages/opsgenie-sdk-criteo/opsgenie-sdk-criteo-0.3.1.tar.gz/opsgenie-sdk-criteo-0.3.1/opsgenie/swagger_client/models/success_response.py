# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie API Description

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat

from six import iteritems


class SuccessResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, request_id=None, took=0.0, result=None, data=None):
        """
        SuccessResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'request_id': 'str',
            'took': 'float',
            'result': 'str',
            'data': 'object'
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'took': 'took',
            'result': 'result',
            'data': 'data'
        }

        self._request_id = request_id
        self._took = took
        self._result = result
        self._data = data

    @property
    def request_id(self):
        """
        Gets the request_id of this SuccessResponse.

        :return: The request_id of this SuccessResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this SuccessResponse.

        :param request_id: The request_id of this SuccessResponse.
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def took(self):
        """
        Gets the took of this SuccessResponse.

        :return: The took of this SuccessResponse.
        :rtype: float
        """
        return self._took

    @took.setter
    def took(self, took):
        """
        Sets the took of this SuccessResponse.

        :param took: The took of this SuccessResponse.
        :type: float
        """
        if took is None:
            raise ValueError("Invalid value for `took`, must not be `None`")

        self._took = took

    @property
    def result(self):
        """
        Gets the result of this SuccessResponse.

        :return: The result of this SuccessResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this SuccessResponse.

        :param result: The result of this SuccessResponse.
        :type: str
        """

        self._result = result

    @property
    def data(self):
        """
        Gets the data of this SuccessResponse.

        :return: The data of this SuccessResponse.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this SuccessResponse.

        :param data: The data of this SuccessResponse.
        :type: object
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SuccessResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
