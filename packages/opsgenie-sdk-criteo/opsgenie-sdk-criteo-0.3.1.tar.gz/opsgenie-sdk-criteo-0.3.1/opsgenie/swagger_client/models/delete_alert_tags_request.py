# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie API Description

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat

from six import iteritems


class DeleteAlertTagsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, identifier=None, note=None, identifier_type='id', source=None, user=None, tags=None):
        """
        DeleteAlertTagsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'identifier': 'str',
            'note': 'str',
            'identifier_type': 'str',
            'source': 'str',
            'user': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'note': 'note',
            'identifier_type': 'identifierType',
            'source': 'source',
            'user': 'user',
            'tags': 'tags'
        }

        self._identifier = identifier
        self._note = note
        self._identifier_type = identifier_type
        self._source = source
        self._user = user
        self._tags = tags

    @property
    def identifier(self):
        """
        Gets the identifier of this DeleteAlertTagsRequest.
        Identifier of alert which could be alert id, tiny id or alert alias

        :return: The identifier of this DeleteAlertTagsRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this DeleteAlertTagsRequest.
        Identifier of alert which could be alert id, tiny id or alert alias

        :param identifier: The identifier of this DeleteAlertTagsRequest.
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def note(self):
        """
        Gets the note of this DeleteAlertTagsRequest.
        Additional alert note to add

        :return: The note of this DeleteAlertTagsRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this DeleteAlertTagsRequest.
        Additional alert note to add

        :param note: The note of this DeleteAlertTagsRequest.
        :type: str
        """

        self._note = note

    @property
    def identifier_type(self):
        """
        Gets the identifier_type of this DeleteAlertTagsRequest.
        Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

        :return: The identifier_type of this DeleteAlertTagsRequest.
        :rtype: str
        """
        return self._identifier_type

    @identifier_type.setter
    def identifier_type(self, identifier_type):
        """
        Sets the identifier_type of this DeleteAlertTagsRequest.
        Type of the identifier that is provided as an in-line parameter. Possible values are 'id', 'alias' or 'tiny'

        :param identifier_type: The identifier_type of this DeleteAlertTagsRequest.
        :type: str
        """
        allowed_values = ["id", "alias", "tiny"]
        if identifier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identifier_type` ({0}), must be one of {1}"
                    .format(identifier_type, allowed_values)
            )

        self._identifier_type = identifier_type

    @property
    def source(self):
        """
        Gets the source of this DeleteAlertTagsRequest.
        Display name of the request source

        :return: The source of this DeleteAlertTagsRequest.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this DeleteAlertTagsRequest.
        Display name of the request source

        :param source: The source of this DeleteAlertTagsRequest.
        :type: str
        """

        self._source = source

    @property
    def user(self):
        """
        Gets the user of this DeleteAlertTagsRequest.
        Display name of the request owner

        :return: The user of this DeleteAlertTagsRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this DeleteAlertTagsRequest.
        Display name of the request owner

        :param user: The user of this DeleteAlertTagsRequest.
        :type: str
        """

        self._user = user

    @property
    def tags(self):
        """
        Gets the tags of this DeleteAlertTagsRequest.
        Tags field of the given alert as comma seperated values (e.g. 'tag1,tag2')

        :return: The tags of this DeleteAlertTagsRequest.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DeleteAlertTagsRequest.
        Tags field of the given alert as comma seperated values (e.g. 'tag1,tag2')

        :param tags: The tags of this DeleteAlertTagsRequest.
        :type: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeleteAlertTagsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
