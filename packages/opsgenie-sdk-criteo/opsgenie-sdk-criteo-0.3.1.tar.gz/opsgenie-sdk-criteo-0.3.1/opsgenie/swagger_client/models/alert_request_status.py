# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie API Description

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat

from six import iteritems


class AlertRequestStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, action=None, processed_at=None, integration_id=None, is_success=None, status=None, alert_id=None,
                 alias=None):
        """
        AlertRequestStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'str',
            'processed_at': 'datetime',
            'integration_id': 'str',
            'is_success': 'bool',
            'status': 'str',
            'alert_id': 'str',
            'alias': 'str'
        }

        self.attribute_map = {
            'action': 'action',
            'processed_at': 'processedAt',
            'integration_id': 'integrationId',
            'is_success': 'isSuccess',
            'status': 'status',
            'alert_id': 'alertId',
            'alias': 'alias'
        }

        self._action = action
        self._processed_at = processed_at
        self._integration_id = integration_id
        self._is_success = is_success
        self._status = status
        self._alert_id = alert_id
        self._alias = alias

    @property
    def action(self):
        """
        Gets the action of this AlertRequestStatus.

        :return: The action of this AlertRequestStatus.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this AlertRequestStatus.

        :param action: The action of this AlertRequestStatus.
        :type: str
        """

        self._action = action

    @property
    def processed_at(self):
        """
        Gets the processed_at of this AlertRequestStatus.

        :return: The processed_at of this AlertRequestStatus.
        :rtype: datetime
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """
        Sets the processed_at of this AlertRequestStatus.

        :param processed_at: The processed_at of this AlertRequestStatus.
        :type: datetime
        """

        self._processed_at = processed_at

    @property
    def integration_id(self):
        """
        Gets the integration_id of this AlertRequestStatus.

        :return: The integration_id of this AlertRequestStatus.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """
        Sets the integration_id of this AlertRequestStatus.

        :param integration_id: The integration_id of this AlertRequestStatus.
        :type: str
        """

        self._integration_id = integration_id

    @property
    def is_success(self):
        """
        Gets the is_success of this AlertRequestStatus.

        :return: The is_success of this AlertRequestStatus.
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """
        Sets the is_success of this AlertRequestStatus.

        :param is_success: The is_success of this AlertRequestStatus.
        :type: bool
        """

        self._is_success = is_success

    @property
    def status(self):
        """
        Gets the status of this AlertRequestStatus.

        :return: The status of this AlertRequestStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AlertRequestStatus.

        :param status: The status of this AlertRequestStatus.
        :type: str
        """

        self._status = status

    @property
    def alert_id(self):
        """
        Gets the alert_id of this AlertRequestStatus.

        :return: The alert_id of this AlertRequestStatus.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """
        Sets the alert_id of this AlertRequestStatus.

        :param alert_id: The alert_id of this AlertRequestStatus.
        :type: str
        """

        self._alert_id = alert_id

    @property
    def alias(self):
        """
        Gets the alias of this AlertRequestStatus.

        :return: The alias of this AlertRequestStatus.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this AlertRequestStatus.

        :param alias: The alias of this AlertRequestStatus.
        :type: str
        """

        self._alias = alias

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertRequestStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
