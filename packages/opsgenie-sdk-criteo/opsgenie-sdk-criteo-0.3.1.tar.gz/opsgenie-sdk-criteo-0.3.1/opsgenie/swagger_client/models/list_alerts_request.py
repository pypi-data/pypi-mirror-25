# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie API Description

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat

from six import iteritems


class ListAlertsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, offset=None, query=None, limit=None, search_identifier_type='id', sort='createdAt',
                 search_identifier=None, order='desc'):
        """
        ListAlertsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'offset': 'int',
            'query': 'str',
            'limit': 'int',
            'search_identifier_type': 'str',
            'sort': 'str',
            'search_identifier': 'str',
            'order': 'str'
        }

        self.attribute_map = {
            'offset': 'offset',
            'query': 'query',
            'limit': 'limit',
            'search_identifier_type': 'searchIdentifierType',
            'sort': 'sort',
            'search_identifier': 'searchIdentifier',
            'order': 'order'
        }

        self._offset = offset
        self._query = query
        self._limit = limit
        self._search_identifier_type = search_identifier_type
        self._sort = sort
        self._search_identifier = search_identifier
        self._order = order

    @property
    def offset(self):
        """
        Gets the offset of this ListAlertsRequest.
        Start index of the result set (to apply pagination). Minimum value (and also default value) is 0

        :return: The offset of this ListAlertsRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this ListAlertsRequest.
        Start index of the result set (to apply pagination). Minimum value (and also default value) is 0

        :param offset: The offset of this ListAlertsRequest.
        :type: int
        """

        self._offset = offset

    @property
    def query(self):
        """
        Gets the query of this ListAlertsRequest.
        Search query to apply while filtering the alerts

        :return: The query of this ListAlertsRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ListAlertsRequest.
        Search query to apply while filtering the alerts

        :param query: The query of this ListAlertsRequest.
        :type: str
        """

        self._query = query

    @property
    def limit(self):
        """
        Gets the limit of this ListAlertsRequest.
        Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100

        :return: The limit of this ListAlertsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this ListAlertsRequest.
        Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100

        :param limit: The limit of this ListAlertsRequest.
        :type: int
        """

        self._limit = limit

    @property
    def search_identifier_type(self):
        """
        Gets the search_identifier_type of this ListAlertsRequest.
        Identifier type of the saved search query. Possible values are 'id', or 'name'

        :return: The search_identifier_type of this ListAlertsRequest.
        :rtype: str
        """
        return self._search_identifier_type

    @search_identifier_type.setter
    def search_identifier_type(self, search_identifier_type):
        """
        Sets the search_identifier_type of this ListAlertsRequest.
        Identifier type of the saved search query. Possible values are 'id', or 'name'

        :param search_identifier_type: The search_identifier_type of this ListAlertsRequest.
        :type: str
        """
        allowed_values = ["id", "name"]
        if search_identifier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_identifier_type` ({0}), must be one of {1}"
                    .format(search_identifier_type, allowed_values)
            )

        self._search_identifier_type = search_identifier_type

    @property
    def sort(self):
        """
        Gets the sort of this ListAlertsRequest.
        Name of the field that result set will be sorted by

        :return: The sort of this ListAlertsRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this ListAlertsRequest.
        Name of the field that result set will be sorted by

        :param sort: The sort of this ListAlertsRequest.
        :type: str
        """
        allowed_values = ["createdAt", "updatedAt", "tinyId", "alias", "message", "status", "acknowledged", "isSeen",
                          "snoozed", "snoozedUntil", "count", "lastOccurredAt", "source", "owner", "integration.name",
                          "integration.type", "report.ackTime", "report.closeTime", "report.acknowledgedBy",
                          "report.closedBy"]
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                    .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def search_identifier(self):
        """
        Gets the search_identifier of this ListAlertsRequest.
        Identifier of the saved search query to apply while filtering the alerts

        :return: The search_identifier of this ListAlertsRequest.
        :rtype: str
        """
        return self._search_identifier

    @search_identifier.setter
    def search_identifier(self, search_identifier):
        """
        Sets the search_identifier of this ListAlertsRequest.
        Identifier of the saved search query to apply while filtering the alerts

        :param search_identifier: The search_identifier of this ListAlertsRequest.
        :type: str
        """

        self._search_identifier = search_identifier

    @property
    def order(self):
        """
        Gets the order of this ListAlertsRequest.
        Sorting order of the result set

        :return: The order of this ListAlertsRequest.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this ListAlertsRequest.
        Sorting order of the result set

        :param order: The order of this ListAlertsRequest.
        :type: str
        """
        allowed_values = ["asc", "desc"]
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                    .format(order, allowed_values)
            )

        self._order = order

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ListAlertsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
