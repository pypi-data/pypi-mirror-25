CHANGES
=======

1.6.5
-----

* Make travis do pypi deploys on new tags
* LACP is sent from wrong eth\_src and with a VLAN tag
* Version bump for release
* ACLs referenced by instance now
* Resolve ACLs by name at config parsing time
* Ignore subconf sense wrong
* Not yet ready for DP-level only config change detection
* pylint
* Detect DP level config changes
* Conf objects can exclude sub Conf items for comparison
* LACP test shouldn't care what peer key is
* pylint
* Don't sort VLANs update metrics
* Don't sort port order
* Remove min port age
* Sort learned MACs output
* Test port\_status\_handler()
* Missing enumerate
* VLAN method to count learned hosts
* New common code to return hosts learned on a port
* eth\_src\_table unneeded
* Simplify port instance use
* Fix reference to ACL VLAN table
* Use common code to build a list of ACLs
* Re-enable testing under python 3.6
* 2.8.1 still not stable
* Try 2.8.1 now we check port state for liveness
* Downgrade to 2.7.3 because 2.8.1 shows port state 4
* Upgrade to 2.8.1
* Add comment for mirror flows
* Don't delete flows referencing a down mirror port
* Must never set idle timeout on eth\_dst flows by default
* Mirrored ports did not handle state transition
* Disable http\_proxy when actually running tests
* Allow configuration of an http proxy:
* Sanity test is more helpful describing switch state
* Upgrade Ryu to 4.17
* Test state change of mirror port
* Crash handling unresolved VLAN on mirror port changing state
* Added some method docstrings
* Added unit test to check influx flow logger
* Revert to 2.7.3 for stability
* Allow configuration of VLAN tag type. Don't try to find OVS logs if env variable not present
* Try 2.8.1 now we have OVS logs to look at
* shutil
* Archive OVS logs
* Switch to OVS 2.7.3
* Upgrade OVS to 2.8.1
* pylint
* Add unit test for influx port stats
* Move the file read to outside of the parse\_influx\_output method
* Add a unit test for the influx port state update method
* Make PretendInflux handler if the server has specified an output file
* fix ports being an empty dict, and give the datapath a name
* change import to include the whole ryu ofproto parser
* Extreme patience for slow learning DPs
* Increase host learning patience
* expect script to send recommended config
* Add README for ZodiacFX
* Add unit test for LACP
* Mininal passive/LACP support
* Add experimental lacp port option
* move mocking datapath out of the class
* move server outside of class
* Add helper to capture LACP to controller
* Docker builds quieter still
* Docker builds should be quieter
* FAUCET has been verified to work an AT-X230-10GP
* pylint
* Add unit tests for gauge\_influx shipper
* Checks that all prom stats have been exported
* Only sent packets with the right eth type for a route manager
* Fix test\_valve for new parse\_pkt
* Parse packet can get eth\_type
* Revert "Strict check on eth type passed to route manager."
* Strict check on eth type passed to route manager
* Add control eth types to route managers
* Refactor to IP header size function
* Simplify parse\_pkt
* Move PacketMeta and friends to valve\_packet
* Revert "Packet parser can get ether type from VLAN header."
* Revert "Only pass a packet to route manager if an Ethernet type the manager is interested in."
* Revert "Move PacketMeta to valve\_packet."
* Downgrade to python3.5
* Move PacketMeta to valve\_packet
* Only pass a packet to route manager if an Ethernet type the manager is interested in
* Packet parser can get ether type from VLAN header
* Move MAC address constants to valve\_packet
* Use bridge/LLDP constant
* Add initial LACP helper
* Retry pings to reduce nuisance flakes under load
* Update gNxI repository
* Sending a LACP packet could crash Ryu
* Syntax
* Second attempt at incremental ptys workaround
* Make verifying cabling message clearer
* close discriptors before kill
* Revert "Transclude ptys leak workaround to switches."
* Diag print
* Revert "Workaround for pts leak continues."
* Revert "Use own stop\_net method."
* Use own stop\_net method
* Workaround for pts leak continues
* Don't diagnostic print
* Incremental workaround - clean up ptys from switches
* Downgrade tests to 2.7.2
* Transclude ptys leak workaround to switches
* Partially address pty leak by closing pty in hosts (controllers and switches need to be fixed)
* Mapping message for OVS-only
* Make mapping log message clearer
* Make Influx tests quiet
* Queue more free ports as required on every test server request
* Wrong file name passed when starting exabgp
* pylint
* Correct exabgp config file
* We can leak file descriptors because test classes are kept around (so files might not be garbage collected for a long time)
* Don't use --bar with parallel (clogs up test logs)
* Add matchfields required for regression tests in noviflow docs
* Make hardware testing quieter
* Increase initial free port count
* Increase min free port pool
* py2 doesn't have subprocess.DEVNULL
* Set stdin to null where possible
* Don't need STDIN to tests
* Apparently we are running out of file descriptors
* Increase unit test coverage
* Increase test coverage
* Revert "Increase test coverage."
* Revert "Don't assume disconnect count 0 to begin with."
* Revert "FaucetMetrics() has no args."
* Per OVS config advice set long max-idle time
* FaucetMetrics() has no args
* Use same test command as docker
* Increase test coverage
* Don't assume disconnect count 0 to begin with
* close\_fds to tshark
* Remove pytype/mininet directories once installed
* Fix libssl-dev
* Add ssl-dev for OVS
* Make OVS build silent
* Make QuietHTTPServer quieter
* Make OVS build quiet
* Delete OVS build dir when done
* Start OVS using OVS scripts
* Install OVS 2.8.0
* Add server side timeout to test Influx server
* Output all metrics when --labels is not specified
* Add travis build status badge
* Update docs to reflect the move to our new github organisation
* Tweak test output further
* Tweak default test output
* line wrapping for performance and verify log messages
* import "error"
* Health message should log test name
* Use mininet log options to reduce output further
* Dupe urllib line
* Break/fix
* Change log level to error (less output)
* pylint
* Only cache the ubuntu image to make sure latest test image always built
* Move Aruba pipeline reporting script to vendor docs
* Make build quieter again. Use generic test command line to run all tests
* Quiten build further
* pytype grumpy
* Add test for fctl
* pylint
* Don't try to update apt-get CL for mininet
* Make build quieter still
* Update Dockerfile.tests
* Make apt-get quieter again
* Update Dockerfile.tests
* Make test docker build quieter
* We don't need the OF reference implementation
* Move default python version from 3.5 to 3.6
* Add Gauge for pi
* Switch Pi to alpine Linux
* Switch to alpine Linux for non-test containers - makes FAUCET tiny
* Reduce size of all containers further
* Don't add docs to docker images
* Show size of docker images before/after
* Reduce mininet dependencies further
* Prevent mininet X11 dependencies from being installed
* whitespace
* Diagnostics for test/port server
* Allocate fewer test ports (use a separate test server call to obtain a test serial number)
* Missing iperf\_port arg
* Exit test if unit test fails
* Don't add pyc to docker images
* We don't actually need a listening port for OVS. Could pass None to test port server, meaning we could incorrectly release test ports that might be in use
* Print return of all ports allocated to a test
* Allocate fewer ports for iperf tests and print which port allocated to what to diagnose port conflicts
* Pylint
* pytype grumpy
* Experimental fctl utility for FAUCET/Gauge command line use
* include gauge unit test in travis and docker
* use single quotation marks instead of double
* pylint
* Rearrange imports and remove unnecessary ones
* moved some functionality into separate methods
* use the faucet.gauge\_prom PROM\_PORT\_PREFIX, PROM\_PREFIX\_DELIM variables instead of the string literal equivalents
* Added a unit test to check the update method in GaugePortStatsPrometheusPoller
* Revert "Use official buildpack-dep image (more appropriate for dev)."
* Use official buildpack-dep image (more appropriate for dev)
* Don't delete setuptools. :/
* Cache Ubuntu latest
* Use latest Ubuntu base image (rather than Ryu's one - no point)
* Drop numpy (adds too much of a dependency)
* Reduce size of FAUCET/Gauge containers slightly
* Reduce Pi image size
* Don't actually need InfluxDB
* Run unit tests when building Docker images to make sure build successful
* Can't slim down test image yet
* Display size of docker images after cache retrieval
* Reduce size of Gauge container
* Reduce test container size further
* Reduce size of FAUCET docker image further
* Ubuntu specific version checks need to be generic
* Netcat has a different name with new images
* docker save command line needs different python images
* Reduce size of test docker container
* Slim down Docker builds
* Switch to standard python image rather than ryu (smaller)
* pin networkx to 1.11
* TooSlow test used wrong PostHandler
* Reduce retries to 1
* Add missing influx\_retries
* New InfluxDB client allows configuration of retries
* No longer need to use deprecated Travis image
* Simplify docker save command line
* Experiment if new Travis image is working
* Should use less hardcoded timeouts
* Unused dpid\_log
* Reduce CPU over subscription
* Too slow test should reuse more of the base class
* Revert "use less cache space (xz vs. gzip)."
* use less cache space (xz vs. gzip)
* Influx break/fix
* SIGTERM diagnostic OF tcpdump for tshark
* Enable Influx tests to try another port if start of test server fails
* Make influx test logs available to helpers
* Check Gauge is listening on allocated Prometheus port
* Only allocate Influx and Gauge Prometheus ports if the test uses them
* Refactor for more dynamic allocation of ports for Gauge
* Port status helper should always confirm status change by default
* Only flood to up ports
* Another pip2 upgrade
* pip3 has to be upgraded before upgrading pip/2
* Break/fix
* Revert "Pip upgrades should be in same layer as module installation."
* Pip upgrades should be in same layer as module installation
* Putting more pip in pip
* More pip bootstrapping
* Actually upgrade pip to fix occasional build failures due to pip not being able to retry a failed download
* Version bump

1.6.4
-----

* Version bump
* FAUCET should be more helpful when a DP has misconfigured hardware type
* Break/fix
* Test failover behavior
* Enable fast failover test
* Failover groups can resolve ports
* Update convenience test script with sysctls
* Bump version for next release

1.6.3
-----

* Bump version
* Version bump
* Add (skipped) test for failover groups
* Experimental support for failover groups
* Add helpers for fast failover groups
* pylint
* Check groups and groups for routing not simultaneously enabled (will conflict). Refactor config parser to better catch all asserts
* pylint
* pylint
* Move group ID allocator to valve\_table
* Mark use of groups with routing broken, but also remove unneeded dynamic state
* ValveGroupEntry has better API
* Enforce group IP allocation
* sleep between tries
* Enable the Prometheus scraper to retry itself
* pylint
* Incremental coverage improvement and pylint
* pylint
* pylint
* Report PBR version in both FAUCET and Gauge prometheus output
* pylint
* Ensure DPID Gauge/counters explicitly start at 0
* Document travis workaround
* Try deprecated image workaround
* 2nd attempt to fix IPv6 docker
* cat travis files
* Diagnose docker on Travis
* Another fix for the docker IPv6 fix
* Fix docker fix
* Fix broken Travis docker IPv6
* Ensure Influx server port is free
* Verify host\_cache kept over port warm start
* Extraneous diagnostic print
* Only really keep dynamic state if both VLAN and ports did not change
* Support merging of dynamic state between conf objects
* Add more ping learn timeouts and check ping learn was actually sent
* Add learn ping timeout
* shorter bcast ping timeout
* Update HPE Aruba documentation with 2930 details
* Updated class diagram to reflect the latest changes
* Revert "Use fping to stimulate learning (faster than ping)."
* Use fping to stimulate learning (faster than ping)
* Speed up fping for multiple host learning
* Should use TextTestResult
* Use unittest module consistently
* More break/fix
* Update docker docs for gauge/prometheus
* break/fix
* Better test summary
* Revert "Group table now can hash on buckets to determine group\_id."
* Revert "pytype."
* pytype
* Group table now can hash on buckets to determine group\_id
* Don't expedite initial free ports
* break/fix
* Don't need to check age of a port never used
* Add note for Docker layer cache
* Test pylint
* Extraneous -v
* Shouldn't need bigger tmp dir now that we can clean up successful tests incrementally
* Incrementally clean up test directories for successful tests to save disk space
* Executable
* Correct path
* Add commit hook
* pylint
* pylint
* Add version info to faucet.\_\_all\_\_
* Try to use tmp in travis build dir
* add prometheus db configuration
* Bump setup.cfg for next release
* Bump docker-compose versions

1.6.2
-----

* FaucetHostsTimeoutPrometheusTest should retry as necessary
* setup.cfg should be synchronized before release
* Bump versions for release
* Add group table shims to routing/flooding
* Add group table basic methods
* Initial class for groups
* Update HP docs with pipeline, remove code hack re TTL
* checkListening() should be stubbed out so we handle controller startup ourselves
* config\_ports might be stale
* Additional None check
* refactor \_start\_check()
* Refactor to \_start\_check() Check that config dynamic ports are being listened on by controller
* Re-enable log dumps
* Fix hardware tests. Improve diagnostics if prom/ofctl does not start
* Additional load check before commencing test
* tcp\_listening() still apparently can take a SIGPIPE in a thread, so don't use in port server
* pylint. faster test startup
* Fix ReloadTest
* wait load average to come down before health checks
* controller healthy check needs to be more patient
* Missing /
* lsof needs to be able to check other TCP states
* Better diagnostics when controllers fail to start/connect
* Explicitly check health status
* Allocate config ports dynamically
* Reallocate ports if controller startup failed
* pylint
* Incorrect util module name
* Try -b with lsof to prevent hangs
* lsof seems to hang on Travis too
* Need lsof
* Use lsof instead of fuser
* tcp\_listening() doesn't work under Travis
* Shutdown Ryu nicely and then run tshark after Ryu shutdown
* Explicitly shutdown tcpdump when controller stops
* Retry Gauge startup if not up and connected to DP
* Revert "Wait for Gauge to listen on a port."
* Wait for Gauge to listen on a port
* Poll/ping cycles might synchronize in Gauge test
* wait\_for\_flowremoved\_msg waits unnecessarily long
* Fix "BASISo" typo
* pylint
* pylint
* Fix IPv6 table configuration
* Missed valve\_flowmod reference
* ValveTables now generate flows for themselves
* Use match generator in ValveTable
* ValveTables know how to build matches
* pylint
* pylint
* Refer to tables by objects
* Add ValveTable to abstract OpenFlow table
* Skip docker load if cached docker images too small/not present
* Fix resolve\_names\_in\_acls
* Add back TaggedAndUntagged tests
* Use common PromClient
* Add a git config to replace git url with https url
* Remove Ryu lib dependencies from meter.py
* Revert "Remove redundant code from Conf subclasses to base, and remove references to Ryu from meter Conf."
* Revert "meter import path."
* Revert "Port set\_defaults()."
* Revert "Don't default check YAML sequences (yet)."
* Revert "isinstance() spelling"
* isinstance() spelling
* Don't default check YAML sequences (yet)
* Port set\_defaults()
* meter import path
* pylint
* Reuse set\_defaults()
* TODO to handle non-dict conf
* Reuse \_\_init\_\_ from Conf
* Reuse \_\_init\_\_ from Conf
* Reuse Conf \_\_init\_\_
* Use \_\_init\_\_ from Conf
* Remove Ryu lib dependencies from meter.py
* Revert "Remove redundant code from Conf subclasses to base, and remove references to Ryu from meter Conf."
* Revert "meter import path."
* Revert "Port set\_defaults()."
* Revert "Don't default check YAML sequences (yet)."
* Revert "isinstance() spelling"
* isinstance() spelling
* Don't default check YAML sequences (yet)
* Port set\_defaults()
* meter import path
* Stage 1.6.2

1.6.1
-----

* Version 1.6.1
* Tagged tests incorrectly excluded
* Make prometheus dp\_id label consistent
* Gauge Prometheus client also now has DP status
* Fix unit
* Rename prom rules in faucet.rules to match gauge
* Table 6 should be VIP
* Group actions should be sorted
* Stage 1.6.1 version for next release
* Add wildcard config back
* Need to implement ncast of ARP messages not destined for VIP
* Revert "Move arp\_tpa to VIP table (less expensive)."
* Move arp\_tpa to VIP table (less expensive)
* Revert "Partial remove of icmpv6\_type match."
* Partial remove of icmpv6\_type match
* Revert "Make table 3 more narrow (loose icmpv6\_type)."
* Revert "Don't need to match icmpv6\_type in table 3."
* Don't need to match icmpv6\_type in table 3
* Make table 3 more narrow (loose icmpv6\_type)
* Cleanup use of route managers
* Update to HPE Aruba documentation
* Wait longer for hardware switch to connect
* netifaces should be in test-requirements.txt too, for completeness
* Type check hw\_switch\_conf.yaml options
* Create ryu and faucet log directories if they don't exist
* Rework config installation on package install
* Fix startup race - test port server may not have started by the time first test needs it
* We don't update nexthops when responding to a ARP request/ND solicit
* Reduce default packet in size to 96b, except for icmp6 echo (should be 128b)
* Increase packet counter default timeout to 10 seconds
* IPv4 routing tests now verify iperf minimum 1M and also that routes-as-flows are reported as matching
* dpid\_log() fix
* Improve warning and debug logs with datapath
* 2to3 compatibility check
* Update ovs2json.py to handle table with no match specified
* For Shivaram; install workaround for V1.1 release
* For Shivaram; CouchDB doc and setup.py version/description change
* Restructure the Valve inheritance
* Document addition of Dockerfile.dev and Dockerfile.tests
* Add dockerfile for running faucet mininet tests
* Add docker container for development
* Ignore files created by  dockerdev make target
* Add dockerdev make target
* Document further faucet mininet test dependencies
* Make FAUCET\_DIR configurable via environment
* Fix handling of gauge DP reconnections
* Fix docker build for gauge
* Resolved some previous mistaken commits
* Fix handling of DP reconnections
* Github rst parser != Atom rst parser
* Tripping over RST
* Edit and reformat FAQ
* static ip addressing
* restore the test base :) removing hardcoded openflow13
* removed unncessary code regarding acl rules deletion
* Update REAMDE.rst
* scripts for VM packaging
* Mark Zodiac FX supported as of v60\_RC2
* Extend ACL to allow mirror action acl format: acls:    1:       - rule:           dl\_type: 0x800           nw\_proto: 6           actions:               allow: 1               mirror: 14        - rule:            actions:                allow: 1
* updated to v1.0
* Fixed file locations
* updated faucet.yaml to be more generic
* Revert "Complete fixes for Python 3.5"
* Revert "More fixes to make it work with Python3.5"
* More fixes to make it work with Python3.5
* Complete fixes for Python 3.5
* Fix typo - change opt to ryu
* Fix typo
* fix typo to include faucet
* Fixes for production deployment
* Move Aruba pipeline to subdirectory
* Allow Aruba pipeline to be configured, by specifying:
* Add Aruba configuration infrastructure
* Removed the changes to faucet.py, these will be added in an optional per-vendor change later
* Add vendor specific hook for switch features
* Added support for Aruba switch custom pipeline configuration
* Add ofchannel\_log parameter (log all packet in/out flowmods) for debugging
* Retry MaxHosts test if insufficient hosts learned
* Add test for mixed tagged/untagged ports on a VLAN
* Expiry not run soon enough (and another expiry fix)
* Host cache expiry fix
* Add max\_hosts per VLAN config (basic protection against flow table exhaustion)
* Need to decrement TTL when doing routing
* Fix typo Kit found
* Replaces valve docker files with faucet ones
* Add dependancy on ipaddr
* Block on controller flows begin in switch to make tests more reliable
* Add note for retry
* \* Mininet takes forever to actually shutdown properly. \* IPv6 ND sometimes takes a while, so retry
* \* Make tearDown() inherited. \* Add TODO for rate-limiting learning protection
* Ping controller via IPv6 to push ND
* Update how tables are numbered
* Add note about VLAN package requirement
* Add note about OVS 2.3.3 required
* Add note that we need mininet > 2.2.0
* added influxdb python client libraries to the dependency list
* fixed pip install download URL
* updated version number to 0.30
* Updated markup
* updated feature set with pictures
* Add support for Influx DB. If influxdb\_stats: True in config, then port state changes and port stats are sent to InfluxDB, not log file
* Support IPv4 static routes on tagged VLANs
* Add test for tagged control plane traffic
* Control plane can now handle to ARP request/replies on both tagged and untagged ports
* pylint fixes
* pylint fixes
* pylint fixes
* remove obsolete ACL class
* pylint fixes
* Implement IPv4 static routes for untagged VLANs
* Add initial ARP resolver
* Correct name of new event
* Add event and helpers for ARP implementation
* Refactor tests to use common config header
* Update README.rst
* Update README.rst
* Update README.rst
* Update README.rst
* Update README.rst
* Update README.rst
* Create README.md
* Update faucet\_mininet\_test.py
* Update faucet\_mininet\_test.py
* Update faucet\_mininet\_test.py
* Add static routes to VLANs
* Test that disabling unicast\_flood on a VLAN doesn't break forwarding
* Implement configurable unicast flooding behavior at both VLAN and port level
* Add explicit multicast flood rules
* Drop packets from broadcast addresses
* Refactor flood action helper
* Correct default deny on all tables
* Add separate rule for broadcasts
* Add helper for packet ins, and limit maximum packet in size
* Default drop on all tables
* Fix tests, and retire test\_valve.py (functionality superceeded by mininet tests)
