#!/usr/bin/env python

try:
    import docker_bootup
except ImportError:
    pass

import argparse
import logging
import os
import sys
import tempfile
import docker
from jinja2 import Environment, PackageLoader, select_autoescape

from drun.pyserve import serve_model


logger = logging.getLogger("legion")


def build_docker_image(config_file, ):
    docker_client = docker.from_env()



def deploy_model(args):
    tmpdir = tempfile.tempdir

    (folder, model_filename) = os.path.split(args.model_file)

    instance_cfg = {
        'MODEL_ID': args.model_id,
        'MODEL_FILE': model_filename
    }

    env = Environment(
        loader=PackageLoader('legion', 'templates'),
        autoescape=select_autoescape(['tmpl'])
    )

    return

def undeploy_model(args):
    return

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='DRun Command-Line Interface')
    subparsers = parser.add_subparsers()

    deploy_parser = subparsers.add_parser('deploy', description='deploys a model into a new container')
    deploy_parser.add_argument('model-file', type=str, help='serialized model file name')
    deploy_parser.add_argument('model-id', type=str, help='alpha-numeric identifier of the model to publish')
    deploy_parser.add_argument('model-type', type=str, help='drun-python, tensorflow, mleap', default='drun-python')
    deploy_parser.set_defaults(func=deploy_model)

    undeploy_parser = subparsers.add_parser('undeploy', description='kills all containers service the model')
    undeploy_parser.add_argument('model-id', type=str, help='identifier of the model')

    pyserve_parser = subparsers.add_parser('pyserve', description='serve a python model')
    pyserve_parser.add_argument('model-id', type=str)
    pyserve_parser.set_defaults(func=serve_model)

    args = parser.parse_args(sys.argv[1:])
    args.func(args)
