# Generated from SubHaskell.g4 by ANTLR 4.6
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\28")
        buf.write("\u0139\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16")
        buf.write("\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3")
        buf.write("&\3&\3\'\3\'\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-")
        buf.write("\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\3\65\3\65")
        buf.write("\3\66\6\66\u012f\n\66\r\66\16\66\u0130\3\67\6\67\u0134")
        buf.write("\n\67\r\67\16\67\u0135\3\67\3\67\2\28\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60")
        buf.write("_\61a\62c\63e\64g\65i\66k\67m8\3\2\4\4\2\f\f\17\17\4\2")
        buf.write("\13\13\"\"\u013a\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2")
        buf.write("[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2")
        buf.write("\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2")
        buf.write("\2\3o\3\2\2\2\5v\3\2\2\2\7\u0080\3\2\2\2\t\u0086\3\2\2")
        buf.write("\2\13\u0088\3\2\2\2\r\u008b\3\2\2\2\17\u008e\3\2\2\2\21")
        buf.write("\u0090\3\2\2\2\23\u0092\3\2\2\2\25\u0094\3\2\2\2\27\u0096")
        buf.write("\3\2\2\2\31\u0098\3\2\2\2\33\u009a\3\2\2\2\35\u009c\3")
        buf.write("\2\2\2\37\u009e\3\2\2\2!\u00a0\3\2\2\2#\u00aa\3\2\2\2")
        buf.write("%\u00b4\3\2\2\2\'\u00be\3\2\2\2)\u00c8\3\2\2\2+\u00cc")
        buf.write("\3\2\2\2-\u00d0\3\2\2\2/\u00d4\3\2\2\2\61\u00d8\3\2\2")
        buf.write("\2\63\u00dc\3\2\2\2\65\u00e5\3\2\2\2\67\u00e7\3\2\2\2")
        buf.write("9\u00e9\3\2\2\2;\u00eb\3\2\2\2=\u00ee\3\2\2\2?\u00f1\3")
        buf.write("\2\2\2A\u00f3\3\2\2\2C\u00f6\3\2\2\2E\u00f8\3\2\2\2G\u00fb")
        buf.write("\3\2\2\2I\u00fe\3\2\2\2K\u0101\3\2\2\2M\u0106\3\2\2\2")
        buf.write("O\u010a\3\2\2\2Q\u010c\3\2\2\2S\u010e\3\2\2\2U\u0110\3")
        buf.write("\2\2\2W\u0112\3\2\2\2Y\u0114\3\2\2\2[\u0116\3\2\2\2]\u0118")
        buf.write("\3\2\2\2_\u011a\3\2\2\2a\u011c\3\2\2\2c\u011e\3\2\2\2")
        buf.write("e\u0123\3\2\2\2g\u0129\3\2\2\2i\u012b\3\2\2\2k\u012e\3")
        buf.write("\2\2\2m\u0133\3\2\2\2op\7o\2\2pq\7q\2\2qr\7f\2\2rs\7w")
        buf.write("\2\2st\7n\2\2tu\7g\2\2u\4\3\2\2\2vw\7I\2\2wx\7g\2\2xy")
        buf.write("\7p\2\2yz\7g\2\2z{\7t\2\2{|\7c\2\2|}\7v\2\2}~\7g\2\2~")
        buf.write("\177\7f\2\2\177\6\3\2\2\2\u0080\u0081\7y\2\2\u0081\u0082")
        buf.write("\7j\2\2\u0082\u0083\7g\2\2\u0083\u0084\7t\2\2\u0084\u0085")
        buf.write("\7g\2\2\u0085\b\3\2\2\2\u0086\u0087\7.\2\2\u0087\n\3\2")
        buf.write("\2\2\u0088\u0089\7<\2\2\u0089\u008a\7<\2\2\u008a\f\3\2")
        buf.write("\2\2\u008b\u008c\7/\2\2\u008c\u008d\7@\2\2\u008d\16\3")
        buf.write("\2\2\2\u008e\u008f\7?\2\2\u008f\20\3\2\2\2\u0090\u0091")
        buf.write("\7c\2\2\u0091\22\3\2\2\2\u0092\u0093\7d\2\2\u0093\24\3")
        buf.write("\2\2\2\u0094\u0095\7e\2\2\u0095\26\3\2\2\2\u0096\u0097")
        buf.write("\7f\2\2\u0097\30\3\2\2\2\u0098\u0099\7g\2\2\u0099\32\3")
        buf.write("\2\2\2\u009a\u009b\7h\2\2\u009b\34\3\2\2\2\u009c\u009d")
        buf.write("\7i\2\2\u009d\36\3\2\2\2\u009e\u009f\7j\2\2\u009f \3\2")
        buf.write("\2\2\u00a0\u00a1\7h\2\2\u00a1\u00a2\7w\2\2\u00a2\u00a3")
        buf.write("\7p\2\2\u00a3\u00a4\7e\2\2\u00a4\u00a5\7v\2\2\u00a5\u00a6")
        buf.write("\7k\2\2\u00a6\u00a7\7q\2\2\u00a7\u00a8\7p\2\2\u00a8\u00a9")
        buf.write("\7\62\2\2\u00a9\"\3\2\2\2\u00aa\u00ab\7h\2\2\u00ab\u00ac")
        buf.write("\7w\2\2\u00ac\u00ad\7p\2\2\u00ad\u00ae\7e\2\2\u00ae\u00af")
        buf.write("\7v\2\2\u00af\u00b0\7k\2\2\u00b0\u00b1\7q\2\2\u00b1\u00b2")
        buf.write("\7p\2\2\u00b2\u00b3\7\63\2\2\u00b3$\3\2\2\2\u00b4\u00b5")
        buf.write("\7h\2\2\u00b5\u00b6\7w\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8")
        buf.write("\7e\2\2\u00b8\u00b9\7v\2\2\u00b9\u00ba\7k\2\2\u00ba\u00bb")
        buf.write("\7q\2\2\u00bb\u00bc\7p\2\2\u00bc\u00bd\7\64\2\2\u00bd")
        buf.write("&\3\2\2\2\u00be\u00bf\7h\2\2\u00bf\u00c0\7w\2\2\u00c0")
        buf.write("\u00c1\7p\2\2\u00c1\u00c2\7e\2\2\u00c2\u00c3\7v\2\2\u00c3")
        buf.write("\u00c4\7k\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6\7p\2\2\u00c6")
        buf.write("\u00c7\7\65\2\2\u00c7(\3\2\2\2\u00c8\u00c9\7f\2\2\u00c9")
        buf.write("\u00ca\7k\2\2\u00ca\u00cb\7x\2\2\u00cb*\3\2\2\2\u00cc")
        buf.write("\u00cd\7o\2\2\u00cd\u00ce\7q\2\2\u00ce\u00cf\7f\2\2\u00cf")
        buf.write(",\3\2\2\2\u00d0\u00d1\7o\2\2\u00d1\u00d2\7c\2\2\u00d2")
        buf.write("\u00d3\7z\2\2\u00d3.\3\2\2\2\u00d4\u00d5\7o\2\2\u00d5")
        buf.write("\u00d6\7k\2\2\u00d6\u00d7\7p\2\2\u00d7\60\3\2\2\2\u00d8")
        buf.write("\u00d9\7p\2\2\u00d9\u00da\7q\2\2\u00da\u00db\7v\2\2\u00db")
        buf.write("\62\3\2\2\2\u00dc\u00dd\7h\2\2\u00dd\u00de\7t\2\2\u00de")
        buf.write("\u00df\7q\2\2\u00df\u00e0\7o\2\2\u00e0\u00e1\7G\2\2\u00e1")
        buf.write("\u00e2\7p\2\2\u00e2\u00e3\7w\2\2\u00e3\u00e4\7o\2\2\u00e4")
        buf.write("\64\3\2\2\2\u00e5\u00e6\7-\2\2\u00e6\66\3\2\2\2\u00e7")
        buf.write("\u00e8\7/\2\2\u00e88\3\2\2\2\u00e9\u00ea\7,\2\2\u00ea")
        buf.write(":\3\2\2\2\u00eb\u00ec\7?\2\2\u00ec\u00ed\7?\2\2\u00ed")
        buf.write("<\3\2\2\2\u00ee\u00ef\7\61\2\2\u00ef\u00f0\7?\2\2\u00f0")
        buf.write(">\3\2\2\2\u00f1\u00f2\7@\2\2\u00f2@\3\2\2\2\u00f3\u00f4")
        buf.write("\7@\2\2\u00f4\u00f5\7?\2\2\u00f5B\3\2\2\2\u00f6\u00f7")
        buf.write("\7>\2\2\u00f7D\3\2\2\2\u00f8\u00f9\7>\2\2\u00f9\u00fa")
        buf.write("\7?\2\2\u00faF\3\2\2\2\u00fb\u00fc\7~\2\2\u00fc\u00fd")
        buf.write("\7~\2\2\u00fdH\3\2\2\2\u00fe\u00ff\7(\2\2\u00ff\u0100")
        buf.write("\7(\2\2\u0100J\3\2\2\2\u0101\u0102\7D\2\2\u0102\u0103")
        buf.write("\7q\2\2\u0103\u0104\7q\2\2\u0104\u0105\7n\2\2\u0105L\3")
        buf.write("\2\2\2\u0106\u0107\7K\2\2\u0107\u0108\7p\2\2\u0108\u0109")
        buf.write("\7v\2\2\u0109N\3\2\2\2\u010a\u010b\7\62\2\2\u010bP\3\2")
        buf.write("\2\2\u010c\u010d\7\63\2\2\u010dR\3\2\2\2\u010e\u010f\7")
        buf.write("\64\2\2\u010fT\3\2\2\2\u0110\u0111\7\65\2\2\u0111V\3\2")
        buf.write("\2\2\u0112\u0113\7\66\2\2\u0113X\3\2\2\2\u0114\u0115\7")
        buf.write("\67\2\2\u0115Z\3\2\2\2\u0116\u0117\78\2\2\u0117\\\3\2")
        buf.write("\2\2\u0118\u0119\79\2\2\u0119^\3\2\2\2\u011a\u011b\7:")
        buf.write("\2\2\u011b`\3\2\2\2\u011c\u011d\7;\2\2\u011db\3\2\2\2")
        buf.write("\u011e\u011f\7V\2\2\u011f\u0120\7t\2\2\u0120\u0121\7w")
        buf.write("\2\2\u0121\u0122\7g\2\2\u0122d\3\2\2\2\u0123\u0124\7H")
        buf.write("\2\2\u0124\u0125\7c\2\2\u0125\u0126\7n\2\2\u0126\u0127")
        buf.write("\7u\2\2\u0127\u0128\7g\2\2\u0128f\3\2\2\2\u0129\u012a")
        buf.write("\7*\2\2\u012ah\3\2\2\2\u012b\u012c\7+\2\2\u012cj\3\2\2")
        buf.write("\2\u012d\u012f\t\2\2\2\u012e\u012d\3\2\2\2\u012f\u0130")
        buf.write("\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131")
        buf.write("l\3\2\2\2\u0132\u0134\t\3\2\2\u0133\u0132\3\2\2\2\u0134")
        buf.write("\u0135\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3\2\2\2")
        buf.write("\u0136\u0137\3\2\2\2\u0137\u0138\b\67\2\2\u0138n\3\2\2")
        buf.write("\2\5\2\u0130\u0135\3\2\3\2")
        return buf.getvalue()


class SubHaskellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    NEWLINE = 53
    WS = 54

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'module'", "'Generated'", "'where'", "','", "'::'", "'->'", 
            "'='", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", 
            "'function0'", "'function1'", "'function2'", "'function3'", 
            "'div'", "'mod'", "'max'", "'min'", "'not'", "'fromEnum'", "'+'", 
            "'-'", "'*'", "'=='", "'/='", "'>'", "'>='", "'<'", "'<='", 
            "'||'", "'&&'", "'Bool'", "'Int'", "'0'", "'1'", "'2'", "'3'", 
            "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'True'", "'False'", 
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "NEWLINE", "WS" ]

    grammarFileName = "SubHaskell.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


