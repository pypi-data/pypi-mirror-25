# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetTableData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'table_name': 'str',
        'columns': 'list[object]',
        'preferences': 'object',
        'primary_column': 'str',
        'schema': 'str',
        'hidden': 'bool',
        'single': 'bool',
        'default_status': 'str',
        'user_create_column': 'str',
        'user_update_column': 'str',
        'date_create_column': 'str',
        'date_update_column': 'str',
        'created_at': 'str',
        'date_created': 'str',
        'comment': 'str',
        'row_count': 'int',
        'footer': 'bool',
        'list_view': 'str',
        'column_groupings': 'str',
        'filter_column_blacklist': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'table_name': 'table_name',
        'columns': 'columns',
        'preferences': 'preferences',
        'primary_column': 'primary_column',
        'schema': 'schema',
        'hidden': 'hidden',
        'single': 'single',
        'default_status': 'default_status',
        'user_create_column': 'user_create_column',
        'user_update_column': 'user_update_column',
        'date_create_column': 'date_create_column',
        'date_update_column': 'date_update_column',
        'created_at': 'created_at',
        'date_created': 'date_created',
        'comment': 'comment',
        'row_count': 'row_count',
        'footer': 'footer',
        'list_view': 'list_view',
        'column_groupings': 'column_groupings',
        'filter_column_blacklist': 'filter_column_blacklist'
    }

    def __init__(self, name=None, id=None, table_name=None, columns=None, preferences=None, primary_column=None, schema=None, hidden=None, single=None, default_status=None, user_create_column=None, user_update_column=None, date_create_column=None, date_update_column=None, created_at=None, date_created=None, comment=None, row_count=None, footer=None, list_view=None, column_groupings=None, filter_column_blacklist=None):
        """
        GetTableData - a model defined in Swagger
        """

        self._name = None
        self._id = None
        self._table_name = None
        self._columns = None
        self._preferences = None
        self._primary_column = None
        self._schema = None
        self._hidden = None
        self._single = None
        self._default_status = None
        self._user_create_column = None
        self._user_update_column = None
        self._date_create_column = None
        self._date_update_column = None
        self._created_at = None
        self._date_created = None
        self._comment = None
        self._row_count = None
        self._footer = None
        self._list_view = None
        self._column_groupings = None
        self._filter_column_blacklist = None
        self.discriminator = None

        if name is not None:
          self.name = name
        if id is not None:
          self.id = id
        if table_name is not None:
          self.table_name = table_name
        if columns is not None:
          self.columns = columns
        if preferences is not None:
          self.preferences = preferences
        if primary_column is not None:
          self.primary_column = primary_column
        if schema is not None:
          self.schema = schema
        if hidden is not None:
          self.hidden = hidden
        if single is not None:
          self.single = single
        if default_status is not None:
          self.default_status = default_status
        if user_create_column is not None:
          self.user_create_column = user_create_column
        if user_update_column is not None:
          self.user_update_column = user_update_column
        if date_create_column is not None:
          self.date_create_column = date_create_column
        if date_update_column is not None:
          self.date_update_column = date_update_column
        if created_at is not None:
          self.created_at = created_at
        if date_created is not None:
          self.date_created = date_created
        if comment is not None:
          self.comment = comment
        if row_count is not None:
          self.row_count = row_count
        if footer is not None:
          self.footer = footer
        if list_view is not None:
          self.list_view = list_view
        if column_groupings is not None:
          self.column_groupings = column_groupings
        if filter_column_blacklist is not None:
          self.filter_column_blacklist = filter_column_blacklist

    @property
    def name(self):
        """
        Gets the name of this GetTableData.

        :return: The name of this GetTableData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetTableData.

        :param name: The name of this GetTableData.
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this GetTableData.

        :return: The id of this GetTableData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetTableData.

        :param id: The id of this GetTableData.
        :type: str
        """

        self._id = id

    @property
    def table_name(self):
        """
        Gets the table_name of this GetTableData.

        :return: The table_name of this GetTableData.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this GetTableData.

        :param table_name: The table_name of this GetTableData.
        :type: str
        """

        self._table_name = table_name

    @property
    def columns(self):
        """
        Gets the columns of this GetTableData.

        :return: The columns of this GetTableData.
        :rtype: list[object]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """
        Sets the columns of this GetTableData.

        :param columns: The columns of this GetTableData.
        :type: list[object]
        """

        self._columns = columns

    @property
    def preferences(self):
        """
        Gets the preferences of this GetTableData.

        :return: The preferences of this GetTableData.
        :rtype: object
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """
        Sets the preferences of this GetTableData.

        :param preferences: The preferences of this GetTableData.
        :type: object
        """

        self._preferences = preferences

    @property
    def primary_column(self):
        """
        Gets the primary_column of this GetTableData.

        :return: The primary_column of this GetTableData.
        :rtype: str
        """
        return self._primary_column

    @primary_column.setter
    def primary_column(self, primary_column):
        """
        Sets the primary_column of this GetTableData.

        :param primary_column: The primary_column of this GetTableData.
        :type: str
        """

        self._primary_column = primary_column

    @property
    def schema(self):
        """
        Gets the schema of this GetTableData.

        :return: The schema of this GetTableData.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this GetTableData.

        :param schema: The schema of this GetTableData.
        :type: str
        """

        self._schema = schema

    @property
    def hidden(self):
        """
        Gets the hidden of this GetTableData.

        :return: The hidden of this GetTableData.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this GetTableData.

        :param hidden: The hidden of this GetTableData.
        :type: bool
        """

        self._hidden = hidden

    @property
    def single(self):
        """
        Gets the single of this GetTableData.

        :return: The single of this GetTableData.
        :rtype: bool
        """
        return self._single

    @single.setter
    def single(self, single):
        """
        Sets the single of this GetTableData.

        :param single: The single of this GetTableData.
        :type: bool
        """

        self._single = single

    @property
    def default_status(self):
        """
        Gets the default_status of this GetTableData.

        :return: The default_status of this GetTableData.
        :rtype: str
        """
        return self._default_status

    @default_status.setter
    def default_status(self, default_status):
        """
        Sets the default_status of this GetTableData.

        :param default_status: The default_status of this GetTableData.
        :type: str
        """

        self._default_status = default_status

    @property
    def user_create_column(self):
        """
        Gets the user_create_column of this GetTableData.

        :return: The user_create_column of this GetTableData.
        :rtype: str
        """
        return self._user_create_column

    @user_create_column.setter
    def user_create_column(self, user_create_column):
        """
        Sets the user_create_column of this GetTableData.

        :param user_create_column: The user_create_column of this GetTableData.
        :type: str
        """

        self._user_create_column = user_create_column

    @property
    def user_update_column(self):
        """
        Gets the user_update_column of this GetTableData.

        :return: The user_update_column of this GetTableData.
        :rtype: str
        """
        return self._user_update_column

    @user_update_column.setter
    def user_update_column(self, user_update_column):
        """
        Sets the user_update_column of this GetTableData.

        :param user_update_column: The user_update_column of this GetTableData.
        :type: str
        """

        self._user_update_column = user_update_column

    @property
    def date_create_column(self):
        """
        Gets the date_create_column of this GetTableData.

        :return: The date_create_column of this GetTableData.
        :rtype: str
        """
        return self._date_create_column

    @date_create_column.setter
    def date_create_column(self, date_create_column):
        """
        Sets the date_create_column of this GetTableData.

        :param date_create_column: The date_create_column of this GetTableData.
        :type: str
        """

        self._date_create_column = date_create_column

    @property
    def date_update_column(self):
        """
        Gets the date_update_column of this GetTableData.

        :return: The date_update_column of this GetTableData.
        :rtype: str
        """
        return self._date_update_column

    @date_update_column.setter
    def date_update_column(self, date_update_column):
        """
        Sets the date_update_column of this GetTableData.

        :param date_update_column: The date_update_column of this GetTableData.
        :type: str
        """

        self._date_update_column = date_update_column

    @property
    def created_at(self):
        """
        Gets the created_at of this GetTableData.

        :return: The created_at of this GetTableData.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this GetTableData.

        :param created_at: The created_at of this GetTableData.
        :type: str
        """

        self._created_at = created_at

    @property
    def date_created(self):
        """
        Gets the date_created of this GetTableData.

        :return: The date_created of this GetTableData.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this GetTableData.

        :param date_created: The date_created of this GetTableData.
        :type: str
        """

        self._date_created = date_created

    @property
    def comment(self):
        """
        Gets the comment of this GetTableData.

        :return: The comment of this GetTableData.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this GetTableData.

        :param comment: The comment of this GetTableData.
        :type: str
        """

        self._comment = comment

    @property
    def row_count(self):
        """
        Gets the row_count of this GetTableData.

        :return: The row_count of this GetTableData.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """
        Sets the row_count of this GetTableData.

        :param row_count: The row_count of this GetTableData.
        :type: int
        """

        self._row_count = row_count

    @property
    def footer(self):
        """
        Gets the footer of this GetTableData.

        :return: The footer of this GetTableData.
        :rtype: bool
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """
        Sets the footer of this GetTableData.

        :param footer: The footer of this GetTableData.
        :type: bool
        """

        self._footer = footer

    @property
    def list_view(self):
        """
        Gets the list_view of this GetTableData.

        :return: The list_view of this GetTableData.
        :rtype: str
        """
        return self._list_view

    @list_view.setter
    def list_view(self, list_view):
        """
        Sets the list_view of this GetTableData.

        :param list_view: The list_view of this GetTableData.
        :type: str
        """

        self._list_view = list_view

    @property
    def column_groupings(self):
        """
        Gets the column_groupings of this GetTableData.

        :return: The column_groupings of this GetTableData.
        :rtype: str
        """
        return self._column_groupings

    @column_groupings.setter
    def column_groupings(self, column_groupings):
        """
        Sets the column_groupings of this GetTableData.

        :param column_groupings: The column_groupings of this GetTableData.
        :type: str
        """

        self._column_groupings = column_groupings

    @property
    def filter_column_blacklist(self):
        """
        Gets the filter_column_blacklist of this GetTableData.

        :return: The filter_column_blacklist of this GetTableData.
        :rtype: str
        """
        return self._filter_column_blacklist

    @filter_column_blacklist.setter
    def filter_column_blacklist(self, filter_column_blacklist):
        """
        Sets the filter_column_blacklist of this GetTableData.

        :param filter_column_blacklist: The filter_column_blacklist of this GetTableData.
        :type: str
        """

        self._filter_column_blacklist = filter_column_blacklist

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetTableData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
