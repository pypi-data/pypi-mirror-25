# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetGroupsDataData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'restrict_to_ip_whitelist': 'str',
        'nav_override': 'str',
        'show_activity': 'int',
        'show_messages': 'int',
        'show_users': 'int',
        'show_files': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'restrict_to_ip_whitelist': 'restrict_to_ip_whitelist',
        'nav_override': 'nav_override',
        'show_activity': 'show_activity',
        'show_messages': 'show_messages',
        'show_users': 'show_users',
        'show_files': 'show_files'
    }

    def __init__(self, id=None, name=None, description=None, restrict_to_ip_whitelist=None, nav_override=None, show_activity=None, show_messages=None, show_users=None, show_files=None):
        """
        GetGroupsDataData - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._restrict_to_ip_whitelist = None
        self._nav_override = None
        self._show_activity = None
        self._show_messages = None
        self._show_users = None
        self._show_files = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if restrict_to_ip_whitelist is not None:
          self.restrict_to_ip_whitelist = restrict_to_ip_whitelist
        if nav_override is not None:
          self.nav_override = nav_override
        if show_activity is not None:
          self.show_activity = show_activity
        if show_messages is not None:
          self.show_messages = show_messages
        if show_users is not None:
          self.show_users = show_users
        if show_files is not None:
          self.show_files = show_files

    @property
    def id(self):
        """
        Gets the id of this GetGroupsDataData.

        :return: The id of this GetGroupsDataData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetGroupsDataData.

        :param id: The id of this GetGroupsDataData.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this GetGroupsDataData.

        :return: The name of this GetGroupsDataData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetGroupsDataData.

        :param name: The name of this GetGroupsDataData.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this GetGroupsDataData.

        :return: The description of this GetGroupsDataData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GetGroupsDataData.

        :param description: The description of this GetGroupsDataData.
        :type: str
        """

        self._description = description

    @property
    def restrict_to_ip_whitelist(self):
        """
        Gets the restrict_to_ip_whitelist of this GetGroupsDataData.

        :return: The restrict_to_ip_whitelist of this GetGroupsDataData.
        :rtype: str
        """
        return self._restrict_to_ip_whitelist

    @restrict_to_ip_whitelist.setter
    def restrict_to_ip_whitelist(self, restrict_to_ip_whitelist):
        """
        Sets the restrict_to_ip_whitelist of this GetGroupsDataData.

        :param restrict_to_ip_whitelist: The restrict_to_ip_whitelist of this GetGroupsDataData.
        :type: str
        """

        self._restrict_to_ip_whitelist = restrict_to_ip_whitelist

    @property
    def nav_override(self):
        """
        Gets the nav_override of this GetGroupsDataData.

        :return: The nav_override of this GetGroupsDataData.
        :rtype: str
        """
        return self._nav_override

    @nav_override.setter
    def nav_override(self, nav_override):
        """
        Sets the nav_override of this GetGroupsDataData.

        :param nav_override: The nav_override of this GetGroupsDataData.
        :type: str
        """

        self._nav_override = nav_override

    @property
    def show_activity(self):
        """
        Gets the show_activity of this GetGroupsDataData.

        :return: The show_activity of this GetGroupsDataData.
        :rtype: int
        """
        return self._show_activity

    @show_activity.setter
    def show_activity(self, show_activity):
        """
        Sets the show_activity of this GetGroupsDataData.

        :param show_activity: The show_activity of this GetGroupsDataData.
        :type: int
        """

        self._show_activity = show_activity

    @property
    def show_messages(self):
        """
        Gets the show_messages of this GetGroupsDataData.

        :return: The show_messages of this GetGroupsDataData.
        :rtype: int
        """
        return self._show_messages

    @show_messages.setter
    def show_messages(self, show_messages):
        """
        Sets the show_messages of this GetGroupsDataData.

        :param show_messages: The show_messages of this GetGroupsDataData.
        :type: int
        """

        self._show_messages = show_messages

    @property
    def show_users(self):
        """
        Gets the show_users of this GetGroupsDataData.

        :return: The show_users of this GetGroupsDataData.
        :rtype: int
        """
        return self._show_users

    @show_users.setter
    def show_users(self, show_users):
        """
        Sets the show_users of this GetGroupsDataData.

        :param show_users: The show_users of this GetGroupsDataData.
        :type: int
        """

        self._show_users = show_users

    @property
    def show_files(self):
        """
        Gets the show_files of this GetGroupsDataData.

        :return: The show_files of this GetGroupsDataData.
        :rtype: int
        """
        return self._show_files

    @show_files.setter
    def show_files(self, show_files):
        """
        Sets the show_files of this GetGroupsDataData.

        :param show_files: The show_files of this GetGroupsDataData.
        :type: int
        """

        self._show_files = show_files

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetGroupsDataData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
