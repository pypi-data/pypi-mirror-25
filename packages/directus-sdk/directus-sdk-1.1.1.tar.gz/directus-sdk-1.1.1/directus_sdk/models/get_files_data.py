# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetFilesData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'active': 'int',
        'name': 'str',
        'url': 'str',
        'title': 'str',
        'location': 'str',
        'caption': 'str',
        'type': 'str',
        'charset': 'str',
        'tags': 'str',
        'width': 'int',
        'height': 'int',
        'size': 'int',
        'embed_id': 'str',
        'user': 'int',
        'date_uploaded': 'str',
        'storage_adapter': 'str'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'name': 'name',
        'url': 'url',
        'title': 'title',
        'location': 'location',
        'caption': 'caption',
        'type': 'type',
        'charset': 'charset',
        'tags': 'tags',
        'width': 'width',
        'height': 'height',
        'size': 'size',
        'embed_id': 'embed_id',
        'user': 'user',
        'date_uploaded': 'date_uploaded',
        'storage_adapter': 'storage_adapter'
    }

    def __init__(self, id=None, active=None, name=None, url=None, title=None, location=None, caption=None, type=None, charset=None, tags=None, width=None, height=None, size=None, embed_id=None, user=None, date_uploaded=None, storage_adapter=None):
        """
        GetFilesData - a model defined in Swagger
        """

        self._id = None
        self._active = None
        self._name = None
        self._url = None
        self._title = None
        self._location = None
        self._caption = None
        self._type = None
        self._charset = None
        self._tags = None
        self._width = None
        self._height = None
        self._size = None
        self._embed_id = None
        self._user = None
        self._date_uploaded = None
        self._storage_adapter = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if active is not None:
          self.active = active
        if name is not None:
          self.name = name
        if url is not None:
          self.url = url
        if title is not None:
          self.title = title
        if location is not None:
          self.location = location
        if caption is not None:
          self.caption = caption
        if type is not None:
          self.type = type
        if charset is not None:
          self.charset = charset
        if tags is not None:
          self.tags = tags
        if width is not None:
          self.width = width
        if height is not None:
          self.height = height
        if size is not None:
          self.size = size
        if embed_id is not None:
          self.embed_id = embed_id
        if user is not None:
          self.user = user
        if date_uploaded is not None:
          self.date_uploaded = date_uploaded
        if storage_adapter is not None:
          self.storage_adapter = storage_adapter

    @property
    def id(self):
        """
        Gets the id of this GetFilesData.

        :return: The id of this GetFilesData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetFilesData.

        :param id: The id of this GetFilesData.
        :type: int
        """

        self._id = id

    @property
    def active(self):
        """
        Gets the active of this GetFilesData.

        :return: The active of this GetFilesData.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this GetFilesData.

        :param active: The active of this GetFilesData.
        :type: int
        """

        self._active = active

    @property
    def name(self):
        """
        Gets the name of this GetFilesData.

        :return: The name of this GetFilesData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetFilesData.

        :param name: The name of this GetFilesData.
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """
        Gets the url of this GetFilesData.

        :return: The url of this GetFilesData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this GetFilesData.

        :param url: The url of this GetFilesData.
        :type: str
        """

        self._url = url

    @property
    def title(self):
        """
        Gets the title of this GetFilesData.

        :return: The title of this GetFilesData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this GetFilesData.

        :param title: The title of this GetFilesData.
        :type: str
        """

        self._title = title

    @property
    def location(self):
        """
        Gets the location of this GetFilesData.

        :return: The location of this GetFilesData.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this GetFilesData.

        :param location: The location of this GetFilesData.
        :type: str
        """

        self._location = location

    @property
    def caption(self):
        """
        Gets the caption of this GetFilesData.

        :return: The caption of this GetFilesData.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """
        Sets the caption of this GetFilesData.

        :param caption: The caption of this GetFilesData.
        :type: str
        """

        self._caption = caption

    @property
    def type(self):
        """
        Gets the type of this GetFilesData.

        :return: The type of this GetFilesData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GetFilesData.

        :param type: The type of this GetFilesData.
        :type: str
        """

        self._type = type

    @property
    def charset(self):
        """
        Gets the charset of this GetFilesData.

        :return: The charset of this GetFilesData.
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """
        Sets the charset of this GetFilesData.

        :param charset: The charset of this GetFilesData.
        :type: str
        """

        self._charset = charset

    @property
    def tags(self):
        """
        Gets the tags of this GetFilesData.

        :return: The tags of this GetFilesData.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this GetFilesData.

        :param tags: The tags of this GetFilesData.
        :type: str
        """

        self._tags = tags

    @property
    def width(self):
        """
        Gets the width of this GetFilesData.

        :return: The width of this GetFilesData.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this GetFilesData.

        :param width: The width of this GetFilesData.
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this GetFilesData.

        :return: The height of this GetFilesData.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this GetFilesData.

        :param height: The height of this GetFilesData.
        :type: int
        """

        self._height = height

    @property
    def size(self):
        """
        Gets the size of this GetFilesData.

        :return: The size of this GetFilesData.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this GetFilesData.

        :param size: The size of this GetFilesData.
        :type: int
        """

        self._size = size

    @property
    def embed_id(self):
        """
        Gets the embed_id of this GetFilesData.

        :return: The embed_id of this GetFilesData.
        :rtype: str
        """
        return self._embed_id

    @embed_id.setter
    def embed_id(self, embed_id):
        """
        Sets the embed_id of this GetFilesData.

        :param embed_id: The embed_id of this GetFilesData.
        :type: str
        """

        self._embed_id = embed_id

    @property
    def user(self):
        """
        Gets the user of this GetFilesData.

        :return: The user of this GetFilesData.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this GetFilesData.

        :param user: The user of this GetFilesData.
        :type: int
        """

        self._user = user

    @property
    def date_uploaded(self):
        """
        Gets the date_uploaded of this GetFilesData.

        :return: The date_uploaded of this GetFilesData.
        :rtype: str
        """
        return self._date_uploaded

    @date_uploaded.setter
    def date_uploaded(self, date_uploaded):
        """
        Sets the date_uploaded of this GetFilesData.

        :param date_uploaded: The date_uploaded of this GetFilesData.
        :type: str
        """

        self._date_uploaded = date_uploaded

    @property
    def storage_adapter(self):
        """
        Gets the storage_adapter of this GetFilesData.

        :return: The storage_adapter of this GetFilesData.
        :rtype: str
        """
        return self._storage_adapter

    @storage_adapter.setter
    def storage_adapter(self, storage_adapter):
        """
        Sets the storage_adapter of this GetFilesData.

        :param storage_adapter: The storage_adapter of this GetFilesData.
        :type: str
        """

        self._storage_adapter = storage_adapter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetFilesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
