# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetMessagesMeta(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read': 'int',
        'unread': 'int',
        'total': 'int',
        'max_id': 'int',
        'type': 'str',
        'table': 'str'
    }

    attribute_map = {
        'read': 'read',
        'unread': 'unread',
        'total': 'total',
        'max_id': 'max_id',
        'type': 'type',
        'table': 'table'
    }

    def __init__(self, read=None, unread=None, total=None, max_id=None, type=None, table=None):
        """
        GetMessagesMeta - a model defined in Swagger
        """

        self._read = None
        self._unread = None
        self._total = None
        self._max_id = None
        self._type = None
        self._table = None
        self.discriminator = None

        if read is not None:
          self.read = read
        if unread is not None:
          self.unread = unread
        if total is not None:
          self.total = total
        if max_id is not None:
          self.max_id = max_id
        if type is not None:
          self.type = type
        if table is not None:
          self.table = table

    @property
    def read(self):
        """
        Gets the read of this GetMessagesMeta.

        :return: The read of this GetMessagesMeta.
        :rtype: int
        """
        return self._read

    @read.setter
    def read(self, read):
        """
        Sets the read of this GetMessagesMeta.

        :param read: The read of this GetMessagesMeta.
        :type: int
        """

        self._read = read

    @property
    def unread(self):
        """
        Gets the unread of this GetMessagesMeta.

        :return: The unread of this GetMessagesMeta.
        :rtype: int
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """
        Sets the unread of this GetMessagesMeta.

        :param unread: The unread of this GetMessagesMeta.
        :type: int
        """

        self._unread = unread

    @property
    def total(self):
        """
        Gets the total of this GetMessagesMeta.

        :return: The total of this GetMessagesMeta.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this GetMessagesMeta.

        :param total: The total of this GetMessagesMeta.
        :type: int
        """

        self._total = total

    @property
    def max_id(self):
        """
        Gets the max_id of this GetMessagesMeta.

        :return: The max_id of this GetMessagesMeta.
        :rtype: int
        """
        return self._max_id

    @max_id.setter
    def max_id(self, max_id):
        """
        Sets the max_id of this GetMessagesMeta.

        :param max_id: The max_id of this GetMessagesMeta.
        :type: int
        """

        self._max_id = max_id

    @property
    def type(self):
        """
        Gets the type of this GetMessagesMeta.

        :return: The type of this GetMessagesMeta.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GetMessagesMeta.

        :param type: The type of this GetMessagesMeta.
        :type: str
        """

        self._type = type

    @property
    def table(self):
        """
        Gets the table of this GetMessagesMeta.

        :return: The table of this GetMessagesMeta.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """
        Sets the table of this GetMessagesMeta.

        :param table: The table of this GetMessagesMeta.
        :type: str
        """

        self._table = table

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetMessagesMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
