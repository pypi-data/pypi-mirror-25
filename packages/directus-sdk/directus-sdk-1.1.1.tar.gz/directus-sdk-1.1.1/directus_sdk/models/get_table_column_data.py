# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetTableColumnData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'column_name': 'str',
        'type': 'str',
        'char_length': 'str',
        'is_nullable': 'str',
        'comment': 'str',
        'sort': 'int',
        'system': 'bool',
        'master': 'bool',
        'hidden_list': 'bool',
        'hidden_input': 'bool',
        'required': 'bool',
        'column_type': 'str',
        'is_writable': 'bool',
        'ui': 'str',
        'options': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'column_name': 'column_name',
        'type': 'type',
        'char_length': 'char_length',
        'is_nullable': 'is_nullable',
        'comment': 'comment',
        'sort': 'sort',
        'system': 'system',
        'master': 'master',
        'hidden_list': 'hidden_list',
        'hidden_input': 'hidden_input',
        'required': 'required',
        'column_type': 'column_type',
        'is_writable': 'is_writable',
        'ui': 'ui',
        'options': 'options'
    }

    def __init__(self, id=None, column_name=None, type=None, char_length=None, is_nullable=None, comment=None, sort=None, system=None, master=None, hidden_list=None, hidden_input=None, required=None, column_type=None, is_writable=None, ui=None, options=None):
        """
        GetTableColumnData - a model defined in Swagger
        """

        self._id = None
        self._column_name = None
        self._type = None
        self._char_length = None
        self._is_nullable = None
        self._comment = None
        self._sort = None
        self._system = None
        self._master = None
        self._hidden_list = None
        self._hidden_input = None
        self._required = None
        self._column_type = None
        self._is_writable = None
        self._ui = None
        self._options = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if column_name is not None:
          self.column_name = column_name
        if type is not None:
          self.type = type
        if char_length is not None:
          self.char_length = char_length
        if is_nullable is not None:
          self.is_nullable = is_nullable
        if comment is not None:
          self.comment = comment
        if sort is not None:
          self.sort = sort
        if system is not None:
          self.system = system
        if master is not None:
          self.master = master
        if hidden_list is not None:
          self.hidden_list = hidden_list
        if hidden_input is not None:
          self.hidden_input = hidden_input
        if required is not None:
          self.required = required
        if column_type is not None:
          self.column_type = column_type
        if is_writable is not None:
          self.is_writable = is_writable
        if ui is not None:
          self.ui = ui
        if options is not None:
          self.options = options

    @property
    def id(self):
        """
        Gets the id of this GetTableColumnData.

        :return: The id of this GetTableColumnData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetTableColumnData.

        :param id: The id of this GetTableColumnData.
        :type: str
        """

        self._id = id

    @property
    def column_name(self):
        """
        Gets the column_name of this GetTableColumnData.

        :return: The column_name of this GetTableColumnData.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this GetTableColumnData.

        :param column_name: The column_name of this GetTableColumnData.
        :type: str
        """

        self._column_name = column_name

    @property
    def type(self):
        """
        Gets the type of this GetTableColumnData.

        :return: The type of this GetTableColumnData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GetTableColumnData.

        :param type: The type of this GetTableColumnData.
        :type: str
        """

        self._type = type

    @property
    def char_length(self):
        """
        Gets the char_length of this GetTableColumnData.

        :return: The char_length of this GetTableColumnData.
        :rtype: str
        """
        return self._char_length

    @char_length.setter
    def char_length(self, char_length):
        """
        Sets the char_length of this GetTableColumnData.

        :param char_length: The char_length of this GetTableColumnData.
        :type: str
        """

        self._char_length = char_length

    @property
    def is_nullable(self):
        """
        Gets the is_nullable of this GetTableColumnData.

        :return: The is_nullable of this GetTableColumnData.
        :rtype: str
        """
        return self._is_nullable

    @is_nullable.setter
    def is_nullable(self, is_nullable):
        """
        Sets the is_nullable of this GetTableColumnData.

        :param is_nullable: The is_nullable of this GetTableColumnData.
        :type: str
        """

        self._is_nullable = is_nullable

    @property
    def comment(self):
        """
        Gets the comment of this GetTableColumnData.

        :return: The comment of this GetTableColumnData.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this GetTableColumnData.

        :param comment: The comment of this GetTableColumnData.
        :type: str
        """

        self._comment = comment

    @property
    def sort(self):
        """
        Gets the sort of this GetTableColumnData.

        :return: The sort of this GetTableColumnData.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this GetTableColumnData.

        :param sort: The sort of this GetTableColumnData.
        :type: int
        """

        self._sort = sort

    @property
    def system(self):
        """
        Gets the system of this GetTableColumnData.

        :return: The system of this GetTableColumnData.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """
        Sets the system of this GetTableColumnData.

        :param system: The system of this GetTableColumnData.
        :type: bool
        """

        self._system = system

    @property
    def master(self):
        """
        Gets the master of this GetTableColumnData.

        :return: The master of this GetTableColumnData.
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """
        Sets the master of this GetTableColumnData.

        :param master: The master of this GetTableColumnData.
        :type: bool
        """

        self._master = master

    @property
    def hidden_list(self):
        """
        Gets the hidden_list of this GetTableColumnData.

        :return: The hidden_list of this GetTableColumnData.
        :rtype: bool
        """
        return self._hidden_list

    @hidden_list.setter
    def hidden_list(self, hidden_list):
        """
        Sets the hidden_list of this GetTableColumnData.

        :param hidden_list: The hidden_list of this GetTableColumnData.
        :type: bool
        """

        self._hidden_list = hidden_list

    @property
    def hidden_input(self):
        """
        Gets the hidden_input of this GetTableColumnData.

        :return: The hidden_input of this GetTableColumnData.
        :rtype: bool
        """
        return self._hidden_input

    @hidden_input.setter
    def hidden_input(self, hidden_input):
        """
        Sets the hidden_input of this GetTableColumnData.

        :param hidden_input: The hidden_input of this GetTableColumnData.
        :type: bool
        """

        self._hidden_input = hidden_input

    @property
    def required(self):
        """
        Gets the required of this GetTableColumnData.

        :return: The required of this GetTableColumnData.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this GetTableColumnData.

        :param required: The required of this GetTableColumnData.
        :type: bool
        """

        self._required = required

    @property
    def column_type(self):
        """
        Gets the column_type of this GetTableColumnData.

        :return: The column_type of this GetTableColumnData.
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """
        Sets the column_type of this GetTableColumnData.

        :param column_type: The column_type of this GetTableColumnData.
        :type: str
        """

        self._column_type = column_type

    @property
    def is_writable(self):
        """
        Gets the is_writable of this GetTableColumnData.

        :return: The is_writable of this GetTableColumnData.
        :rtype: bool
        """
        return self._is_writable

    @is_writable.setter
    def is_writable(self, is_writable):
        """
        Sets the is_writable of this GetTableColumnData.

        :param is_writable: The is_writable of this GetTableColumnData.
        :type: bool
        """

        self._is_writable = is_writable

    @property
    def ui(self):
        """
        Gets the ui of this GetTableColumnData.

        :return: The ui of this GetTableColumnData.
        :rtype: str
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """
        Sets the ui of this GetTableColumnData.

        :param ui: The ui of this GetTableColumnData.
        :type: str
        """

        self._ui = ui

    @property
    def options(self):
        """
        Gets the options of this GetTableColumnData.

        :return: The options of this GetTableColumnData.
        :rtype: list[object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this GetTableColumnData.

        :param options: The options of this GetTableColumnData.
        :type: list[object]
        """

        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetTableColumnData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
