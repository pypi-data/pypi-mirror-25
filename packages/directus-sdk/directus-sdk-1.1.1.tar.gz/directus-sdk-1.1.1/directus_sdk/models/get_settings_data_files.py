# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetSettingsDataFiles(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_thumbnails': 'str',
        'thumbnail_quality': 'str',
        'thumbnail_size': 'str',
        'file_naming': 'str',
        'thumbnail_crop_enabled': 'str',
        'youtube_api_key': 'str'
    }

    attribute_map = {
        'allowed_thumbnails': 'allowed_thumbnails',
        'thumbnail_quality': 'thumbnail_quality',
        'thumbnail_size': 'thumbnail_size',
        'file_naming': 'file_naming',
        'thumbnail_crop_enabled': 'thumbnail_crop_enabled',
        'youtube_api_key': 'youtube_api_key'
    }

    def __init__(self, allowed_thumbnails=None, thumbnail_quality=None, thumbnail_size=None, file_naming=None, thumbnail_crop_enabled=None, youtube_api_key=None):
        """
        GetSettingsDataFiles - a model defined in Swagger
        """

        self._allowed_thumbnails = None
        self._thumbnail_quality = None
        self._thumbnail_size = None
        self._file_naming = None
        self._thumbnail_crop_enabled = None
        self._youtube_api_key = None
        self.discriminator = None

        if allowed_thumbnails is not None:
          self.allowed_thumbnails = allowed_thumbnails
        if thumbnail_quality is not None:
          self.thumbnail_quality = thumbnail_quality
        if thumbnail_size is not None:
          self.thumbnail_size = thumbnail_size
        if file_naming is not None:
          self.file_naming = file_naming
        if thumbnail_crop_enabled is not None:
          self.thumbnail_crop_enabled = thumbnail_crop_enabled
        if youtube_api_key is not None:
          self.youtube_api_key = youtube_api_key

    @property
    def allowed_thumbnails(self):
        """
        Gets the allowed_thumbnails of this GetSettingsDataFiles.

        :return: The allowed_thumbnails of this GetSettingsDataFiles.
        :rtype: str
        """
        return self._allowed_thumbnails

    @allowed_thumbnails.setter
    def allowed_thumbnails(self, allowed_thumbnails):
        """
        Sets the allowed_thumbnails of this GetSettingsDataFiles.

        :param allowed_thumbnails: The allowed_thumbnails of this GetSettingsDataFiles.
        :type: str
        """

        self._allowed_thumbnails = allowed_thumbnails

    @property
    def thumbnail_quality(self):
        """
        Gets the thumbnail_quality of this GetSettingsDataFiles.

        :return: The thumbnail_quality of this GetSettingsDataFiles.
        :rtype: str
        """
        return self._thumbnail_quality

    @thumbnail_quality.setter
    def thumbnail_quality(self, thumbnail_quality):
        """
        Sets the thumbnail_quality of this GetSettingsDataFiles.

        :param thumbnail_quality: The thumbnail_quality of this GetSettingsDataFiles.
        :type: str
        """

        self._thumbnail_quality = thumbnail_quality

    @property
    def thumbnail_size(self):
        """
        Gets the thumbnail_size of this GetSettingsDataFiles.

        :return: The thumbnail_size of this GetSettingsDataFiles.
        :rtype: str
        """
        return self._thumbnail_size

    @thumbnail_size.setter
    def thumbnail_size(self, thumbnail_size):
        """
        Sets the thumbnail_size of this GetSettingsDataFiles.

        :param thumbnail_size: The thumbnail_size of this GetSettingsDataFiles.
        :type: str
        """

        self._thumbnail_size = thumbnail_size

    @property
    def file_naming(self):
        """
        Gets the file_naming of this GetSettingsDataFiles.

        :return: The file_naming of this GetSettingsDataFiles.
        :rtype: str
        """
        return self._file_naming

    @file_naming.setter
    def file_naming(self, file_naming):
        """
        Sets the file_naming of this GetSettingsDataFiles.

        :param file_naming: The file_naming of this GetSettingsDataFiles.
        :type: str
        """

        self._file_naming = file_naming

    @property
    def thumbnail_crop_enabled(self):
        """
        Gets the thumbnail_crop_enabled of this GetSettingsDataFiles.

        :return: The thumbnail_crop_enabled of this GetSettingsDataFiles.
        :rtype: str
        """
        return self._thumbnail_crop_enabled

    @thumbnail_crop_enabled.setter
    def thumbnail_crop_enabled(self, thumbnail_crop_enabled):
        """
        Sets the thumbnail_crop_enabled of this GetSettingsDataFiles.

        :param thumbnail_crop_enabled: The thumbnail_crop_enabled of this GetSettingsDataFiles.
        :type: str
        """

        self._thumbnail_crop_enabled = thumbnail_crop_enabled

    @property
    def youtube_api_key(self):
        """
        Gets the youtube_api_key of this GetSettingsDataFiles.

        :return: The youtube_api_key of this GetSettingsDataFiles.
        :rtype: str
        """
        return self._youtube_api_key

    @youtube_api_key.setter
    def youtube_api_key(self, youtube_api_key):
        """
        Sets the youtube_api_key of this GetSettingsDataFiles.

        :param youtube_api_key: The youtube_api_key of this GetSettingsDataFiles.
        :type: str
        """

        self._youtube_api_key = youtube_api_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetSettingsDataFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
