# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetPreferencesData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user': 'int',
        'table_name': 'str',
        'title': 'str',
        'columns_visible': 'str',
        'sort': 'str',
        'sort_order': 'str',
        'status': 'str',
        'search_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'table_name': 'table_name',
        'title': 'title',
        'columns_visible': 'columns_visible',
        'sort': 'sort',
        'sort_order': 'sort_order',
        'status': 'status',
        'search_string': 'search_string'
    }

    def __init__(self, id=None, user=None, table_name=None, title=None, columns_visible=None, sort=None, sort_order=None, status=None, search_string=None):
        """
        GetPreferencesData - a model defined in Swagger
        """

        self._id = None
        self._user = None
        self._table_name = None
        self._title = None
        self._columns_visible = None
        self._sort = None
        self._sort_order = None
        self._status = None
        self._search_string = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if user is not None:
          self.user = user
        if table_name is not None:
          self.table_name = table_name
        if title is not None:
          self.title = title
        if columns_visible is not None:
          self.columns_visible = columns_visible
        if sort is not None:
          self.sort = sort
        if sort_order is not None:
          self.sort_order = sort_order
        if status is not None:
          self.status = status
        if search_string is not None:
          self.search_string = search_string

    @property
    def id(self):
        """
        Gets the id of this GetPreferencesData.

        :return: The id of this GetPreferencesData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetPreferencesData.

        :param id: The id of this GetPreferencesData.
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """
        Gets the user of this GetPreferencesData.

        :return: The user of this GetPreferencesData.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this GetPreferencesData.

        :param user: The user of this GetPreferencesData.
        :type: int
        """

        self._user = user

    @property
    def table_name(self):
        """
        Gets the table_name of this GetPreferencesData.

        :return: The table_name of this GetPreferencesData.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this GetPreferencesData.

        :param table_name: The table_name of this GetPreferencesData.
        :type: str
        """

        self._table_name = table_name

    @property
    def title(self):
        """
        Gets the title of this GetPreferencesData.

        :return: The title of this GetPreferencesData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this GetPreferencesData.

        :param title: The title of this GetPreferencesData.
        :type: str
        """

        self._title = title

    @property
    def columns_visible(self):
        """
        Gets the columns_visible of this GetPreferencesData.

        :return: The columns_visible of this GetPreferencesData.
        :rtype: str
        """
        return self._columns_visible

    @columns_visible.setter
    def columns_visible(self, columns_visible):
        """
        Sets the columns_visible of this GetPreferencesData.

        :param columns_visible: The columns_visible of this GetPreferencesData.
        :type: str
        """

        self._columns_visible = columns_visible

    @property
    def sort(self):
        """
        Gets the sort of this GetPreferencesData.

        :return: The sort of this GetPreferencesData.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this GetPreferencesData.

        :param sort: The sort of this GetPreferencesData.
        :type: str
        """

        self._sort = sort

    @property
    def sort_order(self):
        """
        Gets the sort_order of this GetPreferencesData.

        :return: The sort_order of this GetPreferencesData.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this GetPreferencesData.

        :param sort_order: The sort_order of this GetPreferencesData.
        :type: str
        """

        self._sort_order = sort_order

    @property
    def status(self):
        """
        Gets the status of this GetPreferencesData.

        :return: The status of this GetPreferencesData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GetPreferencesData.

        :param status: The status of this GetPreferencesData.
        :type: str
        """

        self._status = status

    @property
    def search_string(self):
        """
        Gets the search_string of this GetPreferencesData.

        :return: The search_string of this GetPreferencesData.
        :rtype: str
        """
        return self._search_string

    @search_string.setter
    def search_string(self, search_string):
        """
        Sets the search_string of this GetPreferencesData.

        :param search_string: The search_string of this GetPreferencesData.
        :type: str
        """

        self._search_string = search_string

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetPreferencesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
