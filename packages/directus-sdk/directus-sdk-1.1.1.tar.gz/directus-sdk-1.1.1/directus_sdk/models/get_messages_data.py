# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetMessagesData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        '_from': 'int',
        'subject': 'str',
        'message': 'str',
        'attachment': 'str',
        'datetime': 'str',
        'response_to': 'str',
        'read': 'int',
        'responses': 'GetMessagesResponses',
        'recipients': 'str',
        'date_updated': 'str'
    }

    attribute_map = {
        'id': 'id',
        '_from': 'from',
        'subject': 'subject',
        'message': 'message',
        'attachment': 'attachment',
        'datetime': 'datetime',
        'response_to': 'response_to',
        'read': 'read',
        'responses': 'responses',
        'recipients': 'recipients',
        'date_updated': 'date_updated'
    }

    def __init__(self, id=None, _from=None, subject=None, message=None, attachment=None, datetime=None, response_to=None, read=None, responses=None, recipients=None, date_updated=None):
        """
        GetMessagesData - a model defined in Swagger
        """

        self._id = None
        self.__from = None
        self._subject = None
        self._message = None
        self._attachment = None
        self._datetime = None
        self._response_to = None
        self._read = None
        self._responses = None
        self._recipients = None
        self._date_updated = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if _from is not None:
          self._from = _from
        if subject is not None:
          self.subject = subject
        if message is not None:
          self.message = message
        if attachment is not None:
          self.attachment = attachment
        if datetime is not None:
          self.datetime = datetime
        if response_to is not None:
          self.response_to = response_to
        if read is not None:
          self.read = read
        if responses is not None:
          self.responses = responses
        if recipients is not None:
          self.recipients = recipients
        if date_updated is not None:
          self.date_updated = date_updated

    @property
    def id(self):
        """
        Gets the id of this GetMessagesData.

        :return: The id of this GetMessagesData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetMessagesData.

        :param id: The id of this GetMessagesData.
        :type: int
        """

        self._id = id

    @property
    def _from(self):
        """
        Gets the _from of this GetMessagesData.

        :return: The _from of this GetMessagesData.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this GetMessagesData.

        :param _from: The _from of this GetMessagesData.
        :type: int
        """

        self.__from = _from

    @property
    def subject(self):
        """
        Gets the subject of this GetMessagesData.

        :return: The subject of this GetMessagesData.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this GetMessagesData.

        :param subject: The subject of this GetMessagesData.
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """
        Gets the message of this GetMessagesData.

        :return: The message of this GetMessagesData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this GetMessagesData.

        :param message: The message of this GetMessagesData.
        :type: str
        """

        self._message = message

    @property
    def attachment(self):
        """
        Gets the attachment of this GetMessagesData.

        :return: The attachment of this GetMessagesData.
        :rtype: str
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """
        Sets the attachment of this GetMessagesData.

        :param attachment: The attachment of this GetMessagesData.
        :type: str
        """

        self._attachment = attachment

    @property
    def datetime(self):
        """
        Gets the datetime of this GetMessagesData.

        :return: The datetime of this GetMessagesData.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """
        Sets the datetime of this GetMessagesData.

        :param datetime: The datetime of this GetMessagesData.
        :type: str
        """

        self._datetime = datetime

    @property
    def response_to(self):
        """
        Gets the response_to of this GetMessagesData.

        :return: The response_to of this GetMessagesData.
        :rtype: str
        """
        return self._response_to

    @response_to.setter
    def response_to(self, response_to):
        """
        Sets the response_to of this GetMessagesData.

        :param response_to: The response_to of this GetMessagesData.
        :type: str
        """

        self._response_to = response_to

    @property
    def read(self):
        """
        Gets the read of this GetMessagesData.

        :return: The read of this GetMessagesData.
        :rtype: int
        """
        return self._read

    @read.setter
    def read(self, read):
        """
        Sets the read of this GetMessagesData.

        :param read: The read of this GetMessagesData.
        :type: int
        """

        self._read = read

    @property
    def responses(self):
        """
        Gets the responses of this GetMessagesData.

        :return: The responses of this GetMessagesData.
        :rtype: GetMessagesResponses
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """
        Sets the responses of this GetMessagesData.

        :param responses: The responses of this GetMessagesData.
        :type: GetMessagesResponses
        """

        self._responses = responses

    @property
    def recipients(self):
        """
        Gets the recipients of this GetMessagesData.

        :return: The recipients of this GetMessagesData.
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """
        Sets the recipients of this GetMessagesData.

        :param recipients: The recipients of this GetMessagesData.
        :type: str
        """

        self._recipients = recipients

    @property
    def date_updated(self):
        """
        Gets the date_updated of this GetMessagesData.

        :return: The date_updated of this GetMessagesData.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """
        Sets the date_updated of this GetMessagesData.

        :param date_updated: The date_updated of this GetMessagesData.
        :type: str
        """

        self._date_updated = date_updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetMessagesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
