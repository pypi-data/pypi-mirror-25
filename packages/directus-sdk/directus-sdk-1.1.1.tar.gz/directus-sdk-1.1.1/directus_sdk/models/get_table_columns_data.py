# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetTableColumnsData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'column_name': 'str',
        'type': 'str',
        'length': 'str',
        'precision': 'int',
        'scale': 'int',
        'sort': 'int',
        'default_value': 'str',
        'nullable': 'bool',
        'key': 'str',
        'extra_options': 'list[object]',
        'options': 'list[object]',
        'table_name': 'str',
        'required': 'bool',
        'ui': 'str',
        'hidden_list': 'bool',
        'hidden_input': 'bool',
        'relationship': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'column_name': 'column_name',
        'type': 'type',
        'length': 'length',
        'precision': 'precision',
        'scale': 'scale',
        'sort': 'sort',
        'default_value': 'default_value',
        'nullable': 'nullable',
        'key': 'key',
        'extra_options': 'extra_options',
        'options': 'options',
        'table_name': 'table_name',
        'required': 'required',
        'ui': 'ui',
        'hidden_list': 'hidden_list',
        'hidden_input': 'hidden_input',
        'relationship': 'relationship',
        'comment': 'comment'
    }

    def __init__(self, name=None, id=None, column_name=None, type=None, length=None, precision=None, scale=None, sort=None, default_value=None, nullable=None, key=None, extra_options=None, options=None, table_name=None, required=None, ui=None, hidden_list=None, hidden_input=None, relationship=None, comment=None):
        """
        GetTableColumnsData - a model defined in Swagger
        """

        self._name = None
        self._id = None
        self._column_name = None
        self._type = None
        self._length = None
        self._precision = None
        self._scale = None
        self._sort = None
        self._default_value = None
        self._nullable = None
        self._key = None
        self._extra_options = None
        self._options = None
        self._table_name = None
        self._required = None
        self._ui = None
        self._hidden_list = None
        self._hidden_input = None
        self._relationship = None
        self._comment = None
        self.discriminator = None

        if name is not None:
          self.name = name
        if id is not None:
          self.id = id
        if column_name is not None:
          self.column_name = column_name
        if type is not None:
          self.type = type
        if length is not None:
          self.length = length
        if precision is not None:
          self.precision = precision
        if scale is not None:
          self.scale = scale
        if sort is not None:
          self.sort = sort
        if default_value is not None:
          self.default_value = default_value
        if nullable is not None:
          self.nullable = nullable
        if key is not None:
          self.key = key
        if extra_options is not None:
          self.extra_options = extra_options
        if options is not None:
          self.options = options
        if table_name is not None:
          self.table_name = table_name
        if required is not None:
          self.required = required
        if ui is not None:
          self.ui = ui
        if hidden_list is not None:
          self.hidden_list = hidden_list
        if hidden_input is not None:
          self.hidden_input = hidden_input
        if relationship is not None:
          self.relationship = relationship
        if comment is not None:
          self.comment = comment

    @property
    def name(self):
        """
        Gets the name of this GetTableColumnsData.

        :return: The name of this GetTableColumnsData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetTableColumnsData.

        :param name: The name of this GetTableColumnsData.
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this GetTableColumnsData.

        :return: The id of this GetTableColumnsData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetTableColumnsData.

        :param id: The id of this GetTableColumnsData.
        :type: str
        """

        self._id = id

    @property
    def column_name(self):
        """
        Gets the column_name of this GetTableColumnsData.

        :return: The column_name of this GetTableColumnsData.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this GetTableColumnsData.

        :param column_name: The column_name of this GetTableColumnsData.
        :type: str
        """

        self._column_name = column_name

    @property
    def type(self):
        """
        Gets the type of this GetTableColumnsData.

        :return: The type of this GetTableColumnsData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GetTableColumnsData.

        :param type: The type of this GetTableColumnsData.
        :type: str
        """

        self._type = type

    @property
    def length(self):
        """
        Gets the length of this GetTableColumnsData.

        :return: The length of this GetTableColumnsData.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this GetTableColumnsData.

        :param length: The length of this GetTableColumnsData.
        :type: str
        """

        self._length = length

    @property
    def precision(self):
        """
        Gets the precision of this GetTableColumnsData.

        :return: The precision of this GetTableColumnsData.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """
        Sets the precision of this GetTableColumnsData.

        :param precision: The precision of this GetTableColumnsData.
        :type: int
        """

        self._precision = precision

    @property
    def scale(self):
        """
        Gets the scale of this GetTableColumnsData.

        :return: The scale of this GetTableColumnsData.
        :rtype: int
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """
        Sets the scale of this GetTableColumnsData.

        :param scale: The scale of this GetTableColumnsData.
        :type: int
        """

        self._scale = scale

    @property
    def sort(self):
        """
        Gets the sort of this GetTableColumnsData.

        :return: The sort of this GetTableColumnsData.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this GetTableColumnsData.

        :param sort: The sort of this GetTableColumnsData.
        :type: int
        """

        self._sort = sort

    @property
    def default_value(self):
        """
        Gets the default_value of this GetTableColumnsData.

        :return: The default_value of this GetTableColumnsData.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this GetTableColumnsData.

        :param default_value: The default_value of this GetTableColumnsData.
        :type: str
        """

        self._default_value = default_value

    @property
    def nullable(self):
        """
        Gets the nullable of this GetTableColumnsData.

        :return: The nullable of this GetTableColumnsData.
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """
        Sets the nullable of this GetTableColumnsData.

        :param nullable: The nullable of this GetTableColumnsData.
        :type: bool
        """

        self._nullable = nullable

    @property
    def key(self):
        """
        Gets the key of this GetTableColumnsData.

        :return: The key of this GetTableColumnsData.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this GetTableColumnsData.

        :param key: The key of this GetTableColumnsData.
        :type: str
        """

        self._key = key

    @property
    def extra_options(self):
        """
        Gets the extra_options of this GetTableColumnsData.

        :return: The extra_options of this GetTableColumnsData.
        :rtype: list[object]
        """
        return self._extra_options

    @extra_options.setter
    def extra_options(self, extra_options):
        """
        Sets the extra_options of this GetTableColumnsData.

        :param extra_options: The extra_options of this GetTableColumnsData.
        :type: list[object]
        """

        self._extra_options = extra_options

    @property
    def options(self):
        """
        Gets the options of this GetTableColumnsData.

        :return: The options of this GetTableColumnsData.
        :rtype: list[object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this GetTableColumnsData.

        :param options: The options of this GetTableColumnsData.
        :type: list[object]
        """

        self._options = options

    @property
    def table_name(self):
        """
        Gets the table_name of this GetTableColumnsData.

        :return: The table_name of this GetTableColumnsData.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this GetTableColumnsData.

        :param table_name: The table_name of this GetTableColumnsData.
        :type: str
        """

        self._table_name = table_name

    @property
    def required(self):
        """
        Gets the required of this GetTableColumnsData.

        :return: The required of this GetTableColumnsData.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this GetTableColumnsData.

        :param required: The required of this GetTableColumnsData.
        :type: bool
        """

        self._required = required

    @property
    def ui(self):
        """
        Gets the ui of this GetTableColumnsData.

        :return: The ui of this GetTableColumnsData.
        :rtype: str
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """
        Sets the ui of this GetTableColumnsData.

        :param ui: The ui of this GetTableColumnsData.
        :type: str
        """

        self._ui = ui

    @property
    def hidden_list(self):
        """
        Gets the hidden_list of this GetTableColumnsData.

        :return: The hidden_list of this GetTableColumnsData.
        :rtype: bool
        """
        return self._hidden_list

    @hidden_list.setter
    def hidden_list(self, hidden_list):
        """
        Sets the hidden_list of this GetTableColumnsData.

        :param hidden_list: The hidden_list of this GetTableColumnsData.
        :type: bool
        """

        self._hidden_list = hidden_list

    @property
    def hidden_input(self):
        """
        Gets the hidden_input of this GetTableColumnsData.

        :return: The hidden_input of this GetTableColumnsData.
        :rtype: bool
        """
        return self._hidden_input

    @hidden_input.setter
    def hidden_input(self, hidden_input):
        """
        Sets the hidden_input of this GetTableColumnsData.

        :param hidden_input: The hidden_input of this GetTableColumnsData.
        :type: bool
        """

        self._hidden_input = hidden_input

    @property
    def relationship(self):
        """
        Gets the relationship of this GetTableColumnsData.

        :return: The relationship of this GetTableColumnsData.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """
        Sets the relationship of this GetTableColumnsData.

        :param relationship: The relationship of this GetTableColumnsData.
        :type: str
        """

        self._relationship = relationship

    @property
    def comment(self):
        """
        Gets the comment of this GetTableColumnsData.

        :return: The comment of this GetTableColumnsData.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this GetTableColumnsData.

        :param comment: The comment of this GetTableColumnsData.
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetTableColumnsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
