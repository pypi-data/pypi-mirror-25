# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetBookmarksData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user': 'int',
        'title': 'str',
        'url': 'str',
        'icon_class': 'str',
        'active': 'str',
        'section': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'title': 'title',
        'url': 'url',
        'icon_class': 'icon_class',
        'active': 'active',
        'section': 'section'
    }

    def __init__(self, id=None, user=None, title=None, url=None, icon_class=None, active=None, section=None):
        """
        GetBookmarksData - a model defined in Swagger
        """

        self._id = None
        self._user = None
        self._title = None
        self._url = None
        self._icon_class = None
        self._active = None
        self._section = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if user is not None:
          self.user = user
        if title is not None:
          self.title = title
        if url is not None:
          self.url = url
        if icon_class is not None:
          self.icon_class = icon_class
        if active is not None:
          self.active = active
        if section is not None:
          self.section = section

    @property
    def id(self):
        """
        Gets the id of this GetBookmarksData.

        :return: The id of this GetBookmarksData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetBookmarksData.

        :param id: The id of this GetBookmarksData.
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """
        Gets the user of this GetBookmarksData.

        :return: The user of this GetBookmarksData.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this GetBookmarksData.

        :param user: The user of this GetBookmarksData.
        :type: int
        """

        self._user = user

    @property
    def title(self):
        """
        Gets the title of this GetBookmarksData.

        :return: The title of this GetBookmarksData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this GetBookmarksData.

        :param title: The title of this GetBookmarksData.
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """
        Gets the url of this GetBookmarksData.

        :return: The url of this GetBookmarksData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this GetBookmarksData.

        :param url: The url of this GetBookmarksData.
        :type: str
        """

        self._url = url

    @property
    def icon_class(self):
        """
        Gets the icon_class of this GetBookmarksData.

        :return: The icon_class of this GetBookmarksData.
        :rtype: str
        """
        return self._icon_class

    @icon_class.setter
    def icon_class(self, icon_class):
        """
        Sets the icon_class of this GetBookmarksData.

        :param icon_class: The icon_class of this GetBookmarksData.
        :type: str
        """

        self._icon_class = icon_class

    @property
    def active(self):
        """
        Gets the active of this GetBookmarksData.

        :return: The active of this GetBookmarksData.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this GetBookmarksData.

        :param active: The active of this GetBookmarksData.
        :type: str
        """

        self._active = active

    @property
    def section(self):
        """
        Gets the section of this GetBookmarksData.

        :return: The section of this GetBookmarksData.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """
        Sets the section of this GetBookmarksData.

        :param section: The section of this GetBookmarksData.
        :type: str
        """

        self._section = section

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetBookmarksData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
