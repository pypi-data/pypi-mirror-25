# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetSettingsDataGlobal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cms_user_auto_sign_out': 'str',
        'project_name': 'str',
        'project_url': 'str',
        'cms_color': 'str',
        'rows_per_page': 'str',
        'cms_thumbnail_url': 'str'
    }

    attribute_map = {
        'cms_user_auto_sign_out': 'cms_user_auto_sign_out',
        'project_name': 'project_name',
        'project_url': 'project_url',
        'cms_color': 'cms_color',
        'rows_per_page': 'rows_per_page',
        'cms_thumbnail_url': 'cms_thumbnail_url'
    }

    def __init__(self, cms_user_auto_sign_out=None, project_name=None, project_url=None, cms_color=None, rows_per_page=None, cms_thumbnail_url=None):
        """
        GetSettingsDataGlobal - a model defined in Swagger
        """

        self._cms_user_auto_sign_out = None
        self._project_name = None
        self._project_url = None
        self._cms_color = None
        self._rows_per_page = None
        self._cms_thumbnail_url = None
        self.discriminator = None

        if cms_user_auto_sign_out is not None:
          self.cms_user_auto_sign_out = cms_user_auto_sign_out
        if project_name is not None:
          self.project_name = project_name
        if project_url is not None:
          self.project_url = project_url
        if cms_color is not None:
          self.cms_color = cms_color
        if rows_per_page is not None:
          self.rows_per_page = rows_per_page
        if cms_thumbnail_url is not None:
          self.cms_thumbnail_url = cms_thumbnail_url

    @property
    def cms_user_auto_sign_out(self):
        """
        Gets the cms_user_auto_sign_out of this GetSettingsDataGlobal.

        :return: The cms_user_auto_sign_out of this GetSettingsDataGlobal.
        :rtype: str
        """
        return self._cms_user_auto_sign_out

    @cms_user_auto_sign_out.setter
    def cms_user_auto_sign_out(self, cms_user_auto_sign_out):
        """
        Sets the cms_user_auto_sign_out of this GetSettingsDataGlobal.

        :param cms_user_auto_sign_out: The cms_user_auto_sign_out of this GetSettingsDataGlobal.
        :type: str
        """

        self._cms_user_auto_sign_out = cms_user_auto_sign_out

    @property
    def project_name(self):
        """
        Gets the project_name of this GetSettingsDataGlobal.

        :return: The project_name of this GetSettingsDataGlobal.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this GetSettingsDataGlobal.

        :param project_name: The project_name of this GetSettingsDataGlobal.
        :type: str
        """

        self._project_name = project_name

    @property
    def project_url(self):
        """
        Gets the project_url of this GetSettingsDataGlobal.

        :return: The project_url of this GetSettingsDataGlobal.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """
        Sets the project_url of this GetSettingsDataGlobal.

        :param project_url: The project_url of this GetSettingsDataGlobal.
        :type: str
        """

        self._project_url = project_url

    @property
    def cms_color(self):
        """
        Gets the cms_color of this GetSettingsDataGlobal.

        :return: The cms_color of this GetSettingsDataGlobal.
        :rtype: str
        """
        return self._cms_color

    @cms_color.setter
    def cms_color(self, cms_color):
        """
        Sets the cms_color of this GetSettingsDataGlobal.

        :param cms_color: The cms_color of this GetSettingsDataGlobal.
        :type: str
        """

        self._cms_color = cms_color

    @property
    def rows_per_page(self):
        """
        Gets the rows_per_page of this GetSettingsDataGlobal.

        :return: The rows_per_page of this GetSettingsDataGlobal.
        :rtype: str
        """
        return self._rows_per_page

    @rows_per_page.setter
    def rows_per_page(self, rows_per_page):
        """
        Sets the rows_per_page of this GetSettingsDataGlobal.

        :param rows_per_page: The rows_per_page of this GetSettingsDataGlobal.
        :type: str
        """

        self._rows_per_page = rows_per_page

    @property
    def cms_thumbnail_url(self):
        """
        Gets the cms_thumbnail_url of this GetSettingsDataGlobal.

        :return: The cms_thumbnail_url of this GetSettingsDataGlobal.
        :rtype: str
        """
        return self._cms_thumbnail_url

    @cms_thumbnail_url.setter
    def cms_thumbnail_url(self, cms_thumbnail_url):
        """
        Sets the cms_thumbnail_url of this GetSettingsDataGlobal.

        :param cms_thumbnail_url: The cms_thumbnail_url of this GetSettingsDataGlobal.
        :type: str
        """

        self._cms_thumbnail_url = cms_thumbnail_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetSettingsDataGlobal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
