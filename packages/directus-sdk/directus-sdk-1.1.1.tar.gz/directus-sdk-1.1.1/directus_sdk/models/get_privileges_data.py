# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetPrivilegesData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'table_name': 'str',
        'group_id': 'int',
        'read_field_blacklist': 'str',
        'write_field_blacklist': 'str',
        'nav_listed': 'int',
        'status_id': 'int',
        'allow_view': 'int',
        'allow_add': 'int',
        'allow_edit': 'int',
        'allow_delete': 'int',
        'allow_alter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'table_name': 'table_name',
        'group_id': 'group_id',
        'read_field_blacklist': 'read_field_blacklist',
        'write_field_blacklist': 'write_field_blacklist',
        'nav_listed': 'nav_listed',
        'status_id': 'status_id',
        'allow_view': 'allow_view',
        'allow_add': 'allow_add',
        'allow_edit': 'allow_edit',
        'allow_delete': 'allow_delete',
        'allow_alter': 'allow_alter'
    }

    def __init__(self, id=None, table_name=None, group_id=None, read_field_blacklist=None, write_field_blacklist=None, nav_listed=None, status_id=None, allow_view=None, allow_add=None, allow_edit=None, allow_delete=None, allow_alter=None):
        """
        GetPrivilegesData - a model defined in Swagger
        """

        self._id = None
        self._table_name = None
        self._group_id = None
        self._read_field_blacklist = None
        self._write_field_blacklist = None
        self._nav_listed = None
        self._status_id = None
        self._allow_view = None
        self._allow_add = None
        self._allow_edit = None
        self._allow_delete = None
        self._allow_alter = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if table_name is not None:
          self.table_name = table_name
        if group_id is not None:
          self.group_id = group_id
        if read_field_blacklist is not None:
          self.read_field_blacklist = read_field_blacklist
        if write_field_blacklist is not None:
          self.write_field_blacklist = write_field_blacklist
        if nav_listed is not None:
          self.nav_listed = nav_listed
        if status_id is not None:
          self.status_id = status_id
        if allow_view is not None:
          self.allow_view = allow_view
        if allow_add is not None:
          self.allow_add = allow_add
        if allow_edit is not None:
          self.allow_edit = allow_edit
        if allow_delete is not None:
          self.allow_delete = allow_delete
        if allow_alter is not None:
          self.allow_alter = allow_alter

    @property
    def id(self):
        """
        Gets the id of this GetPrivilegesData.

        :return: The id of this GetPrivilegesData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetPrivilegesData.

        :param id: The id of this GetPrivilegesData.
        :type: int
        """

        self._id = id

    @property
    def table_name(self):
        """
        Gets the table_name of this GetPrivilegesData.

        :return: The table_name of this GetPrivilegesData.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this GetPrivilegesData.

        :param table_name: The table_name of this GetPrivilegesData.
        :type: str
        """

        self._table_name = table_name

    @property
    def group_id(self):
        """
        Gets the group_id of this GetPrivilegesData.

        :return: The group_id of this GetPrivilegesData.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this GetPrivilegesData.

        :param group_id: The group_id of this GetPrivilegesData.
        :type: int
        """

        self._group_id = group_id

    @property
    def read_field_blacklist(self):
        """
        Gets the read_field_blacklist of this GetPrivilegesData.

        :return: The read_field_blacklist of this GetPrivilegesData.
        :rtype: str
        """
        return self._read_field_blacklist

    @read_field_blacklist.setter
    def read_field_blacklist(self, read_field_blacklist):
        """
        Sets the read_field_blacklist of this GetPrivilegesData.

        :param read_field_blacklist: The read_field_blacklist of this GetPrivilegesData.
        :type: str
        """

        self._read_field_blacklist = read_field_blacklist

    @property
    def write_field_blacklist(self):
        """
        Gets the write_field_blacklist of this GetPrivilegesData.

        :return: The write_field_blacklist of this GetPrivilegesData.
        :rtype: str
        """
        return self._write_field_blacklist

    @write_field_blacklist.setter
    def write_field_blacklist(self, write_field_blacklist):
        """
        Sets the write_field_blacklist of this GetPrivilegesData.

        :param write_field_blacklist: The write_field_blacklist of this GetPrivilegesData.
        :type: str
        """

        self._write_field_blacklist = write_field_blacklist

    @property
    def nav_listed(self):
        """
        Gets the nav_listed of this GetPrivilegesData.

        :return: The nav_listed of this GetPrivilegesData.
        :rtype: int
        """
        return self._nav_listed

    @nav_listed.setter
    def nav_listed(self, nav_listed):
        """
        Sets the nav_listed of this GetPrivilegesData.

        :param nav_listed: The nav_listed of this GetPrivilegesData.
        :type: int
        """

        self._nav_listed = nav_listed

    @property
    def status_id(self):
        """
        Gets the status_id of this GetPrivilegesData.

        :return: The status_id of this GetPrivilegesData.
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """
        Sets the status_id of this GetPrivilegesData.

        :param status_id: The status_id of this GetPrivilegesData.
        :type: int
        """

        self._status_id = status_id

    @property
    def allow_view(self):
        """
        Gets the allow_view of this GetPrivilegesData.

        :return: The allow_view of this GetPrivilegesData.
        :rtype: int
        """
        return self._allow_view

    @allow_view.setter
    def allow_view(self, allow_view):
        """
        Sets the allow_view of this GetPrivilegesData.

        :param allow_view: The allow_view of this GetPrivilegesData.
        :type: int
        """

        self._allow_view = allow_view

    @property
    def allow_add(self):
        """
        Gets the allow_add of this GetPrivilegesData.

        :return: The allow_add of this GetPrivilegesData.
        :rtype: int
        """
        return self._allow_add

    @allow_add.setter
    def allow_add(self, allow_add):
        """
        Sets the allow_add of this GetPrivilegesData.

        :param allow_add: The allow_add of this GetPrivilegesData.
        :type: int
        """

        self._allow_add = allow_add

    @property
    def allow_edit(self):
        """
        Gets the allow_edit of this GetPrivilegesData.

        :return: The allow_edit of this GetPrivilegesData.
        :rtype: int
        """
        return self._allow_edit

    @allow_edit.setter
    def allow_edit(self, allow_edit):
        """
        Sets the allow_edit of this GetPrivilegesData.

        :param allow_edit: The allow_edit of this GetPrivilegesData.
        :type: int
        """

        self._allow_edit = allow_edit

    @property
    def allow_delete(self):
        """
        Gets the allow_delete of this GetPrivilegesData.

        :return: The allow_delete of this GetPrivilegesData.
        :rtype: int
        """
        return self._allow_delete

    @allow_delete.setter
    def allow_delete(self, allow_delete):
        """
        Sets the allow_delete of this GetPrivilegesData.

        :param allow_delete: The allow_delete of this GetPrivilegesData.
        :type: int
        """

        self._allow_delete = allow_delete

    @property
    def allow_alter(self):
        """
        Gets the allow_alter of this GetPrivilegesData.

        :return: The allow_alter of this GetPrivilegesData.
        :rtype: int
        """
        return self._allow_alter

    @allow_alter.setter
    def allow_alter(self, allow_alter):
        """
        Sets the allow_alter of this GetPrivilegesData.

        :param allow_alter: The allow_alter of this GetPrivilegesData.
        :type: int
        """

        self._allow_alter = allow_alter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetPrivilegesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
