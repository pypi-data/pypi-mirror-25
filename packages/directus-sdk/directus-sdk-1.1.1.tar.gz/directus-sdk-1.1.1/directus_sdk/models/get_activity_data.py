# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetActivityData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'identifier': 'str',
        'action': 'str',
        'table_name': 'str',
        'row_id': 'int',
        'user': 'str',
        'datetime': 'str',
        'type': 'str',
        'data': 'str'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'action': 'action',
        'table_name': 'table_name',
        'row_id': 'row_id',
        'user': 'user',
        'datetime': 'datetime',
        'type': 'type',
        'data': 'data'
    }

    def __init__(self, id=None, identifier=None, action=None, table_name=None, row_id=None, user=None, datetime=None, type=None, data=None):
        """
        GetActivityData - a model defined in Swagger
        """

        self._id = None
        self._identifier = None
        self._action = None
        self._table_name = None
        self._row_id = None
        self._user = None
        self._datetime = None
        self._type = None
        self._data = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if identifier is not None:
          self.identifier = identifier
        if action is not None:
          self.action = action
        if table_name is not None:
          self.table_name = table_name
        if row_id is not None:
          self.row_id = row_id
        if user is not None:
          self.user = user
        if datetime is not None:
          self.datetime = datetime
        if type is not None:
          self.type = type
        if data is not None:
          self.data = data

    @property
    def id(self):
        """
        Gets the id of this GetActivityData.

        :return: The id of this GetActivityData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetActivityData.

        :param id: The id of this GetActivityData.
        :type: int
        """

        self._id = id

    @property
    def identifier(self):
        """
        Gets the identifier of this GetActivityData.

        :return: The identifier of this GetActivityData.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this GetActivityData.

        :param identifier: The identifier of this GetActivityData.
        :type: str
        """

        self._identifier = identifier

    @property
    def action(self):
        """
        Gets the action of this GetActivityData.

        :return: The action of this GetActivityData.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this GetActivityData.

        :param action: The action of this GetActivityData.
        :type: str
        """

        self._action = action

    @property
    def table_name(self):
        """
        Gets the table_name of this GetActivityData.

        :return: The table_name of this GetActivityData.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this GetActivityData.

        :param table_name: The table_name of this GetActivityData.
        :type: str
        """

        self._table_name = table_name

    @property
    def row_id(self):
        """
        Gets the row_id of this GetActivityData.

        :return: The row_id of this GetActivityData.
        :rtype: int
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """
        Sets the row_id of this GetActivityData.

        :param row_id: The row_id of this GetActivityData.
        :type: int
        """

        self._row_id = row_id

    @property
    def user(self):
        """
        Gets the user of this GetActivityData.

        :return: The user of this GetActivityData.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this GetActivityData.

        :param user: The user of this GetActivityData.
        :type: str
        """

        self._user = user

    @property
    def datetime(self):
        """
        Gets the datetime of this GetActivityData.

        :return: The datetime of this GetActivityData.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """
        Sets the datetime of this GetActivityData.

        :param datetime: The datetime of this GetActivityData.
        :type: str
        """

        self._datetime = datetime

    @property
    def type(self):
        """
        Gets the type of this GetActivityData.

        :return: The type of this GetActivityData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GetActivityData.

        :param type: The type of this GetActivityData.
        :type: str
        """

        self._type = type

    @property
    def data(self):
        """
        Gets the data of this GetActivityData.

        :return: The data of this GetActivityData.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this GetActivityData.

        :param data: The data of this GetActivityData.
        :type: str
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetActivityData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
