# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class PreferencesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_preferences(self, table_id, **kwargs):
        """
        Returns table preferences
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_preferences(table_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str table_id: ID of table to return rows from (required)
        :return: GetPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_preferences_with_http_info(table_id, **kwargs)
        else:
            (data) = self.get_preferences_with_http_info(table_id, **kwargs)
            return data

    def get_preferences_with_http_info(self, table_id, **kwargs):
        """
        Returns table preferences
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_preferences_with_http_info(table_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str table_id: ID of table to return rows from (required)
        :return: GetPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if ('table_id' not in params) or (params['table_id'] is None):
            raise ValueError("Missing the required parameter `table_id` when calling `get_preferences`")


        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/tables/{tableId}/preferences', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetPreferences',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_preferences(self, table_id, **kwargs):
        """
        Update table preferences
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_preferences(table_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str table_id: ID of table to return rows from (required)
        :param str id: Preference's Unique Identification number
        :param str table_name: Name of table to add
        :param str columns_visible: List of visible columns, separated by commas
        :param int sort: The sort order of the column used to override the column order in the schema
        :param str sort_order: Sort Order (ASC=Ascending or DESC=Descending)
        :param str status: List of status values. separated by comma
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_preferences_with_http_info(table_id, **kwargs)
        else:
            (data) = self.update_preferences_with_http_info(table_id, **kwargs)
            return data

    def update_preferences_with_http_info(self, table_id, **kwargs):
        """
        Update table preferences
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_preferences_with_http_info(table_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str table_id: ID of table to return rows from (required)
        :param str id: Preference's Unique Identification number
        :param str table_name: Name of table to add
        :param str columns_visible: List of visible columns, separated by commas
        :param int sort: The sort order of the column used to override the column order in the schema
        :param str sort_order: Sort Order (ASC=Ascending or DESC=Descending)
        :param str status: List of status values. separated by comma
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['table_id', 'id', 'table_name', 'columns_visible', 'sort', 'sort_order', 'status']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'table_id' is set
        if ('table_id' not in params) or (params['table_id'] is None):
            raise ValueError("Missing the required parameter `table_id` when calling `update_preferences`")


        collection_formats = {}

        path_params = {}
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))
        if 'table_name' in params:
            form_params.append(('table_name', params['table_name']))
        if 'columns_visible' in params:
            form_params.append(('columns_visible', params['columns_visible']))
        if 'sort' in params:
            form_params.append(('sort', params['sort']))
        if 'sort_order' in params:
            form_params.append(('sort_order', params['sort_order']))
        if 'status' in params:
            form_params.append(('status', params['status']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/tables/{tableId}/preferences', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
