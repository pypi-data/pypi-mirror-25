# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class FilesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_file(self, **kwargs):
        """
        Creates file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_file(async=True)
        >>> result = thread.get()

        :param async bool
        :param str data: The file's Base64 content
        :param int active: The file's status, default options are: 1 (active), 2 (inactive), 0 (deleted)
        :param str name: The name used in the filesystem, including the extension, eg: \"my-file.jpg\". This is generated by the system based on Global Settings
        :param str title: The file's title
        :param str location: Location of where the picture was taken, if any. Pulled from the IPTC location when available
        :param str type: The file's mime type
        :param str tags: A CSV of tags for this file. Pulled from the IPTC keywords when available
        :param str caption: The file's caption or description. Pulled from the IPTC description when available
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_file_with_http_info(**kwargs)
        else:
            (data) = self.create_file_with_http_info(**kwargs)
            return data

    def create_file_with_http_info(self, **kwargs):
        """
        Creates file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_file_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str data: The file's Base64 content
        :param int active: The file's status, default options are: 1 (active), 2 (inactive), 0 (deleted)
        :param str name: The name used in the filesystem, including the extension, eg: \"my-file.jpg\". This is generated by the system based on Global Settings
        :param str title: The file's title
        :param str location: Location of where the picture was taken, if any. Pulled from the IPTC location when available
        :param str type: The file's mime type
        :param str tags: A CSV of tags for this file. Pulled from the IPTC keywords when available
        :param str caption: The file's caption or description. Pulled from the IPTC description when available
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'active', 'name', 'title', 'location', 'type', 'tags', 'caption']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_file" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))
        if 'active' in params:
            form_params.append(('active', params['active']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'location' in params:
            form_params.append(('location', params['location']))
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'tags' in params:
            form_params.append(('tags', params['tags']))
        if 'caption' in params:
            form_params.append(('caption', params['caption']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/files', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_file(self, file_id, **kwargs):
        """
        Returns specific file by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_file(file_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int file_id: ID of file to get (required)
        :return: GetFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_file_with_http_info(file_id, **kwargs)
        else:
            (data) = self.get_file_with_http_info(file_id, **kwargs)
            return data

    def get_file_with_http_info(self, file_id, **kwargs):
        """
        Returns specific file by id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_file_with_http_info(file_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int file_id: ID of file to get (required)
        :return: GetFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `get_file`")


        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/files/{fileId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetFile',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_files(self, **kwargs):
        """
        Returns files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_files(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_files_with_http_info(**kwargs)
        else:
            (data) = self.get_files_with_http_info(**kwargs)
            return data

    def get_files_with_http_info(self, **kwargs):
        """
        Returns files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_files_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_files" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/files', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetFiles',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_file(self, file_id, **kwargs):
        """
        Creates file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_file(file_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int file_id: ID of file to get (required)
        :param str data: The file's Base64 content
        :param int active: The file's status, default options are: 1 (active), 2 (inactive), 0 (deleted)
        :param str name: The name used in the filesystem, including the extension, eg: \"my-file.jpg\". This is generated by the system based on Global Settings
        :param str title: The file's title
        :param str location: Location of where the picture was taken, if any. Pulled from the IPTC location when available
        :param str type: The file's mime type
        :param str tags: A CSV of tags for this file. Pulled from the IPTC keywords when available
        :param str caption: The file's caption or description. Pulled from the IPTC description when available
        :param str url: File url relativity to Directus base url
        :param int width: File width
        :param int height: File height
        :param int size: File size in bytes
        :param str embed_id: ID of the embedded file. Ex Youtube ID
        :param int user: File owner (who uploaded the file)
        :param str date_uploaded: File uploaded date. TODO It should be an DateTime object
        :param str storage_adapter: Storage adapter used to upload the file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_file_with_http_info(file_id, **kwargs)
        else:
            (data) = self.update_file_with_http_info(file_id, **kwargs)
            return data

    def update_file_with_http_info(self, file_id, **kwargs):
        """
        Creates file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_file_with_http_info(file_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int file_id: ID of file to get (required)
        :param str data: The file's Base64 content
        :param int active: The file's status, default options are: 1 (active), 2 (inactive), 0 (deleted)
        :param str name: The name used in the filesystem, including the extension, eg: \"my-file.jpg\". This is generated by the system based on Global Settings
        :param str title: The file's title
        :param str location: Location of where the picture was taken, if any. Pulled from the IPTC location when available
        :param str type: The file's mime type
        :param str tags: A CSV of tags for this file. Pulled from the IPTC keywords when available
        :param str caption: The file's caption or description. Pulled from the IPTC description when available
        :param str url: File url relativity to Directus base url
        :param int width: File width
        :param int height: File height
        :param int size: File size in bytes
        :param str embed_id: ID of the embedded file. Ex Youtube ID
        :param int user: File owner (who uploaded the file)
        :param str date_uploaded: File uploaded date. TODO It should be an DateTime object
        :param str storage_adapter: Storage adapter used to upload the file
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'data', 'active', 'name', 'title', 'location', 'type', 'tags', 'caption', 'url', 'width', 'height', 'size', 'embed_id', 'user', 'date_uploaded', 'storage_adapter']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params) or (params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `update_file`")


        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileId'] = params['file_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))
        if 'active' in params:
            form_params.append(('active', params['active']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'location' in params:
            form_params.append(('location', params['location']))
        if 'type' in params:
            form_params.append(('type', params['type']))
        if 'tags' in params:
            form_params.append(('tags', params['tags']))
        if 'caption' in params:
            form_params.append(('caption', params['caption']))
        if 'url' in params:
            form_params.append(('url', params['url']))
        if 'width' in params:
            form_params.append(('width', params['width']))
        if 'height' in params:
            form_params.append(('height', params['height']))
        if 'size' in params:
            form_params.append(('size', params['size']))
        if 'embed_id' in params:
            form_params.append(('embed_id', params['embed_id']))
        if 'user' in params:
            form_params.append(('user', params['user']))
        if 'date_uploaded' in params:
            form_params.append(('date_uploaded', params['date_uploaded']))
        if 'storage_adapter' in params:
            form_params.append(('storage_adapter', params['storage_adapter']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/files/{fileId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
