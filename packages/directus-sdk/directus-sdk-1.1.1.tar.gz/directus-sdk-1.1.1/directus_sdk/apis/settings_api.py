# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class SettingsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_settings(self, **kwargs):
        """
        Returns settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_settings(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_settings_with_http_info(**kwargs)
        else:
            (data) = self.get_settings_with_http_info(**kwargs)
            return data

    def get_settings_with_http_info(self, **kwargs):
        """
        Returns settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_settings_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/settings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetSettings',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_settings_for(self, collection_name, **kwargs):
        """
        Returns settings for collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_settings_for(collection_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param int collection_name: Name of collection to return settings for (required)
        :return: GetSettingsFor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_settings_for_with_http_info(collection_name, **kwargs)
        else:
            (data) = self.get_settings_for_with_http_info(collection_name, **kwargs)
            return data

    def get_settings_for_with_http_info(self, collection_name, **kwargs):
        """
        Returns settings for collection
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_settings_for_with_http_info(collection_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param int collection_name: Name of collection to return settings for (required)
        :return: GetSettingsFor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_for" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_name' is set
        if ('collection_name' not in params) or (params['collection_name'] is None):
            raise ValueError("Missing the required parameter `collection_name` when calling `get_settings_for`")


        collection_formats = {}

        path_params = {}
        if 'collection_name' in params:
            path_params['collectionName'] = params['collection_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/settings/{collectionName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetSettingsFor',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_settings(self, collection_name, custom_data, **kwargs):
        """
        Update settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_settings(collection_name, custom_data, async=True)
        >>> result = thread.get()

        :param async bool
        :param int collection_name: Name of collection to return settings for (required)
        :param str custom_data: Data based on your specific schema eg: active=1&title=LoremIpsum (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_settings_with_http_info(collection_name, custom_data, **kwargs)
        else:
            (data) = self.update_settings_with_http_info(collection_name, custom_data, **kwargs)
            return data

    def update_settings_with_http_info(self, collection_name, custom_data, **kwargs):
        """
        Update settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_settings_with_http_info(collection_name, custom_data, async=True)
        >>> result = thread.get()

        :param async bool
        :param int collection_name: Name of collection to return settings for (required)
        :param str custom_data: Data based on your specific schema eg: active=1&title=LoremIpsum (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_name', 'custom_data']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_name' is set
        if ('collection_name' not in params) or (params['collection_name'] is None):
            raise ValueError("Missing the required parameter `collection_name` when calling `update_settings`")
        # verify the required parameter 'custom_data' is set
        if ('custom_data' not in params) or (params['custom_data'] is None):
            raise ValueError("Missing the required parameter `custom_data` when calling `update_settings`")


        collection_formats = {}

        path_params = {}
        if 'collection_name' in params:
            path_params['collectionName'] = params['collection_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_data' in params:
            body_params = params['custom_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/settings/{collectionName}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
