# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class BookmarksApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_bookmark(self, **kwargs):
        """
        Create a column in a given table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_bookmark(async=True)
        >>> result = thread.get()

        :param async bool
        :param str user: [Directus user id] This assigns the bookmark to a specific user (there's a ticket to allow for \"global\" bookmarks using NULL) (Only using local connection)
        :param str title: The text to display in the navigation menu
        :param str url: The path to navigate to when clicked, relative to the Directus root
        :param str icon_class: Deprecated
        :param str active: Deprecated
        :param str section: [\"search\" or \"other\"] Which nav section to show the link within. User generated bookmarks use \"search\", while all system links go within \"other\"
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_bookmark_with_http_info(**kwargs)
        else:
            (data) = self.add_bookmark_with_http_info(**kwargs)
            return data

    def add_bookmark_with_http_info(self, **kwargs):
        """
        Create a column in a given table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_bookmark_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str user: [Directus user id] This assigns the bookmark to a specific user (there's a ticket to allow for \"global\" bookmarks using NULL) (Only using local connection)
        :param str title: The text to display in the navigation menu
        :param str url: The path to navigate to when clicked, relative to the Directus root
        :param str icon_class: Deprecated
        :param str active: Deprecated
        :param str section: [\"search\" or \"other\"] Which nav section to show the link within. User generated bookmarks use \"search\", while all system links go within \"other\"
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'title', 'url', 'icon_class', 'active', 'section']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bookmark" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user' in params:
            form_params.append(('user', params['user']))
        if 'title' in params:
            form_params.append(('title', params['title']))
        if 'url' in params:
            form_params.append(('url', params['url']))
        if 'icon_class' in params:
            form_params.append(('icon_class', params['icon_class']))
        if 'active' in params:
            form_params.append(('active', params['active']))
        if 'section' in params:
            form_params.append(('section', params['section']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/bookmarks', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_bookmark(self, bookmark_id, **kwargs):
        """
        Deletes specific bookmark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bookmark(bookmark_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bookmark_id: ID of table to return rows from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_bookmark_with_http_info(bookmark_id, **kwargs)
        else:
            (data) = self.delete_bookmark_with_http_info(bookmark_id, **kwargs)
            return data

    def delete_bookmark_with_http_info(self, bookmark_id, **kwargs):
        """
        Deletes specific bookmark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bookmark_with_http_info(bookmark_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bookmark_id: ID of table to return rows from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bookmark_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bookmark" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bookmark_id' is set
        if ('bookmark_id' not in params) or (params['bookmark_id'] is None):
            raise ValueError("Missing the required parameter `bookmark_id` when calling `delete_bookmark`")


        collection_formats = {}

        path_params = {}
        if 'bookmark_id' in params:
            path_params['bookmarkId'] = params['bookmark_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/bookmarks/{bookmarkId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bookmark(self, bookmark_id, **kwargs):
        """
        Returns specific bookmark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bookmark(bookmark_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bookmark_id: ID of table to return rows from (required)
        :return: GetBookmark
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bookmark_with_http_info(bookmark_id, **kwargs)
        else:
            (data) = self.get_bookmark_with_http_info(bookmark_id, **kwargs)
            return data

    def get_bookmark_with_http_info(self, bookmark_id, **kwargs):
        """
        Returns specific bookmark
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bookmark_with_http_info(bookmark_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bookmark_id: ID of table to return rows from (required)
        :return: GetBookmark
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bookmark_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bookmark" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bookmark_id' is set
        if ('bookmark_id' not in params) or (params['bookmark_id'] is None):
            raise ValueError("Missing the required parameter `bookmark_id` when calling `get_bookmark`")


        collection_formats = {}

        path_params = {}
        if 'bookmark_id' in params:
            path_params['bookmarkId'] = params['bookmark_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/bookmarks/{bookmarkId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetBookmark',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bookmarks(self, **kwargs):
        """
        Returns bookmarks
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bookmarks(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetBookmarks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bookmarks_with_http_info(**kwargs)
        else:
            (data) = self.get_bookmarks_with_http_info(**kwargs)
            return data

    def get_bookmarks_with_http_info(self, **kwargs):
        """
        Returns bookmarks
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bookmarks_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetBookmarks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bookmarks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/bookmarks', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetBookmarks',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bookmarks_self(self, **kwargs):
        """
        Returns bookmarks of current user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bookmarks_self(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetBookmarks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bookmarks_self_with_http_info(**kwargs)
        else:
            (data) = self.get_bookmarks_self_with_http_info(**kwargs)
            return data

    def get_bookmarks_self_with_http_info(self, **kwargs):
        """
        Returns bookmarks of current user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bookmarks_self_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetBookmarks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bookmarks_self" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/bookmarks/self', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetBookmarks',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
