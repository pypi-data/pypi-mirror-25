# coding: utf-8

"""
    directus.io

    API for directus.io

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class GroupsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_group(self, **kwargs):
        """
        Add a new group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_group(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of group to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_group_with_http_info(**kwargs)
        else:
            (data) = self.add_group_with_http_info(**kwargs)
            return data

    def add_group_with_http_info(self, **kwargs):
        """
        Add a new group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_group_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of group to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/groups', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_privilege(self, group_id, **kwargs):
        """
        Create new table privileges for the specified user group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_privilege(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :param int id: Privilege's Unique Identification number
        :param str table_name: Name of table to add
        :param int allow_add: Permission to add/create entries in the table (See values below)
        :param int allow_edit: Permission to edit/update entries in the table (See values below)
        :param int allow_delete: Permission to delete/remove entries in the table (See values below)
        :param int allow_view: Permission to view/read entries in the table (See values below)
        :param int allow_alter: Permission to add/create entries in the table (See values below)
        :param bool nav_listed: If the table should be visible in the sidebar for this user group
        :param str read_field_blacklist: A CSV of column names that the group can't view (read)
        :param str write_field_blacklist: A CSV of column names that the group can't edit (update)
        :param str status_id: State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_privilege_with_http_info(group_id, **kwargs)
        else:
            (data) = self.add_privilege_with_http_info(group_id, **kwargs)
            return data

    def add_privilege_with_http_info(self, group_id, **kwargs):
        """
        Create new table privileges for the specified user group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_privilege_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :param int id: Privilege's Unique Identification number
        :param str table_name: Name of table to add
        :param int allow_add: Permission to add/create entries in the table (See values below)
        :param int allow_edit: Permission to edit/update entries in the table (See values below)
        :param int allow_delete: Permission to delete/remove entries in the table (See values below)
        :param int allow_view: Permission to view/read entries in the table (See values below)
        :param int allow_alter: Permission to add/create entries in the table (See values below)
        :param bool nav_listed: If the table should be visible in the sidebar for this user group
        :param str read_field_blacklist: A CSV of column names that the group can't view (read)
        :param str write_field_blacklist: A CSV of column names that the group can't edit (update)
        :param str status_id: State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'id', 'table_name', 'allow_add', 'allow_edit', 'allow_delete', 'allow_view', 'allow_alter', 'nav_listed', 'read_field_blacklist', 'write_field_blacklist', 'status_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_privilege`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))
        if 'table_name' in params:
            form_params.append(('table_name', params['table_name']))
        if 'allow_add' in params:
            form_params.append(('allow_add', params['allow_add']))
        if 'allow_edit' in params:
            form_params.append(('allow_edit', params['allow_edit']))
        if 'allow_delete' in params:
            form_params.append(('allow_delete', params['allow_delete']))
        if 'allow_view' in params:
            form_params.append(('allow_view', params['allow_view']))
        if 'allow_alter' in params:
            form_params.append(('allow_alter', params['allow_alter']))
        if 'nav_listed' in params:
            form_params.append(('nav_listed', params['nav_listed']))
        if 'read_field_blacklist' in params:
            form_params.append(('read_field_blacklist', params['read_field_blacklist']))
        if 'write_field_blacklist' in params:
            form_params.append(('write_field_blacklist', params['write_field_blacklist']))
        if 'status_id' in params:
            form_params.append(('status_id', params['status_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/privileges/{groupId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_group(self, group_id, **kwargs):
        """
        Returns specific group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_group(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :return: GetGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_group_with_http_info(group_id, **kwargs)
        else:
            (data) = self.get_group_with_http_info(group_id, **kwargs)
            return data

    def get_group_with_http_info(self, group_id, **kwargs):
        """
        Returns specific group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_group_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :return: GetGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/groups/{groupId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetGroup',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups(self, **kwargs):
        """
        Returns groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_groups(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_groups_with_http_info(**kwargs)
        else:
            (data) = self.get_groups_with_http_info(**kwargs)
            return data

    def get_groups_with_http_info(self, **kwargs):
        """
        Returns groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_groups_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GetGroups
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetGroups',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_privileges(self, group_id, **kwargs):
        """
        Returns group privileges
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_privileges(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :return: GetPrivileges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_privileges_with_http_info(group_id, **kwargs)
        else:
            (data) = self.get_privileges_with_http_info(group_id, **kwargs)
            return data

    def get_privileges_with_http_info(self, group_id, **kwargs):
        """
        Returns group privileges
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_privileges_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :return: GetPrivileges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privileges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_privileges`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/privileges/{groupId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetPrivileges',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_privileges_for_table(self, group_id, table_name_or_privilege_id, **kwargs):
        """
        Returns group privileges by tableName
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_privileges_for_table(group_id, table_name_or_privilege_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :param str table_name_or_privilege_id: ID of privileges or Table Name to use (required)
        :return: GetPrivilegesForTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_privileges_for_table_with_http_info(group_id, table_name_or_privilege_id, **kwargs)
        else:
            (data) = self.get_privileges_for_table_with_http_info(group_id, table_name_or_privilege_id, **kwargs)
            return data

    def get_privileges_for_table_with_http_info(self, group_id, table_name_or_privilege_id, **kwargs):
        """
        Returns group privileges by tableName
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_privileges_for_table_with_http_info(group_id, table_name_or_privilege_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :param str table_name_or_privilege_id: ID of privileges or Table Name to use (required)
        :return: GetPrivilegesForTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'table_name_or_privilege_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privileges_for_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_privileges_for_table`")
        # verify the required parameter 'table_name_or_privilege_id' is set
        if ('table_name_or_privilege_id' not in params) or (params['table_name_or_privilege_id'] is None):
            raise ValueError("Missing the required parameter `table_name_or_privilege_id` when calling `get_privileges_for_table`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']
        if 'table_name_or_privilege_id' in params:
            path_params['tableNameOrPrivilegeId'] = params['table_name_or_privilege_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/privileges/{groupId}/{tableNameOrPrivilegeId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetPrivilegesForTable',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_privileges(self, group_id, table_name_or_privilege_id, **kwargs):
        """
        Update privileges by privilegeId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_privileges(group_id, table_name_or_privilege_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :param str table_name_or_privilege_id: ID of privileges or Table Name to use (required)
        :param str privileges_id: ubique privilege ID
        :param str group_id2: ID of group to return
        :param str table_name: Name of table to add
        :param int allow_add: Permission to add/create entries in the table (See values below)
        :param int allow_edit: Permission to edit/update entries in the table (See values below)
        :param int allow_delete: Permission to delete/remove entries in the table (See values below)
        :param int allow_view: Permission to view/read entries in the table (See values below)
        :param int allow_alter: Permission to add/create entries in the table (See values below)
        :param bool nav_listed: If the table should be visible in the sidebar for this user group
        :param str read_field_blacklist: A CSV of column names that the group can't view (read)
        :param str write_field_blacklist: A CSV of column names that the group can't edit (update)
        :param str status_id: State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_privileges_with_http_info(group_id, table_name_or_privilege_id, **kwargs)
        else:
            (data) = self.update_privileges_with_http_info(group_id, table_name_or_privilege_id, **kwargs)
            return data

    def update_privileges_with_http_info(self, group_id, table_name_or_privilege_id, **kwargs):
        """
        Update privileges by privilegeId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_privileges_with_http_info(group_id, table_name_or_privilege_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: ID of group to return (required)
        :param str table_name_or_privilege_id: ID of privileges or Table Name to use (required)
        :param str privileges_id: ubique privilege ID
        :param str group_id2: ID of group to return
        :param str table_name: Name of table to add
        :param int allow_add: Permission to add/create entries in the table (See values below)
        :param int allow_edit: Permission to edit/update entries in the table (See values below)
        :param int allow_delete: Permission to delete/remove entries in the table (See values below)
        :param int allow_view: Permission to view/read entries in the table (See values below)
        :param int allow_alter: Permission to add/create entries in the table (See values below)
        :param bool nav_listed: If the table should be visible in the sidebar for this user group
        :param str read_field_blacklist: A CSV of column names that the group can't view (read)
        :param str write_field_blacklist: A CSV of column names that the group can't edit (update)
        :param str status_id: State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'table_name_or_privilege_id', 'privileges_id', 'group_id2', 'table_name', 'allow_add', 'allow_edit', 'allow_delete', 'allow_view', 'allow_alter', 'nav_listed', 'read_field_blacklist', 'write_field_blacklist', 'status_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privileges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_privileges`")
        # verify the required parameter 'table_name_or_privilege_id' is set
        if ('table_name_or_privilege_id' not in params) or (params['table_name_or_privilege_id'] is None):
            raise ValueError("Missing the required parameter `table_name_or_privilege_id` when calling `update_privileges`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']
        if 'table_name_or_privilege_id' in params:
            path_params['tableNameOrPrivilegeId'] = params['table_name_or_privilege_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'privileges_id' in params:
            form_params.append(('privileges_id', params['privileges_id']))
        if 'group_id2' in params:
            form_params.append(('group_id', params['group_id2']))
        if 'table_name' in params:
            form_params.append(('table_name', params['table_name']))
        if 'allow_add' in params:
            form_params.append(('allow_add', params['allow_add']))
        if 'allow_edit' in params:
            form_params.append(('allow_edit', params['allow_edit']))
        if 'allow_delete' in params:
            form_params.append(('allow_delete', params['allow_delete']))
        if 'allow_view' in params:
            form_params.append(('allow_view', params['allow_view']))
        if 'allow_alter' in params:
            form_params.append(('allow_alter', params['allow_alter']))
        if 'nav_listed' in params:
            form_params.append(('nav_listed', params['nav_listed']))
        if 'read_field_blacklist' in params:
            form_params.append(('read_field_blacklist', params['read_field_blacklist']))
        if 'write_field_blacklist' in params:
            form_params.append(('write_field_blacklist', params['write_field_blacklist']))
        if 'status_id' in params:
            form_params.append(('status_id', params['status_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api('/privileges/{groupId}/{tableNameOrPrivilegeId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
