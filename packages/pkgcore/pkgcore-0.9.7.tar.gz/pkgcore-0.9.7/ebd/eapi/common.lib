# Copyright: 2011-2012 Brian Harring <ferringb@gmail.com>
# license GPL2/BSD 3

use() {
	# EAPI 5 and up
	if ${PKGCORE_PROFILE_IUSE_INJECTION} && \
			[[ ! ${1#!} =~ ${PKGCORE_IUSE_EFFECTIVE} ]]; then
		die "USE flag '${1#!}' not in IUSE for ${CATEGORY}/${PF}"
	fi

	# Ensure USE is split on normal IFS.
	local IFS=$' \t\n'

	if [[ ${1:0:1} == "!" ]]; then
		! __safe_has "${1#!}" ${USE}
	else
		__safe_has "$1" ${USE}
	fi
}

usev() {
	if use "$1"; then
		echo "${1#!}"
		return 0
	fi
	return 1
}

useq() {
	use "$@"
}

use_with() {
	if [[ -z $1 ]]; then
		echo "!!! use_with() called without a parameter." >&2
		echo "!!! use_with <USEFLAG> [<flagname> [value]]" >&2
		return
	fi

	local uw_suffix=""
	if __safe_has "${EAPI}" 0 1 2 3; then
		uw_suffix=${3:+=$3}
	else
		uw_suffix=${3+=$3}
	fi

	local uword=$2
	if [[ -z ${uword} ]]; then
		uword=$1
	fi

	if use $1; then
		echo "--with-${uword}${uw_suffix}"
		return 0
	fi
	echo "--without-${uword}"
	return 1
}

use_enable() {
	if [[ -z $1 ]]; then
		echo "!!! use_enable() called without a parameter." >&2
		echo "!!! use_enable <USEFLAG> [<flagname> [value]]" >&2
		return
	fi

	local ue_suffix=""
	if __safe_has "${EAPI}" 0 1 2 3; then
		ue_suffix=${3:+=$3}
	else
		ue_suffix=${3+=$3}
	fi

	local uword=$2
	if [[ -z ${uword} ]]; then
		uword=$1
	fi

	if use "$1"; then
		echo "--enable-${uword}${ue_suffix}"
		return 0
	fi
	echo "--disable-${uword}"
	return 1
}

econf() {
	local ret
	ECONF_SOURCE=${ECONF_SOURCE:-.}
	if [[ ! -x ${ECONF_SOURCE}/configure ]]; then
		[[ -f ${ECONF_SOURCE}/configure ]] && die "configure script isn't executable"
		die "no configure script found"
	fi

	if [[ -d /usr/share/gnuconfig ]]; then
		local x
		find "${WORKDIR}" -type f \( -name config.guess -o -name config.sub \) | \
			while read x; do
			echo "econf: replacing ${x} with /usr/share/gnuconfig/${x##*/}"
			cp -f "/usr/share/gnuconfig/${x##*/}" "${x}"
		done
	fi

	# if the profile defines a location to install libs to aside from default, pass it on.
	# if the ebuild passes in --libdir, they're responsible for the conf_libdir fun.
	local CONF_LIBDIR=$(__get_libdir)
	if [[ -n ${CONF_LIBDIR} && $* != *"--libdir="* ]]; then
		if [[ $* == *"--exec-prefix="* ]]; then
			local args=$(echo $*)
			local -a prefix=( $(echo ${args/*--exec-prefix[= ]}) )
			CONF_PREFIX=${prefix/--*}
			[[ ${CONF_PREFIX} != /* ]] && CONF_PREFIX=/${CONF_PREFIX}
		elif [[ $* == *"--prefix="* ]]; then
			local args=$(echo $*)
			local -a pref=( $(echo ${args/*--prefix[= ]}) )
			CONF_PREFIX=${prefix/--*}
			[[ ${CONF_PREFIX} != /* ]] && CONF_PREFIX=/${CONF_PREFIX}
		else
			CONF_PREFIX=/usr
		fi
		export CONF_PREFIX
		[[ ${CONF_LIBDIR} != /* ]] && CONF_LIBDIR=/${CONF_LIBDIR}
		set -- --libdir="$(__strip_duplicate_slashes "${CONF_PREFIX}${CONF_LIBDIR}")" "$@"
	fi

	if ${PKGCORE_ECONF_DISABLE_DEPENDENCY_TRACKING} || \
			${PKGCORE_ECONF_DISABLE_SILENT_RULES} || \
			${PKGCORE_ECONF_DOCDIR_AND_HTMLDIR}; then
		local help_text=$("${ECONF_SOURCE}/configure" --help 2> /dev/null)
		local extra_args=()

		# EAPI 4 and up.
		if ${PKGCORE_ECONF_DISABLE_DEPENDENCY_TRACKING} && \
				[[ ${help_text} == *"--disable-dependency-tracking"* ]]; then
			extra_args+=( --disable-dependency-tracking )
		fi

		# EAPI 5 and up.
		if ${PKGCORE_ECONF_DISABLE_SILENT_RULES} && \
				[[ ${help_text} == *"--disable-silent-rules"* ]]; then
			extra_args+=( --disable-silent-rules )
		fi

		# EAPI 6 and up.
		if ${PKGCORE_ECONF_DOCDIR_AND_HTMLDIR}; then
			if [[ ${help_text} == *"--docdir"* ]]; then
				extra_args+=( --docdir="${EPREFIX}"/usr/share/doc/${PF} )
			fi
			if [[ ${help_text} == *"--htmldir"* ]]; then
				extra_args+=( --htmldir="${EPREFIX}"/usr/share/doc/${PF}/html )
			fi
		fi

		set -- "${extra_args[@]}" "$@"
		unset -v extra_args
		unset -v help_text
	fi

	# Reset IFS since we're interpreting user supplied EXTRA_ECONF.
	local IFS=$' \t\n'
	set -- "${ECONF_SOURCE}/configure" \
		--prefix="${EPREFIX}"/usr \
		${CBUILD:+--build="${CBUILD}"} \
		--host="${CHOST}" \
		${CTARGET:+--target="${CTARGET}"} \
		--mandir="${EPREFIX}"/usr/share/man \
		--infodir="${EPREFIX}"/usr/share/info \
		--datadir="${EPREFIX}"/usr/share \
		--sysconfdir="${EPREFIX}"/etc \
		--localstatedir="${EPREFIX}"/var/lib \
		"$@" \
		${EXTRA_ECONF}

	echo "$@"

	if ! "$@"; then
		if [[ -s config.log ]]; then
			echo
			echo "!!! Please attach the config.log to your bug report:"
			echo "!!! ${PWD}/config.log"
		fi
		die "econf failed"
	fi
	return $?
}

# debug-print() gets called from many places with verbose status information useful
# for tracking down problems. The output is in ${T}/eclass-debug.log.
# You can set ECLASS_DEBUG_OUTPUT to redirect the output somewhere else as well.
# The special "on" setting echoes the information, mixing it with the rest of the
# emerge output.
# You can override the setting by exporting a new one from the console, or you can
# set a new default in make.*. Here the default is "" or unset.

# in the future might use e* from /etc/init.d/functions.sh if i feel like it
debug-print() {
	if __safe_has ${EBUILD_PHASE} depend nofetch config info postinst; then
		return
	fi
	# if ${T} isn't defined, we're in dep calculation mode and
	# shouldn't do anything
	[[ -z ${T} ]] && return 0

	local _item
	for _item in "$@"; do
		# extra user-configurable targets
		if [[ ${ECLASS_DEBUG_OUTPUT} == "on" ]]; then
			echo "debug: ${_item}"
		elif [[ -n ${ECLASS_DEBUG_OUTPUT} ]]; then
			echo "debug: ${_item}" >> "${ECLASS_DEBUG_OUTPUT}"
		fi

		# default target
		echo "${_item}" >> "${T}"/eclass-debug.log
		chmod g+w "${T}"/eclass-debug.log &> /dev/null
	done
	# let the portage user own/write to this file
}

# The following 2 functions are debug-print() wrappers

debug-print-function() {
	local str="$1: entering function"
	shift
	debug-print "${str}, parameters: $*"
}

debug-print-section() {
	debug-print "now in section $*"
}

einstall() {
	${PKGCORE_PREFIX_SUPPORT} || local ED=${D}
	# CONF_PREFIX is only set if they didn't pass in libdir above
	local LOCAL_EXTRA_EINSTALL=( ${EXTRA_EINSTALL} )
	local CONF_LIBDIR=$(__get_libdir)
	if [[ -n ${CONF_LIBDIR} && ${CONF_PREFIX:-unset} != "unset" ]]; then
		local EI_DESTLIBDIR=${ED%%/}/${CONF_PREFIX%%/}/${CONF_LIBDIR%%/}/
		LOCAL_EXTRA_EINSTALL+=( libdir=${EI_DESTLIBDIR} )
		unset -v EI_DESTLIBDIR
	fi

	if ! [[ -f Makefile || -f GNUmakefile || -f makefile ]]; then
		die "no Makefile found"
	fi

	# Reset IFS for LOCAL_EXTRA_EINSTALL, should users be up to something.
	local IFS=$' \t\n'
	set -- \
		${MAKE:-make} \
		prefix="${ED}/usr" \
		datadir="${ED}/usr/share" \
		infodir="${ED}/usr/share/info" \
		localstatedir="${ED}/var/lib" \
		mandir="${ED}/usr/share/man" \
		sysconfdir="${ED}/etc" \
		${LOCAL_EXTRA_EINSTALL[@]} \
		"$@" install
	[[ ${PKGCORE_DEBUG} != 0 ]] && "$@" -n
	"$@" || die "einstall failed"
}

__get_libdir() {
	local libdir=$1 libdir_var="LIBDIR_${ABI}"
	[[ -n ${ABI} && -n ${!libdir_var} ]] && libdir=${!libdir_var}
	echo "${libdir}"
}

into() {
	${PKGCORE_PREFIX_SUPPORT} || local ED=${D}
	if [[ $1 == "/" ]]; then
		export DESTTREE=""
	else
		export DESTTREE=$1
		if [[ ! -d ${ED}${DESTTREE} ]]; then
			install -d "${ED}${DESTTREE}"
		fi
	fi
}

insinto() {
	${PKGCORE_PREFIX_SUPPORT} || local ED=${D}
	if [[ $1 == "/" ]]; then
		export INSDESTTREE=""
	else
		export INSDESTTREE=$1
		if [[ ! -d ${ED}${INSDESTTREE} ]]; then
			install -d "${ED}${INSDESTTREE}"
		fi
	fi
}

exeinto() {
	${PKGCORE_PREFIX_SUPPORT} || local ED=${D}
	if [[ $1 == "/" ]]; then
		export PKGCORE_EXEDESTTREE=""
	else
		export PKGCORE_EXEDESTTREE=$1
		if [[ ! -d ${ED}${PKGCORE_EXEDESTTREE} ]]; then
			install -d "${ED}${PKGCORE_EXEDESTTREE}"
		fi
	fi
}

docinto() {
	${PKGCORE_PREFIX_SUPPORT} || local ED=${D}
	if [[ $1 == "/" ]]; then
		export PKGCORE_DOCDESTTREE=""
	else
		export PKGCORE_DOCDESTTREE=$1
		if [[ ! -d ${ED}usr/share/doc/${PF}/${PKGCORE_DOCDESTTREE} ]]; then
			install -d "${ED}usr/share/doc/${PF}/${PKGCORE_DOCDESTTREE}"
		fi
	fi
}

__phase_pre_phase() {
	if [[ -d ${S} ]]; then
		cd "${S}"
	elif __safe_has "${EAPI}" 0 1 2 3; then
		cd "${WORKDIR}"
	elif [[ -n ${A} ]]; then
		die "source directory '${S}' doesn't exist, but \${A} isn't empty (see S-WORKDIR-FALLBACK in PMS)"
	else
		local phase
		# eapi4 blatant idiocy...
		for phase in unpack prepare configure compile install; do
			[[ ${phase} == ${EBUILD_PHASE} ]] && break
			__is_function src_${phase} || continue
			# to reach here means that (for example), we're doing src_install, and src_compile was defined
			# but S doesn't exist.
			die "source directory '${S}' doesn't exist, \${A} is defined, and there was a defined " \
				"phase function '${phase}' prior to '${EBUILD_PHASE}'; please see S-WORKDIR-FALLBACK " \
				"in pms for the details of what is allowed for eapi4 and later"
		done
		cd "${WORKDIR}"
	fi
}

__phase_pre_src_unpack() {
	export PORTAGE_GZIP_COMMAND=${PORTAGE_GZIP_COMMAND:-gzip}
	export PORTAGE_BZIP2_COMMAND=${PORTAGE_BZIP2_COMMAND:-bzip2}
	export PORTAGE_XZ_COMMAND=${PORTAGE_XZ_COMMAND:-xz}
	export S
	cd "${WORKDIR}"
}

__phase_pre_src_prepare() { __phase_pre_phase; }
__phase_pre_src_test()    { __phase_pre_phase; }

__phase_pre_src_configure() {
	local var
	for var in C{BUILD,HOST,TARGET,C,XX} {AS,LD,{,LIB}C{,XX}}FLAGS CCACHE_DIR; do
		[[ -n ${!var+set} ]] && export ${var}="${!var}"
	done
	__phase_pre_phase
}

__phase_pre_src_compile() {
	# just reuse the default_pre_src_configure; this means we don't have to care
	# if the eapi has configure or not.
	__phase_pre_src_configure

	if __feature_is_enabled distcc; then
		[[ -n ${DISTCC_DIR} ]] && addwrite "${DISTCC_DIR}"
		if __feature_is_enabled distcc-pump; then
			eval $(pump --startup) || echo "Warning: Failed starting pump" >&2
			trap 'pump --shutdown' EXIT
		fi
	fi
}

__phase_post_src_compile() {
	if __feature_is_enabled distcc && __feature_is_enabled distcc-pump; then
		pump --shutdown
		trap - EXIT
	fi
}

__phase_pre_src_install() {
	export DESTTREE=/usr INSDESTTREE='' PKGCORE_EXEDESTTREE='' PKGCORE_DOCDESTTREE=''
	export INSOPTIONS="-m0644" EXEOPTIONS="-m0755"
	export LIBOPTIONS="-m0644" DIROPTIONS="-m0755"
	export PORTAGE_COMPRESS=${PORTAGE_COMPRESS:-bzip2}
	export PORTAGE_COMPRESS_FLAGS=${PORTAGE_COMPRESS_FLAGS:--9}
	export MOPREFIX=${PN}
	export D
	rm -rf "${D}"
	if ${PKGCORE_PREFIX_SUPPORT}; then
		[[ -n ${ED+set} ]] || \
			die "variable ED is unset, but prefix mode is enabled.	internal error?"
		export ED=${ED}
		mkdir -p "${ED}"
	else
		mkdir "${D}"
	fi
	__phase_pre_phase
}

unpack() {
	local file file_match filename myfail srcdir taropts tar_subdir
	taropts='--no-same-owner'

	[[ $# -eq 0 ]] && die "Nothing passed to the 'unpack' command"

	for file in "$@"; do
		echo ">>> Unpacking ${file} to ${PWD}"
		myfail="failure unpacking ${file}"

		if [[ ${file} != */* ]]; then
			# regular filename get prefixed with ${DISTDIR}/
			srcdir=${DISTDIR}/
		elif [[ ${file} == "./"* ]]; then
			# relative paths get passed through
			srcdir=""
		else
			srcdir=${DISTDIR}/

			if ${PKGCORE_UNPACK_ABSOLUTE_PATHS}; then
				# EAPI 6 and up allows absolute paths
				srcdir=""
				[[ ${file} == ${DISTDIR%%/}/* ]] && \
					eqawarn "QA Notice: unpack() argument contains redundant \${DISTDIR}: ${file}"
			elif [[ ${file} == ${DISTDIR%%/}/* ]]; then
				die "Arguments to unpack() must not begin with \${DISTDIR}."
			elif [[ ${file} == /* ]]; then
				die "Arguments to unpack() must not be absolute paths."
			else
				die "Relative paths to unpack() must be prefixed with './' in EAPI ${EAPI}"
			fi
		fi

		[[ ! -e ${srcdir}${file} ]] && die "${myfail}: file doesn't exist"
		[[ ! -s ${srcdir}${file} ]] && die "${myfail}: empty file"

		filename=${file##*/}

		file_match=${file}
		${PKGCORE_UNPACK_CASE_INSENSITIVE} && file_match=$(LC_ALL=C tr "[:upper:]" "[:lower:]" <<< "${file}")

		case ${file_match} in
			*.tar)
				tar xf "${srcdir}${file}" ${taropts} || die "${myfail}"
				;;
			*.tar.gz|*.tgz|*.tar.Z|*.tar.z)
				tar xf "${srcdir}${file}" -I"${PORTAGE_GZIP_COMMAND}" ${taropts} || die "${myfail}"
				;;
			*.tar.bz2|*.tbz2|*.tbz)
				tar xf "${srcdir}${file}" -I"${PORTAGE_BZIP2_COMMAND}" ${taropts} || die "${myfail}"
				;;
			*.tar.lzma)
				tar xf "${srcdir}${file}" -Ilzma ${taropts} || die "${myfail}"
				;;
			*.tar.xz)
				if __safe_has "${EAPI}" 0 1 2; then
					echo "xz is a supported extension in EAPI 3 and above only" >&2
					continue;
				fi
				tar xf "${srcdir}${file}" -I"${PORTAGE_XZ_COMMAND}" ${taropts} || die "${myfail}"
				;;
			*.txz)
				if __safe_has "${EAPI}" 0 1 2 3 4 5; then
					echo "unpacking *.txz archives is unsupported in EAPI ${EAPI}" >&2
					continue;
				fi
				tar xf "${srcdir}${file}" -I"${PORTAGE_XZ_COMMAND}" ${taropts} || die "${myfail}"
				;;
			*.ZIP|*.zip|*.jar)
				{ set +x; while :; do echo n || break; done } | \
					unzip -qo "${srcdir}${file}" || die "${myfail}"
				;;
			*.gz|*.Z|*.z)
				${PORTAGE_GUNZIP_COMMAND:-${PORTAGE_GZIP_COMMAND} -d} -c "${srcdir}${file}" > ${filename%.*} || die "${myfail}"
				;;
			*.bz2|*.bz)
				${PORTAGE_BUNZIP2_COMMAND:-${PORTAGE_BZIP2_COMMAND} -d} -c "${srcdir}${file}" > ${filename%.*} || die "${myfail}"
				;;
			*.xz)
				if __safe_has "${EAPI}" 0 1 2; then
					echo "xz is a supported extension in EAPI 3 and above only" >&2
					continue;
				fi
				${PORTAGE_UNXZ_COMMAND:-${PORTAGE_XZ_COMMAND} -d} < "${srcdir}${file}" > ${filename%.*} || die "${myfail}"
				;;
			*.7Z|*.7z)
				local my_output
				my_output=$(7z x -y "${srcdir}${file}")
				if [[ $? -ne 0 ]]; then
					echo "${my_output}" >&2
					die "${myfail}"
				fi
				;;
			*.RAR|*.rar)
				unrar x -idq -o+ "${srcdir}${file}" || die "${myfail}"
				;;
			*.LHa|*.LHA|*.lha|*.lzh)
				lha xfq "${srcdir}${file}" || die "${myfail}"
				;;
			*.a|*.deb)
				ar x "${srcdir}${file}" || die "${myfail}"
				;;
			*.lzma)
				lzma -dc "${srcdir}${file}" > ${filename%.*} || die "${myfail}"
				;;
			*)
				echo "unpack ${file}: file format not recognized. Ignoring."
				;;
		esac
	done
	find . -mindepth 1 -maxdepth 1 ! -type l -print0 | \
		${XARGS} -0 chmod -fR a+rX,u+w,g-w,o-w
}

diropts() {
	export DIROPTIONS=$@
}

insopts() {
	{ has -s "$@" || has --strip "$@"; } && \
		ewarn "insopts shouldn't be given -s; stripping should be left to the manager."
	export INSOPTIONS=$@
}

exeopts() {
	{ has -s "$@" || has --strip "$@"; } && \
		ewarn "exeopts shouldn't be given -s; stripping should be left to the manager."
	export EXEOPTIONS=$@
}

libopts() {
	{ has -s "$@" || has --strip "$@"; } && \
		ewarn "libopts shouldn't be given -s; stripping should be left to the manager."
	export LIBOPTIONS=$@
}

portageq() {
	if [[ ${EBUILD_PHASE} == "depend" ]]; then
		die "portageq calls in depends phase aren't allowed"
	fi
	local command=$1
	shift
	# suppress sandbox for the invocation; do this to avoid things like .pyc generation
	# being snagged by the sandbox
	local opts
	[[ ${PKGCORE_DEBUG} -ge 1 ]] && opts="--debug"
	local portageq_str="portageq"
	${PKGCORE_DISABLE_COMPAT-false} && portageq_str="query"
	SANDBOX_ON=0 PYTHONPATH="${PKGCORE_PYTHONPATH}" "${PKGCORE_PYTHON_BINARY}" \
		$(__which pinspect) ${opts} ${portageq_str} "${command}" \
		--eapi "${EAPI:--1}" --use "${USE}" "$@"
	local ret=$?
	[[ ${ret} == 127 ]] && die "pinspect couldn't be found; broken pkgcore installation?"
	return $(( ret ))
}

has_version() {
	PKGCORE_DISABLE_COMPAT=true portageq 'has_version' "$1"
}

best_version() {
	PKGCORE_DISABLE_COMPAT=true portageq 'best_version' "$1"
}

:
