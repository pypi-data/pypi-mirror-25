.TH atomic-reactor 1 2016\-12\-14
.SH SYNOPSIS
 \fBatomic\-reactor\fR [-h] [-q | -v | -V] {build,create-build-image,inside-build} ...


.SH OPTIONS
  {build,create-build-image,inside-build}
                        commands

  -h, --help            show this help message and exit
  -q, --quiet
  -v, --verbose
  -V, --version         show program's version number and exit


.SH COMMANDS


\fBatomic-reactor [OPTIONS] build
.PP\fR
  This command enables you to build images. Currently, you can build images
  from git repo, local path or a json file with full build specification.
  There are several methods for performing the build: inside a build
  container using docker from host, inside a build container using new
  instance of docker, or within current environment.
  -h, --help  show this help message and exit


.SH COMMANDS


\fBatomic-reactor [OPTIONS] build git
.PP\fR
  -h, --help            show this help message and exit
  --image IMAGE         name under which the image will be accessible
  --uri URI             URI of the git repo
  --df-path SOURCE__DOCKERFILE_PATH
                        path to Dockerfile within git repo (default is ./)
  --source-registry REGISTRY
                        registry to pull base image from
  --source-registry-insecure
                        allow connecting to source registry over plain http
  --target-registries [REGISTRY [REGISTRY ...]]
                        list of registries to push image to
  --target-registries-insecure
                        allow connecting to target registries over plain http
  --dont-pull-base-image
                        don't pull or update base image specified in
                        dockerfile
  --build-image BUILD_IMAGE
                        name of build image to use (build image type has to
                        match method)
  --load-plugin [PLUGIN_FILE [PLUGIN_FILE ...]]
                        list of files where plugins live
  --method {hostdocker,privileged,here}
                        choose method for building image: 'hostdocker' mounts
                        socket inside privileged container to use docker from
                        host, 'privileged' runs separate docker instance
                        inside privileged container and 'here' executes build
                        in current environment
  --commit SOURCE__PROVIDER_PARAMS__GIT_COMMIT
                        checkout this commit (default is master)


\fBatomic-reactor [OPTIONS] build json
.PP\fR
  -h, --help            show this help message and exit
  --build-image BUILD_IMAGE
                        name of build image to use (build image type has to
                        match method)
  --load-plugin [PLUGIN_FILE [PLUGIN_FILE ...]]
                        list of files where plugins live
  --method {hostdocker,privileged,here}
                        choose method for building image: 'hostdocker' mounts
                        socket inside privileged container to use docker from
                        host, 'privileged' runs separate docker instance
                        inside privileged container and 'here' executes build
                        in current environment
  --substitute [SUBSTITUTE [SUBSTITUTE ...]]
                        provide substitutions for json in form "foo.bar=spam"


\fBatomic-reactor [OPTIONS] build path
.PP\fR
  -h, --help            show this help message and exit
  --image IMAGE         name under which the image will be accessible
  --uri URI             URI of the directory with source (e.g.
                        "file:///foo/bar") or path (e.g. "/foo/bar"); path can
                        be relative
  --df-path SOURCE__DOCKERFILE_PATH
                        path to Dockerfile within given directory (default is
                        ./)
  --source-registry REGISTRY
                        registry to pull base image from
  --source-registry-insecure
                        allow connecting to source registry over plain http
  --target-registries [REGISTRY [REGISTRY ...]]
                        list of registries to push image to
  --target-registries-insecure
                        allow connecting to target registries over plain http
  --dont-pull-base-image
                        don't pull or update base image specified in
                        dockerfile
  --build-image BUILD_IMAGE
                        name of build image to use (build image type has to
                        match method)
  --load-plugin [PLUGIN_FILE [PLUGIN_FILE ...]]
                        list of files where plugins live
  --method {hostdocker,privileged,here}
                        choose method for building image: 'hostdocker' mounts
                        socket inside privileged container to use docker from
                        host, 'privileged' runs separate docker instance
                        inside privileged container and 'here' executes build
                        in current environment


\fBatomic-reactor [OPTIONS] create-build-image
.PP\fR
  Create build image; Atomic Reactor installs itself inside and is capable
  of building images within this image.
  -h, --help            show this help message and exit
  --reactor-latest      put latest Atomic Reactor inside (from public git)
  --reactor-remote-git REACTOR_REMOTE_GIT
                        URL to git repo with Atomic Reactor (has to contain
                        setup.py)
  --reactor-local-path REACTOR_LOCAL_PATH
                        path to directory with Atomic Reactor (has to contain
                        setup.py)
  --reactor-tarball-path REACTOR_TARBALL_PATH
                        path to distribution tarball with Atomic Reactor
  --use-cache           use cache to build image (may be faster, but not up to
                        date)


\fBatomic-reactor [OPTIONS] inside-build
.PP\fR
  We do expect we are inside container, therefore we'll read build
  configuration from json at '/run/share/build.json'and when the build is
  done, results are written in that dir so Atomic Reactor from host may read
  those.
  -h, --help            show this help message and exit
  --input INPUT         input plugin name (determined automatically unless
                        given)
  --input-arg INPUT_ARG
                        argument for input plugin (in form of 'key=value'),
                        see input plugins to know what arguments they accept
                        (can be specified multiple times)
  --dont-pull-base-image
                        don't pull or update base image specified in
                        dockerfile
  --substitute SUBSTITUTE
                        substitute values in build json (key=value, or
                        plugin_type.plugin_name.key=value)
.SH AUTHORS
 Jiri Popelka <jpopelka@redhat.com>, Martin Milata <mmilata@redhat.com>, Slavek Kabrda <slavek@redhat.com>, Tim Waugh <twaugh@redhat.com>, Tomas Tomecek <ttomecek@redhat.com>