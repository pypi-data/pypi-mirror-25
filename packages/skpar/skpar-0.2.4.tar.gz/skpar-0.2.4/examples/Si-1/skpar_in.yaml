executables:
    skgen: ./skf/skgen-opt.sh   # script yielding an skf set
    bands: dftbutils bands      # band-structure calculation
                                # see documentation for dftbutils sub-package

tasks:
    # Three types of tasks exist:
    # - set: [parmeter_file, working_directory, optional_template_file(s)]
    # - run: [command, working_directory]
    # - get: [what, from_sourse(dir, file or dict), to_destination(dict), optional_kwargs]
    #        `what` is essentially a function name (see Get-Tasks dictionary)
    # ------------------------------------------------------------------------------
    - set: [current.par, skf, skf/skdefs.template.py]   # update ./skf/skdefs.py
    - run: [skgen, skf]                                 # generate SKF-set
    - run: [bands, Si-diam]                             # run dftb+ and dp_bands in Si-diam
    - get: [get_dftbp_bs, Si-diam/bs, Si.bs,            # get BS data and put in Si.bs model DB
            {latticeinfo: {type: 'FCC', param: 5.431}}] # must know the lattice for what follows
    - get: [get_dftbp_meff, Si.bs,                      # get electron effective masses
            {carriers: 'e', directions: ['Gamma-X'],    # note: destination is ommitted,
             Erange: 0.005, usebandindex: True}]        #       hence update the sourse
    - get: [get_dftbp_meff, Si.bs,                      # get hole effective masses
            {carriers: 'h', directions: ['Gamma-X', 'Gamma-L', 'Gamma-K'],
             nb: 3, Erange: 0.005}]
    - get: [get_dftbp_Ek  , Si.bs,                      # get eigen-values at special points
            {sympts: ['L', 'Gamma', 'X', 'K'],
             extract: {'cb': [0,1,2,3], 'vb': [0,1,2,3]},
             align: 'Evb'}]

objectives:

    - Egap:                            # item to be queried from model database
        doc: Band-gap of Si (diamond)  # doc-string for report purposes (optional)
        models: Si.bs                  # model name must match destination of a get-tasks
        ref: 1.12                      # explicit reference data in for this objective
        weight: 4.0                    # relative importance of this objective
                                       # objective weight in the overall cost function
        eval: [rms, relerr]            # objective function: RMS of relative error

    - effective_masses:                # items to be queried here will be defined by
        doc: Effective masses, Si      # explicit keys, since the reference data consists
        models: Si.bs                  # of key-value pairs
        ref:
            file: ./ref/meff-Si.dat    # the reference data is loaded via numpy.loadtxt()
            loader_args:
                dtype:                 # NOTABENE: yaml cannot read in tuples, so we must
                                       #           use the dictionary formulation of dtype
                    names: ['keys', 'values']
                    formats: ['S15', 'float']
        options:
            subweights:                # individual data items have sub-weight within an objective
                dflt   : 0.1           # changing the default (from 1.) to 0. allows us to consider
                me_GX_0: 1.0           # only select entries; alternatively, set select entries
                me_Xt_0: 0.0           # to zero effectively excludes them from consideration
        weight: 1.0                    # objective weight in the overall cost function
        eval: [rms, abserr]            # objective function: RMS of absolute error

    - special_Ek:
        doc: Eigenvalues at k-points of high symmetry
        models: Si.bs
        ref:
            file: ./ref/Ek-Si.dat
            loader_args:
                dtype:                 # NOTABENE: yaml cannot read in tuples, so we must
                                       #           use the dictionary formulation of dtype
                    names: ['keys', 'values']
                    formats: ['S15', 'float']
        options:
            subweights:
                dflt   : 0.1           # changing the default (from 1.) to 0. allows us to consider
                me_GX_0: 1.0           # only select entries; alternatively, set select entries
                mh_Xt_0: 0.0           # to zero effectively excludes them from consideration
        weight: 1.0
        eval: [rms, relerr]


optimisation:
    algo: PSO                          # algorithm: particle swarm optimisation
    options:
        npart: 2                       # number of particles
        ngen : 2                       # number of generations
    parameters:
        - Si_Ed  :  0.1 0.3            # parameter names must match with placeholders in
        - Si_r_sp:  3.5 7.0            # template files given to set-tasks above
        - Si_r_d :  3.5 8.0
