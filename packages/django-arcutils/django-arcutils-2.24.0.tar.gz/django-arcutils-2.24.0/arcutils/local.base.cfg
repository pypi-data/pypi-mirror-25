; This provides a (hopefully) reasonable set of default settings for
; ARC projects. To use this in a project, add the following line to its
; local settings file (typically the DEFAULT section of local.base.cfg):
;
;     extends = "arcutils:local.base.cfg"
;
; You could also simply copy this file into the project and tweak it as
; necessary.

[DEFAULT]
PROJECT.title = null

; Miscellaneous Django stuff
DEBUG = false
ROOT_URLCONF = "{{PACKAGE}}.urls"
WSGI_APPLICATION = "{{PACKAGE}}.wsgi.application"

; ARC CDN
ARC.cdn.host = "cdn.research.pdx.edu"
; CDN paths can be used with the cdn_url template tag like so:
;
;    {% cdn_url 'bootstrap-css' %}
;
; Given the settings below, that will expand to:
;
;     https://cdn.research.pdx.edu/bootstrap/3.3.7/css/bootstrap.min.css
;
; where {bootstrap} in the path is replaced with the value of the
; ARC.versions.bootstrap setting.
ARC.cdn.paths.bootstrap-css = "bootstrap/{bootstrap}/css/bootstrap.min.css"
ARC.cdn.paths.bootstrap-js = "bootstrap/{bootstrap}/js/bootstrap.min.js"
ARC.cdn.paths.jquery-js = "jquery/{jquery}/jquery-{jquery}.min.js"
; Entries are library/package name => version:
; Example: ARC.versions.jquery = "2.1.1"
ARC.versions.bootstrap = "3.3.7"

; Auth
; AUTH_PASSWORD_VALIDATORS works only with Django >= 1.9.
AUTH_PASSWORD_VALIDATORS = [
        {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
        {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
        {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
        {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"}
    ]
; The STAFF and SUPERUSERS settings can be used to automatically create
; staff and superusers on first login. The default CAS response callback
; uses them.
STAFF = []
; If a user is in this list, they'll automatically be made staff too
; (when using the default CAS response callback).
SUPERUSERS = []

; Database
; PostgreSQL is ARC's preferred RDBMS
DATABASES.default.ENGINE = "django.db.backends.postgresql"

; Django REST Framework
REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES = [
        "arcutils.drf.authentication.SessionAuthentication"
    ]
REST_FRAMEWORK.DEFAULT_RENDERER_CLASSES = [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer"
    ]

; Email
DEFAULT_FROM_EMAIL = "{{PACKAGE}}-{{ENV}}.info@pdx.edu"
SERVER_EMAIL = "{{PACKAGE}}-{{ENV}}.errors@pdx.edu"

; Localization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/Los_Angeles"
USE_I18N = true
USE_L10N = true
USE_TZ = true

; Logging
LOGGING.version = 1
LOGGING.disable_existing_loggers = false
LOGGING.formatters.verbose.style = "{"
LOGGING.formatters.verbose.format = "[{asctime}] {levelname} {pathname}:{lineno} {message}"
LOGGING.formatters.verbose.datefmt = "%d/%b/%Y %H:%M:%S"
LOGGING.handlers.console.class = "logging.StreamHandler"
LOGGING.handlers.console.formatter = "verbose"
LOGGING.handlers.null.class = "logging.NullHandler"

; Static files
MEDIA_URL = "/media/"
STATIC_URL = "/static/"

; Templates
TEMPLATES.0.BACKEND = "django.template.backends.django.DjangoTemplates"
TEMPLATES.0.OPTIONS.context_processors = [
        "django.template.context_processors.debug",
        "django.template.context_processors.request",
        "django.contrib.auth.context_processors.auth",
        "django.contrib.messages.context_processors.messages",
        "arcutils.context_processors.defaults"
    ]

INSTALLED_APPS = [
        "arcutils.admin.AdminConfig",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "arcutils",
        # Sentry adapter. Add RAVEN_CONFIG.dsn to local.prod.cfg.
        "raven.contrib.django.raven_compat"
    ]
; In simple cases, you can set this to a list of additional apps to
; install in the project's settings.
EXTRA.INSTALLED_APPS = null
; A dict of { app in INSTALLED_APPS => app to swap in }
; Example: {"django.contrib.admin": "django.contrib.admin.apps.SimpleAdminConfig"}
SWAP.INSTALLED_APPS = null

; The MIDDLEWARE setting works only with Django >= 1.10. If both
; MIDDLEWARE and MIDDLEWARE_CLASSES are set on Django >= 1.10,
; MIDDLEWARE will take precedence. The following list is the default
; provided by `django-admin startproject`.
MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware"
    ]

; On Django >= 1.0, MIDDLEWARE_CLASSES will be removed from the settings
; dict (if MIDDLEWARE is set).
MIDDLEWARE_CLASSES = [
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.auth.middleware.SessionAuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django.middleware.security.SecurityMiddleware"
    ]
; In simple cases, you can set this to a list of additional middleware
; in the project's settings.
EXTRA.MIDDLEWARE_CLASSES = null
; A dict of { middleware in MIDDLEWARE_CLASSES => middleware to swap in }
SWAP.MIDDLEWARE_CLASSES = null

[dev]
ENV = "dev"
DEBUG = true
ADMINS = []
ALLOWED_HOSTS = []
MANAGERS = []
SECRET_KEY = "NOT A SECRET"

DATABASES.default.HOST = "localhost"
DATABASES.default.NAME = "{{PACKAGE}}"
DATABASES.default.USER = "{{PACKAGE}}"
DATABASES.default.PASSWORD = ""

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
GOOGLE.analytics.tracking_id = null
INTERNAL_IPS = "arcutils.settings.INTERNAL_IPS"

; Logging
LOGGING.handlers.console.level = "DEBUG"
LOGGING.loggers.arcutils.handlers = ["console"]
LOGGING.loggers.arcutils.level = "DEBUG"
LOGGING.loggers.{{PACKAGE}}.handlers = ["console"]
LOGGING.loggers.{{PACKAGE}}.level = "DEBUG"

; This causes all django.* loggers (django.request in particular) to
; propagate to the django logger (and use our verbose formatter, but
; that's not the important thing here). Without this, exceptions in app
; code won't be logged anywhere because Django catches them and shows
; its debugging page instead, which isn't very helpful when exceptions
; occur in an AJAX request. I like seeing exceptions in the console
; regardless.
; XXX: Not needed with Django 1.9+
LOGGING.loggers.django.handlers = ["console"]

MEDIA_ROOT  = "{{CWD}}/media"
STATIC_ROOT = "{{CWD}}/static"
TEMPLATES.0.APP_DIRS = true
TEMPLATES.0.OPTIONS.debug = true

; List of settings to import from strings; uses Django's import_string
; utility. If a setting in this list is not a string, its value will not
; be changed.
IMPORT_FROM_STRING = ["INTERNAL_IPS"]

[test]
ENV = "test"
TEST = true
ADMINS = []
ALLOWED_HOSTS = []
MANAGERS = []
PASSWORD_HASHERS = ["django.contrib.auth.hashers.MD5PasswordHasher"]
SECRET_KEY = "NOT A SECRET"
DATABASES.default.HOST = "localhost"
DATABASES.default.NAME = "{{PACKAGE}}"
DATABASES.default.USER = "{{PACKAGE}}"
DATABASES.default.PASSWORD = ""
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
GOOGLE.analytics.tracking_id = null
LOGGING.disable_existing_loggers = true
LOGGING.root.handlers = ["null"]
MEDIA_ROOT = "/tmp/{{PACKAGE}}/test/media"
STATIC_ROOT = "/tmp/{{PACKAGE}}/test/static"
TEMPLATES.0.APP_DIRS = true

[stage]
ENV = "stage"
DEBUG = false
ALLOWED_HOSTS = ["{{PACKAGE}}.stage.rc.pdx.edu", "{{PACKAGE}}.staging.rc.pdx.edu"]
DATABASES.default.HOST = "merope.rc.pdx.edu"
DATABASES.default.NAME = "{{PACKAGE}}_stage"
DATABASES.default.USER = "{{PACKAGE}}_stage_l"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
GOOGLE.analytics.tracking_id = null

; Logging
LOGGING.handlers.console.level = "INFO"
LOGGING.handlers.mail_admins.class = "django.utils.log.AdminEmailHandler"
LOGGING.handlers.mail_admins.level = "ERROR"
LOGGING.handlers.mail_admins.formatter = "verbose"
LOGGING.root.level = "INFO"
LOGGING.root.handlers = ["console", "mail_admins"]
LOGGING.loggers.(arcutils.mail_admins).level = "INFO"
LOGGING.loggers.(arcutils.mail_admins).handlers = ["mail_admins"]

MEDIA_ROOT = "/vol/www/{{PACKAGE}}/media/{{ENV}}"
STATIC_ROOT = "/vol/www/{{PACKAGE}}/static/{{ENV}}"
; NOTE: StaticFilesStorage is Django's default storage; we don't use
;       ManifestStaticFilesStorage like we do in production because that
;       requires `DEBUG = False`.
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
TEMPLATES.0.APP_DIRS = true

SECURE_PROXY_SSL_HEADER = ["HTTP_X_FORWARDED_PROTO", "https"]

[prod]
ENV = "prod"
DEBUG = false
DATABASES.default.HOST = "postgresql.rc.pdx.edu"
DATABASES.default.NAME = "{{PACKAGE}}"
DATABASES.default.USER = "{{PACKAGE}}_l"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

; Logging
; Everything that propagates to the root level and is at the INFO level
; or higher will be logged to the console and to Logstash. ERROR level
; messages will also be mailed to ADMINS.
LOGGING.handlers.console.level = "INFO"
LOGGING.handlers.mail_admins.class = "django.utils.log.AdminEmailHandler"
LOGGING.handlers.mail_admins.level = "ERROR"
LOGGING.handlers.mail_admins.formatter = "verbose"
LOGGING.root.level = "INFO"
LOGGING.root.handlers = ["console", "mail_admins"]
; The arcutils.mail_admins logger can be used to send log messages
; directly to ADMINS, without regard to level (except that DEBUG
; messages are ignored).
LOGGING.loggers.(arcutils.mail_admins).level = "INFO"
LOGGING.loggers.(arcutils.mail_admins).handlers = ["mail_admins"]

MEDIA_ROOT = "/vol/www/{{PACKAGE}}/media/{{ENV}}"
STATIC_ROOT = "/vol/www/{{PACKAGE}}/static/{{ENV}}"
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
TEMPLATES.0.OPTIONS.debug = false
TEMPLATES.0.OPTIONS.loaders = [
        ["django.template.loaders.cached.Loader", [
            "django.template.loaders.filesystem.Loader",
            "django.template.loaders.app_directories.Loader"
        ]]
    ]

# Disable API browser
REST_FRAMEWORK.DEFAULT_RENDERER_CLASSES = [
        "rest_framework.renderers.JSONRenderer"
    ]
