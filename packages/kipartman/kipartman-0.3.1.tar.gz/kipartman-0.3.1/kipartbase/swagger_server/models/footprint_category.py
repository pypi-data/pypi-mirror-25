# coding: utf-8

from __future__ import absolute_import

from swagger_server.models.footprint_category_data import FootprintCategoryData
from swagger_server.models.footprint_category_ref import FootprintCategoryRef
from .base_model_ import Model as BaseModel
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FootprintCategory(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, id=None, parent=None, childs=None, path=None):
        """
        FootprintCategory - a model defined in Swagger

        :param name: The name of this FootprintCategory.
        :type name: str
        :param description: The description of this FootprintCategory.
        :type description: str
        :param id: The id of this FootprintCategory.
        :type id: int
        :param parent: The parent of this FootprintCategory.
        :type parent: FootprintCategoryRef
        :param childs: The childs of this FootprintCategory.
        :type childs: List[FootprintCategory]
        :param path: The path of this FootprintCategory.
        :type path: str
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'id': int,
            'parent': FootprintCategoryRef,
            'childs': List[FootprintCategory],
            'path': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'id': 'id',
            'parent': 'parent',
            'childs': 'childs',
            'path': 'path'
        }

        self._name = name
        self._description = description
        self._id = id
        self._parent = parent
        self._childs = childs
        self._path = path

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FootprintCategory of this FootprintCategory.
        :rtype: FootprintCategory
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self):
        """
        Gets the name of this FootprintCategory.

        :return: The name of this FootprintCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FootprintCategory.

        :param name: The name of this FootprintCategory.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this FootprintCategory.

        :return: The description of this FootprintCategory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this FootprintCategory.

        :param description: The description of this FootprintCategory.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this FootprintCategory.

        :return: The id of this FootprintCategory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FootprintCategory.

        :param id: The id of this FootprintCategory.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def parent(self):
        """
        Gets the parent of this FootprintCategory.

        :return: The parent of this FootprintCategory.
        :rtype: FootprintCategoryRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this FootprintCategory.

        :param parent: The parent of this FootprintCategory.
        :type parent: FootprintCategoryRef
        """

        self._parent = parent

    @property
    def childs(self):
        """
        Gets the childs of this FootprintCategory.

        :return: The childs of this FootprintCategory.
        :rtype: List[FootprintCategory]
        """
        return self._childs

    @childs.setter
    def childs(self, childs):
        """
        Sets the childs of this FootprintCategory.

        :param childs: The childs of this FootprintCategory.
        :type childs: List[FootprintCategory]
        """

        self._childs = childs

    @property
    def path(self):
        """
        Gets the path of this FootprintCategory.

        :return: The path of this FootprintCategory.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this FootprintCategory.

        :param path: The path of this FootprintCategory.
        :type path: str
        """

        self._path = path

