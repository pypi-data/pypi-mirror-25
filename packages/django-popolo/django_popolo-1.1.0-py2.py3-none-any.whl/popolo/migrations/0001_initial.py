# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-15 22:39
from __future__ import unicode_literals

import autoslug.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.text
import django.utils.timezone
import model_utils.fields
import popolo.behaviors.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(blank=True, help_text='A primary name', max_length=256, verbose_name='name')),
                ('identifier', models.CharField(blank=True, help_text='An issued identifier', max_length=128, verbose_name='identifier')),
                ('classification', models.CharField(blank=True, help_text='An area category, e.g. city', max_length=128, verbose_name='classification')),
                ('geom', models.TextField(blank=True, help_text='A geometry', null=True, verbose_name='geom')),
                ('inhabitants', models.IntegerField(blank=True, help_text='The total number of inhabitants', null=True, verbose_name='inhabitants')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('parent', models.ForeignKey(blank=True, help_text='The area that contains this area', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Area', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Geographic Area',
                'verbose_name_plural': 'Geographic Areas',
            },
        ),
        migrations.CreateModel(
            name='AreaI18Name',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='i18n_names', to='popolo.Area')),
            ],
            options={
                'verbose_name': 'I18N Name',
                'verbose_name_plural': 'I18N Names',
            },
        ),
        migrations.CreateModel(
            name='ContactDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('label', models.CharField(blank=True, help_text='A human-readable label for the contact detail', max_length=256, verbose_name='label')),
                ('contact_type', models.CharField(choices=[('ADDRESS', 'Address'), ('EMAIL', 'Email'), ('URL', 'Url'), ('MAIL', 'Snail mail'), ('TWITTER', 'Twitter'), ('FACEBOOK', 'Facebook'), ('PHONE', 'Telephone'), ('MOBILE', 'Mobile'), ('TEXT', 'Text'), ('VOICE', 'Voice'), ('FAX', 'Fax'), ('CELL', 'Cell'), ('VIDEO', 'Video'), ('PAGER', 'Pager'), ('TEXTPHONE', 'Textphone')], help_text="A type of medium, e.g. 'fax' or 'email'", max_length=12, verbose_name='type')),
                ('value', models.CharField(help_text='A value, e.g. a phone number or email address', max_length=256, verbose_name='value')),
                ('note', models.CharField(blank=True, help_text='A note, e.g. for grouping contact details by physical location', max_length=512, verbose_name='note')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Contact detail',
                'verbose_name_plural': 'Contact details',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('name', models.CharField(help_text="The event's name", max_length=128, verbose_name='name')),
                ('description', models.CharField(blank=True, help_text="The event's description", max_length=512, null=True, verbose_name='description')),
                ('start_date', models.CharField(blank=True, help_text='The time at which the event starts', max_length=20, null=True, validators=[django.core.validators.RegexValidator(code='invalid_start_date', message='start date must follow the given pattern: ^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$', regex='^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$')], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The time at which the event ends', max_length=20, null=True, validators=[django.core.validators.RegexValidator(code='invalid_end_date', message='end date must follow the given pattern: ^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$', regex='^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$')], verbose_name='end date')),
                ('location', models.CharField(blank=True, help_text="The event's location", max_length=255, null=True, verbose_name='location')),
                ('status', models.CharField(blank=True, help_text="The event's status", max_length=128, null=True, verbose_name='status')),
                ('classification', models.CharField(blank=True, help_text="The event's category", max_length=128, null=True, verbose_name='classification')),
                ('area', models.ForeignKey(blank=True, help_text='The Area the Event is related to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='popolo.Area')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('identifier', models.CharField(help_text='An issued identifier, e.g. a DUNS number', max_length=512, verbose_name='identifier')),
                ('scheme', models.CharField(blank=True, help_text='An identifier scheme, e.g. DUNS', max_length=128, verbose_name='scheme')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Identifier',
                'verbose_name_plural': 'Identifiers',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dbpedia_resource', models.CharField(help_text='DbPedia URI of the resource', max_length=255, unique=True, verbose_name='dbpedia resource')),
                ('iso639_1_code', models.CharField(help_text='ISO 639_1 code, ex: en, it, de, fr, es, ...', max_length=2, verbose_name='iso639_1 code')),
                ('name', models.CharField(help_text='English name of the language', max_length=128, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('url', models.URLField(help_text='A URL', max_length=350, verbose_name='url')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Wikipedia page'", max_length=512, verbose_name='note')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('label', models.CharField(blank=True, help_text='A label describing the membership', max_length=256, null=True, verbose_name='label')),
                ('role', models.CharField(blank=True, help_text='The role that the member fulfills in the organization', max_length=256, null=True, verbose_name='role')),
                ('area', models.ForeignKey(blank=True, help_text='The geographic area to which the post is related', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Area', verbose_name='Area')),
            ],
            options={
                'verbose_name': 'Membership',
                'verbose_name_plural': 'Memberships',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(help_text='A primary name, e.g. a legally recognized name', max_length=128, verbose_name='name')),
                ('classification', models.CharField(blank=True, help_text='An organization category, e.g. committee', max_length=64, null=True, verbose_name='classification')),
                ('abstract', models.CharField(blank=True, help_text='A one-line description of an organization', max_length=256, null=True, verbose_name='abstract')),
                ('description', models.TextField(blank=True, help_text='An extended description of an organization', null=True, verbose_name='biography')),
                ('founding_date', models.CharField(blank=True, help_text='A date of founding', max_length=10, null=True, validators=[django.core.validators.RegexValidator(code='invalid_founding_date', message='founding date must follow the given pattern: ^[0-9]{4}(-[0-9]{2}){0,2}$', regex='^[0-9]{4}(-[0-9]{2}){0,2}$')], verbose_name='founding date')),
                ('dissolution_date', models.CharField(blank=True, help_text='A date of dissolution', max_length=10, null=True, validators=[django.core.validators.RegexValidator(code='invalid_dissolution_date', message='dissolution date must follow the given pattern: ^[0-9]{4}(-[0-9]{2}){0,2}$', regex='^[0-9]{4}(-[0-9]{2}){0,2}$')], verbose_name='dissolution date')),
                ('image', models.URLField(blank=True, help_text='A URL of an image, to identify the organization visually', max_length=255, null=True, verbose_name='image')),
                ('area', models.ForeignKey(blank=True, help_text='The geographic area to which this organization is related', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='popolo.Area')),
                ('parent', models.ForeignKey(blank=True, help_text='The organization that contains this organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Organization', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='OtherName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('name', models.CharField(help_text='An alternate or former name', max_length=512, verbose_name='name')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Birth name'", max_length=1024, null=True, verbose_name='note')),
                ('source', models.URLField(blank=True, help_text='The URL of the source where this information comes from', max_length=256, null=True, verbose_name='source')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Other name',
                'verbose_name_plural': 'Other names',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(help_text="A person's preferred full name", max_length=512, verbose_name='name')),
                ('family_name', models.CharField(blank=True, help_text='One or more family names', max_length=128, null=True, verbose_name='family name')),
                ('given_name', models.CharField(blank=True, help_text='One or more primary given names', max_length=128, null=True, verbose_name='given name')),
                ('additional_name', models.CharField(blank=True, help_text='One or more secondary given names', max_length=128, null=True, verbose_name='additional name')),
                ('honorific_prefix', models.CharField(blank=True, help_text="One or more honorifics preceding a person's name", max_length=32, null=True, verbose_name='honorific prefix')),
                ('honorific_suffix', models.CharField(blank=True, help_text="One or more honorifics following a person's name", max_length=32, null=True, verbose_name='honorific suffix')),
                ('patronymic_name', models.CharField(blank=True, help_text='One or more patronymic names', max_length=128, null=True, verbose_name='patronymic name')),
                ('sort_name', models.CharField(blank=True, help_text='A name to use in an lexicographically ordered list', max_length=128, null=True, verbose_name='sort name')),
                ('email', models.EmailField(blank=True, help_text='A preferred email address', max_length=254, null=True, verbose_name='email')),
                ('gender', models.CharField(blank=True, help_text='A gender', max_length=32, verbose_name='gender')),
                ('birth_date', models.CharField(blank=True, help_text='A date of birth', max_length=10, null=True, verbose_name='birth date')),
                ('death_date', models.CharField(blank=True, help_text='A date of death', max_length=10, null=True, verbose_name='death date')),
                ('image', models.URLField(blank=True, help_text='A URL of a head shot', null=True, verbose_name='image')),
                ('summary', models.CharField(blank=True, help_text="A one-line account of a person's life", max_length=1024, null=True, verbose_name='summary')),
                ('biography', models.TextField(blank=True, help_text="An extended account of a person's life", null=True, verbose_name='biography')),
                ('national_identity', models.CharField(blank=True, help_text='A national identity', max_length=128, null=True, verbose_name='national identity')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('label', models.CharField(blank=True, help_text='A label describing the post', max_length=256, verbose_name='label')),
                ('other_label', models.CharField(blank=True, help_text='An alternate label, such as an abbreviation', max_length=32, null=True, verbose_name='other label')),
                ('role', models.CharField(blank=True, help_text='The function that the holder of the post fulfills', max_length=256, null=True, verbose_name='role')),
                ('area', models.ForeignKey(blank=True, help_text='The geographic area to which the post is related', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='popolo.Area', verbose_name='Area')),
                ('organization', models.ForeignKey(help_text='The organization in which the post is held', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='popolo.Organization', verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('url', models.URLField(help_text='A URL', max_length=350, verbose_name='url')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Parliament website'", max_length=512, verbose_name='note')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
            },
        ),
        migrations.AddField(
            model_name='membership',
            name='member_organization',
            field=models.ForeignKey(blank=True, help_text='The person who is a member of the organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_as_member', to='popolo.Organization', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='membership',
            name='on_behalf_of',
            field=models.ForeignKey(blank=True, help_text='The organization on whose behalf the person is a member of the organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_on_behalf_of', to='popolo.Organization', verbose_name='On behalf of'),
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization in which the person or organization is a member', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='person',
            field=models.ForeignKey(blank=True, help_text='The person who is a member of the organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Person', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='membership',
            name='post',
            field=models.ForeignKey(blank=True, help_text='The post held by the person in the organization through this membership', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Post', verbose_name='Post'),
        ),
        migrations.AddField(
            model_name='event',
            name='attendees',
            field=models.ManyToManyField(blank=True, help_text='People attending the event', related_name='attended_events', to='popolo.Person'),
        ),
        migrations.AddField(
            model_name='event',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization organizing the event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='popolo.Organization'),
        ),
        migrations.AddField(
            model_name='event',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='The Event that this event is part of', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Event', verbose_name='Parent'),
        ),
        migrations.AddField(
            model_name='areai18name',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='popolo.Language', verbose_name='Language'),
        ),
        migrations.AlterUniqueTogether(
            name='areai18name',
            unique_together=set([('area', 'language', 'name')]),
        ),
    ]
