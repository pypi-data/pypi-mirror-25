Backend.AI
==========

Backend.AI is a streamlined backend service framework hosting heterogeneous programming languages and popular AI frameworks.
It manages the underlying computing resources for multi-tenant computation sessions where such sessions are spawned and executed instantly on demand.

In the names of sub-projects, we use a private code-name "Sorna" which we take from a famous science fiction "Jurassic Park" â€“ meaning that we do all the dirty jobs in the behind.
In the novel, Isla Nublar is the "front-end" island where tourists see the dinosaurs and Isla Sorna is the "back-end" island where a secret dinosaurs production facility is located.

All sub-projects are licensed under LGPLv3+.


Server-side Components
----------------------

Manager with API Gateway
~~~~~~~~~~~~~~~~~~~~~~~~

It routes external API requests from front-end services to individual agents.
It also monitors and scales the cluster of multiple agents (a few tens to hundreds).

* Package namespace: ``sorna.gateway``, ``sorna.manager``
* https://github.com/lablup/sorna-manager

Agent
~~~~~

It manages individual server instances and launches/destroys Docker containers where REPL daemons (kernels) run.
Each agent on a new EC2 instance self-registers itself to the instance registry via heartbeats.

* Package namespace: ``sorna.agent``
* https://github.com/lablup/sorna-agent

REPL
~~~~

A set of small ZMQ-based REPL daemons in various programming languages and configurations.
It also includes a sandbox implemented using ptrace-based sytem call filtering written in Go.

* https://github.com/lablup/sorna-repl
* Each daemon is a separate program, usually named "run.{lang-specific-extension}".

Sorna Common
~~~~~~~~~~~~

A collection of utility modules commonly shared throughout Backend.AI projects.

* Package namespaces: ``sorna.common``
* https://github.com/lablup/sorna-common


Client-side Components
----------------------

Client Libraries
~~~~~~~~~~~~~~~~

A client library to access the Sorna API servers with ease.

* Python
  * ``pip install lablup-client``
  * https://github.com/lablup/client
* Javascript (under preparation)
  * ``npm install lablup-client``
  * https://github.com/lablup/client-js

Sorna Media
~~~~~~~~~~~

The front-end support libraries to handle multi-media outputs (e.g., SVG plots, animated vector graphics)

* The Python package (``lablup``) is installed *inside* kernel containers.
* To interpret and display media generated by the Python package, you need to load the Javascript part in the front-end.
* https://github.com/lablup/sorna-media


Integrations with IDEs and Editors
----------------------------------

Sorna Jupyter Kernel
~~~~~~~~~~~~~~~~~~~~

Jupyter kernel integration of the Sorna Cloud API.

* Package namespaces: ``sorna.integration``
* https://github.com/lablup/sorna-jupyter-kernel


Installation
------------

The Sorna project uses latest features in Python 3.6+ and docker.
We highly recommend to use [pyenv](https://github.com/yyuu/pyenv) to use an
isolated setup with custom Python versions that might not be supported by your

First, install Docker on your system. We have tested Sorna on Linux/Ubuntu and
macOS ("Docker for Mac").

For a single PC setup, just run `pip install sorna`.
It will automatically install all above sub-projects as well as their dependencies.

Development
-----------

### git flow

The sorna repositories use [git flow](http://danielkummer.github.io/git-flow-cheatsheet/index.html) to streamline branching during development and deployment.
We use the default configuration (master -> preparation for release, develop -> main development, feature/ -> features, etc.) as-is.
