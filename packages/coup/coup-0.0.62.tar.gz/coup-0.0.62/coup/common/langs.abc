
                === Python ===                                          === Javascript ===                                        === Php ===
                                                    :::                                                     :::     simple_line_end = ;
                                                    :::                                                     :::     var_format = ${}

    # `Some comment line : text`                    >>>     // `Some comment line : text`                   >>>     // `Some comment line : text`                   >>>     Comment         | is_comment = True
    <EXP> # `Comment right : text`                  >>>     <EXP> // `Comment right : text`                 >>>     <EXP>; // `Comment right : text`                >>>     CommentRight    | is_comment = True

-------------- Simple types: ---------------------------------------------------------------------------------------------------------------------

    ''                                              >>>     ''                                              >>>     ""                                              >>>     StringEmpty
    ""                                              >>>     ""                                              >>>     ""                                              >>>     StringEmpty2
    '<EXP:TEXT>'                                    >>>     '<EXP:TEXT>'                                    >>>     "<EXP:TEXT>"                                    >>>     String
    "<EXP:TEXT>"                                    >>>     "<EXP:TEXT>"                                    >>>     "<EXP:TEXT>"                                    >>>     String2
    [<EXP:LIST>]                                    >>>     [<EXP:LIST>]                                    >>>     [<EXP:LIST>]                                    >>>     List

-------------- Simple logic: ---------------------------------------------------------------------------------------------------------------------

    if <EXP>:                                       >>>     if (<EXP>) {                                    >>>     if <EXP> {                                      >>>     If | INDEX=-9998
        sorted(<EXP>)                               >>>         <EXP>.sorted()                              >>>         <EXP>.sorted()                              >>>     Sorted
    elif <EXP>:                                     >>>     else if (<EXP>) {                               >>>     else if {                                       >>>     ElseIf
        pass                                        >>>                                                     >>>                                                     >>>     Pass
    else:                                           >>>     } else {                                        >>>     } else {                                        >>>     Else
        <EXP:+NAME> = <EXP:^instance>               >>>         var <EXP:+NAME> = `17`                      >>>         $<EXP:+NAME> = `17`                         >>>     NewVar | INDEX=-9999
        `x` = `18`                                  >>>         `x` = `18`                                  >>>         <EXP:add_preffix=$> = `18`                  >>>     ChangeVar   # FIXME !!!!
        `x` += `1`                                  >>>         `x` += `1`                                  >>>         `x` .= `1`                                  >>>     PlusCount
                                                            }                                                       }

    for <EXP:+NAME> in <EXP>:                       >>>     for (var i=0,lst=<EXP[1]>,<EXP[0]>=lst[i];      >>>     foreach (<EXP[1]> as $<EXP[0]>) {               >>>     ForIn
                                                    |||              i<lst.length;i++,<EXP[0]>=lst[i]) {    |||                                                     |||
        pass
                                                            }                                                       }

-------------- Classes: --------------------------------------------------------------------------------------------------------------------------

    class <EXP:+NAME>:                              >>>     class <EXP:+NAME>                               >>>     class <EXP:+NAME>                               >>>     Class   | instance_attrs = {}, my_objects = {}, locals = {}
                                                            {                                                       {
        def <EXP:+NAME>(self):                      >>>         <EXP:+NAME>() {                             >>>         function <EXP:+NAME>() {                    >>>     Method  | locals = {}
            print(`exp`)                            >>>             console.log(`exp`)                      >>>             print(`exp`.PHP_EOL)                    >>>     Print
                                                                }                                                       }
                                                            }                                                       }

    <EXP:object_of[Class]>()                        >>>     new <EXP:object_of[Class]>()                    >>>     new <EXP:object_of[Class]>()                    >>>     ObjectCreate
    <EXP:instance_of[Class]>.<EXP:^exp_arg[0]>      >>>     <EXP:instance_of[Class]>.<EXP:^exp_arg[0]>      >>>     $<EXP:instance_of[Class]>-><EXP:^exp_arg[0]>    >>>     ObjectArgument
    <EXP:instance_of[Class]>.<EXP:^exp_arg[0]>()    >>>     <EXP:instance_of[Class]>.<EXP:^exp_arg[0]>()    >>>     $<EXP:instance_of[Class]>-><EXP:^exp_arg[0]>()  >>>     ObjectMethodStart   | is_method = True

-------------- Simple funcs: ---------------------------------------------------------------------------------------------------------------------

    range(<EXP>, <EXP>)                             >>>     [...Array(<EXP[1]>).keys()].slice(<EXP[0]>)     >>>     range(<EXP>, <EXP>-1)                           >>>     Range
    <EXP>.replace(<EXP>, <EXP>)                     >>>     <EXP>.replace(<EXP>, <EXP>)                     >>>     str_replace(<EXP[1]>, <EXP[2]>, <EXP[0]>)       >>>     Replace
    <EXP>[<EXP>]                                    >>>     <EXP>[<EXP>]                                    >>>     $<EXP>[<EXP>]                                   >>>     Index
    <EXP>[:<EXP>]                                   >>>     <EXP>.slice(<EXP>)                              >>>     array_slice(<EXP>, 0, <EXP>)                    >>>     RightSlice
    self.`exp:+attribute|` = <EXP:^type>            >>>     this.`exp:+attribute|` = <EXP:^type>            >>>     $this->`exp:+attribute|` = <EXP:^type>          >>>     NewInstanceArg
    self.<EXP:attribute>                            >>>     this.<EXP:attribute>                            >>>     $this-><EXP:attribute>                          >>>     InstanceArg
    <EXP> + <EXP>                                   >>>     <EXP> + <EXP>                                   >>>     <EXP> + <EXP>                                   >>>     Plus
    <EXP>.format(<EXP>)                             >>>     <EXP> + <EXP>                                   >>>     sprintf(<EXP>, <EXP>)                           >>>     Format
    eval(<EXP>)                                     >>>     eval(<EXP>)                                     >>>     eval(<EXP>)                                     >>>     Eval