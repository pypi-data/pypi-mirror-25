# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFFTPadPositiveIndexImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkFFTPadPositiveIndexImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkFFTPadPositiveIndexImageFilterPython')
    _itkFFTPadPositiveIndexImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFFTPadPositiveIndexImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkFFTPadPositiveIndexImageFilterPython
            return _itkFFTPadPositiveIndexImageFilterPython
        try:
            _mod = imp.load_module('_itkFFTPadPositiveIndexImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkFFTPadPositiveIndexImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFFTPadPositiveIndexImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageBoundaryConditionPython
import ITKCommonBasePython
import pyBasePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkImageRegionPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImagePython
import itkVectorPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkRGBAPixelPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkFFTPadPositiveIndexImageFilterIF3_New():
  return itkFFTPadPositiveIndexImageFilterIF3.New()


def itkFFTPadPositiveIndexImageFilterIF2_New():
  return itkFFTPadPositiveIndexImageFilterIF2.New()

class itkFFTPadPositiveIndexImageFilterIF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkFFTPadPositiveIndexImageFilterIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFFTPadPositiveIndexImageFilterIF2_Pointer":
        """__New_orig__() -> itkFFTPadPositiveIndexImageFilterIF2_Pointer"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFFTPadPositiveIndexImageFilterIF2_Pointer":
        """Clone(itkFFTPadPositiveIndexImageFilterIF2 self) -> itkFFTPadPositiveIndexImageFilterIF2_Pointer"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_Clone(self)


    def GetSizeGreatestPrimeFactor(self) -> "unsigned long long":
        """GetSizeGreatestPrimeFactor(itkFFTPadPositiveIndexImageFilterIF2 self) -> unsigned long long"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_GetSizeGreatestPrimeFactor(self)


    def SetSizeGreatestPrimeFactor(self, _arg: 'unsigned long long const') -> "void":
        """SetSizeGreatestPrimeFactor(itkFFTPadPositiveIndexImageFilterIF2 self, unsigned long long const _arg)"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_SetSizeGreatestPrimeFactor(self, _arg)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionIF2 *":
        """GetBoundaryCondition(itkFFTPadPositiveIndexImageFilterIF2 self) -> itkImageBoundaryConditionIF2"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_GetBoundaryCondition(self)


    def SetBoundaryCondition(self, boundaryCondition: 'itkImageBoundaryConditionIF2') -> "void":
        """SetBoundaryCondition(itkFFTPadPositiveIndexImageFilterIF2 self, itkImageBoundaryConditionIF2 boundaryCondition)"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_SetBoundaryCondition(self, boundaryCondition)

    __swig_destroy__ = _itkFFTPadPositiveIndexImageFilterPython.delete_itkFFTPadPositiveIndexImageFilterIF2

    def cast(obj: 'itkLightObject') -> "itkFFTPadPositiveIndexImageFilterIF2 *":
        """cast(itkLightObject obj) -> itkFFTPadPositiveIndexImageFilterIF2"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkFFTPadPositiveIndexImageFilterIF2 *":
        """GetPointer(itkFFTPadPositiveIndexImageFilterIF2 self) -> itkFFTPadPositiveIndexImageFilterIF2"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkFFTPadPositiveIndexImageFilterIF2

        Create a new object of the class itkFFTPadPositiveIndexImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadPositiveIndexImageFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFFTPadPositiveIndexImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFFTPadPositiveIndexImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFFTPadPositiveIndexImageFilterIF2.Clone = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_Clone, None, itkFFTPadPositiveIndexImageFilterIF2)
itkFFTPadPositiveIndexImageFilterIF2.GetSizeGreatestPrimeFactor = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_GetSizeGreatestPrimeFactor, None, itkFFTPadPositiveIndexImageFilterIF2)
itkFFTPadPositiveIndexImageFilterIF2.SetSizeGreatestPrimeFactor = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_SetSizeGreatestPrimeFactor, None, itkFFTPadPositiveIndexImageFilterIF2)
itkFFTPadPositiveIndexImageFilterIF2.GetBoundaryCondition = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_GetBoundaryCondition, None, itkFFTPadPositiveIndexImageFilterIF2)
itkFFTPadPositiveIndexImageFilterIF2.SetBoundaryCondition = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_SetBoundaryCondition, None, itkFFTPadPositiveIndexImageFilterIF2)
itkFFTPadPositiveIndexImageFilterIF2.GetPointer = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_GetPointer, None, itkFFTPadPositiveIndexImageFilterIF2)
itkFFTPadPositiveIndexImageFilterIF2_swigregister = _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_swigregister
itkFFTPadPositiveIndexImageFilterIF2_swigregister(itkFFTPadPositiveIndexImageFilterIF2)

def itkFFTPadPositiveIndexImageFilterIF2___New_orig__() -> "itkFFTPadPositiveIndexImageFilterIF2_Pointer":
    """itkFFTPadPositiveIndexImageFilterIF2___New_orig__() -> itkFFTPadPositiveIndexImageFilterIF2_Pointer"""
    return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2___New_orig__()

def itkFFTPadPositiveIndexImageFilterIF2_cast(obj: 'itkLightObject') -> "itkFFTPadPositiveIndexImageFilterIF2 *":
    """itkFFTPadPositiveIndexImageFilterIF2_cast(itkLightObject obj) -> itkFFTPadPositiveIndexImageFilterIF2"""
    return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF2_cast(obj)

class itkFFTPadPositiveIndexImageFilterIF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkFFTPadPositiveIndexImageFilterIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFFTPadPositiveIndexImageFilterIF3_Pointer":
        """__New_orig__() -> itkFFTPadPositiveIndexImageFilterIF3_Pointer"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFFTPadPositiveIndexImageFilterIF3_Pointer":
        """Clone(itkFFTPadPositiveIndexImageFilterIF3 self) -> itkFFTPadPositiveIndexImageFilterIF3_Pointer"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_Clone(self)


    def GetSizeGreatestPrimeFactor(self) -> "unsigned long long":
        """GetSizeGreatestPrimeFactor(itkFFTPadPositiveIndexImageFilterIF3 self) -> unsigned long long"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_GetSizeGreatestPrimeFactor(self)


    def SetSizeGreatestPrimeFactor(self, _arg: 'unsigned long long const') -> "void":
        """SetSizeGreatestPrimeFactor(itkFFTPadPositiveIndexImageFilterIF3 self, unsigned long long const _arg)"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_SetSizeGreatestPrimeFactor(self, _arg)


    def GetBoundaryCondition(self) -> "itkImageBoundaryConditionIF3 *":
        """GetBoundaryCondition(itkFFTPadPositiveIndexImageFilterIF3 self) -> itkImageBoundaryConditionIF3"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_GetBoundaryCondition(self)


    def SetBoundaryCondition(self, boundaryCondition: 'itkImageBoundaryConditionIF3') -> "void":
        """SetBoundaryCondition(itkFFTPadPositiveIndexImageFilterIF3 self, itkImageBoundaryConditionIF3 boundaryCondition)"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_SetBoundaryCondition(self, boundaryCondition)

    __swig_destroy__ = _itkFFTPadPositiveIndexImageFilterPython.delete_itkFFTPadPositiveIndexImageFilterIF3

    def cast(obj: 'itkLightObject') -> "itkFFTPadPositiveIndexImageFilterIF3 *":
        """cast(itkLightObject obj) -> itkFFTPadPositiveIndexImageFilterIF3"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkFFTPadPositiveIndexImageFilterIF3 *":
        """GetPointer(itkFFTPadPositiveIndexImageFilterIF3 self) -> itkFFTPadPositiveIndexImageFilterIF3"""
        return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkFFTPadPositiveIndexImageFilterIF3

        Create a new object of the class itkFFTPadPositiveIndexImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadPositiveIndexImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFFTPadPositiveIndexImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFFTPadPositiveIndexImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFFTPadPositiveIndexImageFilterIF3.Clone = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_Clone, None, itkFFTPadPositiveIndexImageFilterIF3)
itkFFTPadPositiveIndexImageFilterIF3.GetSizeGreatestPrimeFactor = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_GetSizeGreatestPrimeFactor, None, itkFFTPadPositiveIndexImageFilterIF3)
itkFFTPadPositiveIndexImageFilterIF3.SetSizeGreatestPrimeFactor = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_SetSizeGreatestPrimeFactor, None, itkFFTPadPositiveIndexImageFilterIF3)
itkFFTPadPositiveIndexImageFilterIF3.GetBoundaryCondition = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_GetBoundaryCondition, None, itkFFTPadPositiveIndexImageFilterIF3)
itkFFTPadPositiveIndexImageFilterIF3.SetBoundaryCondition = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_SetBoundaryCondition, None, itkFFTPadPositiveIndexImageFilterIF3)
itkFFTPadPositiveIndexImageFilterIF3.GetPointer = new_instancemethod(_itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_GetPointer, None, itkFFTPadPositiveIndexImageFilterIF3)
itkFFTPadPositiveIndexImageFilterIF3_swigregister = _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_swigregister
itkFFTPadPositiveIndexImageFilterIF3_swigregister(itkFFTPadPositiveIndexImageFilterIF3)

def itkFFTPadPositiveIndexImageFilterIF3___New_orig__() -> "itkFFTPadPositiveIndexImageFilterIF3_Pointer":
    """itkFFTPadPositiveIndexImageFilterIF3___New_orig__() -> itkFFTPadPositiveIndexImageFilterIF3_Pointer"""
    return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3___New_orig__()

def itkFFTPadPositiveIndexImageFilterIF3_cast(obj: 'itkLightObject') -> "itkFFTPadPositiveIndexImageFilterIF3 *":
    """itkFFTPadPositiveIndexImageFilterIF3_cast(itkLightObject obj) -> itkFFTPadPositiveIndexImageFilterIF3"""
    return _itkFFTPadPositiveIndexImageFilterPython.itkFFTPadPositiveIndexImageFilterIF3_cast(obj)



