# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorInverseFFTImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkVectorInverseFFTImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkVectorInverseFFTImageFilterPython')
    _itkVectorInverseFFTImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorInverseFFTImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorInverseFFTImageFilterPython
            return _itkVectorInverseFFTImageFilterPython
        try:
            _mod = imp.load_module('_itkVectorInverseFFTImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkVectorInverseFFTImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorInverseFFTImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageSourcePython
import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkVectorInverseFFTImageFilterVICF3ICF3_New():
  return itkVectorInverseFFTImageFilterVICF3ICF3.New()


def itkVectorInverseFFTImageFilterVICF2ICF2_New():
  return itkVectorInverseFFTImageFilterVICF2ICF2.New()


def itkImageToImageFilterVICF3ICF3_New():
  return itkImageToImageFilterVICF3ICF3.New()


def itkImageToImageFilterVICF2ICF2_New():
  return itkImageToImageFilterVICF2ICF2.New()

class itkImageToImageFilterVICF2ICF2(itkImageSourcePython.itkImageSourceICF2):
    """Proxy of C++ itkImageToImageFilterVICF2ICF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterVICF2ICF2 self, itkVectorImageCF2 image)
        SetInput(itkImageToImageFilterVICF2ICF2 self, unsigned int arg0, itkVectorImageCF2 image)
        """
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterVICF2ICF2 self) -> itkVectorImageCF2
        GetInput(itkImageToImageFilterVICF2ICF2 self, unsigned int idx) -> itkVectorImageCF2
        """
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterVICF2ICF2 self, itkVectorImageCF2 image)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterVICF2ICF2 self)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterVICF2ICF2 self, itkVectorImageCF2 image)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterVICF2ICF2 self)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterVICF2ICF2 self, double const _arg)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterVICF2ICF2 self) -> double"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterVICF2ICF2 self, double const _arg)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterVICF2ICF2 self) -> double"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICF2ICF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterVICF2ICF2"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageToImageFilterVICF2ICF2 self) -> itkImageToImageFilterVICF2ICF2"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVICF2ICF2

        Create a new object of the class itkImageToImageFilterVICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterVICF2ICF2.SetInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_SetInput, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.GetInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetInput, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.PushBackInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PushBackInput, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.PopBackInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PopBackInput, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.PushFrontInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PushFrontInput, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.PopFrontInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_PopFrontInput, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.SetCoordinateTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_SetCoordinateTolerance, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.GetCoordinateTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetCoordinateTolerance, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.SetDirectionTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_SetDirectionTolerance, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.GetDirectionTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetDirectionTolerance, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2.GetPointer = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_GetPointer, None, itkImageToImageFilterVICF2ICF2)
itkImageToImageFilterVICF2ICF2_swigregister = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_swigregister
itkImageToImageFilterVICF2ICF2_swigregister(itkImageToImageFilterVICF2ICF2)

def itkImageToImageFilterVICF2ICF2_cast(obj):
    """itkImageToImageFilterVICF2ICF2_cast(itkLightObject obj) -> itkImageToImageFilterVICF2ICF2"""
    return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2ICF2_cast(obj)

class itkImageToImageFilterVICF3ICF3(itkImageSourcePython.itkImageSourceICF3):
    """Proxy of C++ itkImageToImageFilterVICF3ICF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterVICF3ICF3 self, itkVectorImageCF3 image)
        SetInput(itkImageToImageFilterVICF3ICF3 self, unsigned int arg0, itkVectorImageCF3 image)
        """
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterVICF3ICF3 self) -> itkVectorImageCF3
        GetInput(itkImageToImageFilterVICF3ICF3 self, unsigned int idx) -> itkVectorImageCF3
        """
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterVICF3ICF3 self, itkVectorImageCF3 image)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterVICF3ICF3 self)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterVICF3ICF3 self, itkVectorImageCF3 image)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterVICF3ICF3 self)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterVICF3ICF3 self, double const _arg)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterVICF3ICF3 self) -> double"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterVICF3ICF3 self, double const _arg)"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterVICF3ICF3 self) -> double"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICF3ICF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterVICF3ICF3"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkImageToImageFilterVICF3ICF3 self) -> itkImageToImageFilterVICF3ICF3"""
        return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVICF3ICF3

        Create a new object of the class itkImageToImageFilterVICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterVICF3ICF3.SetInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_SetInput, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.GetInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetInput, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.PushBackInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PushBackInput, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.PopBackInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PopBackInput, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.PushFrontInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PushFrontInput, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.PopFrontInput = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_PopFrontInput, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.SetCoordinateTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_SetCoordinateTolerance, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.GetCoordinateTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetCoordinateTolerance, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.SetDirectionTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_SetDirectionTolerance, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.GetDirectionTolerance = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetDirectionTolerance, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3.GetPointer = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_GetPointer, None, itkImageToImageFilterVICF3ICF3)
itkImageToImageFilterVICF3ICF3_swigregister = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_swigregister
itkImageToImageFilterVICF3ICF3_swigregister(itkImageToImageFilterVICF3ICF3)

def itkImageToImageFilterVICF3ICF3_cast(obj):
    """itkImageToImageFilterVICF3ICF3_cast(itkLightObject obj) -> itkImageToImageFilterVICF3ICF3"""
    return _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3ICF3_cast(obj)

class itkVectorInverseFFTImageFilterVICF2ICF2(itkImageToImageFilterVICF2ICF2):
    """Proxy of C++ itkVectorInverseFFTImageFilterVICF2ICF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorInverseFFTImageFilterVICF2ICF2_Pointer"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorInverseFFTImageFilterVICF2ICF2 self) -> itkVectorInverseFFTImageFilterVICF2ICF2_Pointer"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_Clone(self)

    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICF2ICF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorInverseFFTImageFilterVICF2ICF2"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorInverseFFTImageFilterVICF2ICF2 self) -> itkVectorInverseFFTImageFilterVICF2ICF2"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICF2ICF2

        Create a new object of the class itkVectorInverseFFTImageFilterVICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorInverseFFTImageFilterVICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorInverseFFTImageFilterVICF2ICF2.Clone = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_Clone, None, itkVectorInverseFFTImageFilterVICF2ICF2)
itkVectorInverseFFTImageFilterVICF2ICF2.GetPointer = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_GetPointer, None, itkVectorInverseFFTImageFilterVICF2ICF2)
itkVectorInverseFFTImageFilterVICF2ICF2_swigregister = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_swigregister
itkVectorInverseFFTImageFilterVICF2ICF2_swigregister(itkVectorInverseFFTImageFilterVICF2ICF2)

def itkVectorInverseFFTImageFilterVICF2ICF2___New_orig__():
    """itkVectorInverseFFTImageFilterVICF2ICF2___New_orig__() -> itkVectorInverseFFTImageFilterVICF2ICF2_Pointer"""
    return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2___New_orig__()

def itkVectorInverseFFTImageFilterVICF2ICF2_cast(obj):
    """itkVectorInverseFFTImageFilterVICF2ICF2_cast(itkLightObject obj) -> itkVectorInverseFFTImageFilterVICF2ICF2"""
    return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2ICF2_cast(obj)

class itkVectorInverseFFTImageFilterVICF3ICF3(itkImageToImageFilterVICF3ICF3):
    """Proxy of C++ itkVectorInverseFFTImageFilterVICF3ICF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorInverseFFTImageFilterVICF3ICF3_Pointer"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorInverseFFTImageFilterVICF3ICF3 self) -> itkVectorInverseFFTImageFilterVICF3ICF3_Pointer"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_Clone(self)

    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICF3ICF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorInverseFFTImageFilterVICF3ICF3"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorInverseFFTImageFilterVICF3ICF3 self) -> itkVectorInverseFFTImageFilterVICF3ICF3"""
        return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICF3ICF3

        Create a new object of the class itkVectorInverseFFTImageFilterVICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorInverseFFTImageFilterVICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorInverseFFTImageFilterVICF3ICF3.Clone = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_Clone, None, itkVectorInverseFFTImageFilterVICF3ICF3)
itkVectorInverseFFTImageFilterVICF3ICF3.GetPointer = new_instancemethod(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_GetPointer, None, itkVectorInverseFFTImageFilterVICF3ICF3)
itkVectorInverseFFTImageFilterVICF3ICF3_swigregister = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_swigregister
itkVectorInverseFFTImageFilterVICF3ICF3_swigregister(itkVectorInverseFFTImageFilterVICF3ICF3)

def itkVectorInverseFFTImageFilterVICF3ICF3___New_orig__():
    """itkVectorInverseFFTImageFilterVICF3ICF3___New_orig__() -> itkVectorInverseFFTImageFilterVICF3ICF3_Pointer"""
    return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3___New_orig__()

def itkVectorInverseFFTImageFilterVICF3ICF3_cast(obj):
    """itkVectorInverseFFTImageFilterVICF3ICF3_cast(itkLightObject obj) -> itkVectorInverseFFTImageFilterVICF3ICF3"""
    return _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3ICF3_cast(obj)



