---

- name: Launch Go-Ethereum Node
  hosts: localhost
  gather_facts: False

  tasks:
    - name: Set Security Group rules
      set_fact:
        security_group_rules: "{{ security_group_rules | default([]) + [{
          'proto': item.proto,
          'to_port': item.port,
          'from_port': item.port,
          'cidr_ip': item.ip,
        }]}}"
      with_items: "{{firewall_rules}}"
      when: ec2_security_group_ids is not defined and ec2_security_groups is not defined

    - name: Create a security group for ethereum node
      local_action:
        module: ec2_group
        name: "{{ ec2_security_group_name  }}"
        description: "{{ ec2_security_group_description }}"
        region: "{{ aws_region }}"
        state: present
        rules: "{{security_group_rules}}"
        rules_egress: "{{ec2_security_group_rules_egress}}"

      register: security_group
      when: ec2_security_group_ids is not defined and ec2_security_groups is not defined

    - name: Register ec2_security_groups
      set_fact:
        ec2_security_group_ids: "{{[security_group.group_id]}}"
      when: ec2_security_group_ids is not defined and ec2_security_groups is not defined

    - name: Create / Update a new role
      iam_role:
        assume_role_policy_document: '{{lookup("file", aws_iam_role_trust_policy)}}'
        name: '{{ec2_instance_profile_name}}'
        state: present
      register: ec2_iam_role


    - name: Attach the required policy
      iam_policy:
        iam_type: 'role'
        iam_name: '{{ec2_instance_profile_name}}'
        policy_name: '{{item.name}}'
        policy_document: '{{ item.policy_document | default(omit) }}'
        state: present
      with_flattened:
        - '{{aws_default_iam_policies}}'
        - '{{aws_iam_policies}}'

    - name: Create an ec2 instance for ethereum node from ami
      local_action:
        module: ec2
        instance_type: "{{ ec2_instance_type }}"
        assign_public_ip: "{{ ec2_assign_public_ip | default(omit) }}"
        group_id: "{{ec2_security_group_ids}}"
        image: "{{ec2_ami_id}}"
        count: 1
        instance_profile_name: '{{ec2_instance_profile_name}}'
        instance_initiated_shutdown_behavior: "{{ ec2_instance_initiated_shutdown_behavior | default(omit)}}"
        key_name: "{{aws_key}}"
        monitoring: "{{ec2_monitoring | default(omit)}}"
        region: "{{aws_region}}"
        termination_protection: "{{ec2_termination_protection | default(omit)}}"
        instance_tags: "{{ec2_instance_tags}}"
        volumes:
          - device_name: "{{ ec2_volume_name }}"
            volume_size: "{{ ec2_volume_size }}"
            delete_on_termination: "{{ec2_volume_delete_on_termination | default(omit)}}"
        wait: yes
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ethereum_nodes
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      remote_user: '{{ec2_remote_user}}'
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ ec2.instances }}"

- include: provision.yml