from git import Repo
from git.repo import fun
import re
import os
import json
import logging

class ExploitDatabase(object):
    def __init__(self, edb_path, exploitdb_repo):
        if edb_path is None:
            self.edb_path = os.path.dirname(os.path.realpath(__file__)) + \
            '/exploit-database'
        else:
            self.edb_path = edb_path
        self.edb_path = os.path.relpath(self.edb_path)
        self.exploitdb_repo = exploitdb_repo
        self.console_logger = logging.getLogger('console')
        self.exploits = dict()

    def refresh_exploitdb_repository(self):
        self.console_logger.info("Refreshing ExploitDB Repository")
        repo = None
        origin = None
        if fun.is_git_dir(self.edb_path):
            repo = Repo(self.edb_path)
        else:
            repo = Repo.init(self.edb_path)

        try:
            origin = repo.remote('origin')
        except ValueError:
            origin = repo.create_remote('origin', self.exploitdb_repo)
        origin.fetch()

        if 'master' not in repo.heads:
            repo.create_head('master', origin.refs.master)
        repo.heads.master.set_tracking_branch(origin.refs.master)
        repo.heads.master.checkout()
        origin.pull()
        self.console_logger.info("Finished Refreshing ExploitDB Repository")

    def refresh_exploits_with_cves(self):
        self.console_logger.info("Searching for CVE Information" +
                                 " in Known Exploits")
        pattern_string = 'CVE-\d{4}-\d{1,}'
        pattern = re.compile(pattern_string)
        for root, dirnames, filenames in os.walk(self.edb_path):
            for filename in filenames:
                edb_file = open(os.path.join(root, filename), "r")
                content = edb_file.read()
                matches = pattern.findall(content, re.MULTILINE)
                edbid = os.path.splitext(filename)[0]
                if len(matches) > 0:
                    if edbid not in self.exploits.keys():
                        self.exploits[edbid] = dict(filename=edb_file.name,
                                                cves=[])
                    for cveid in matches:
                        if cveid not in self.exploits[edbid]['cves']:
                            self.exploits[edbid]['cves'].append(cveid)

        self.console_logger.info("Finished Searching for CVE Information" +
                                 " in Known Exploits")
