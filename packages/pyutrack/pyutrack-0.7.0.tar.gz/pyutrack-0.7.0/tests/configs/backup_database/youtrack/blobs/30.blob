Fùvar jira = require('./jira');
var importUtils = require('v1/import/utils');
var entities = require('v1/entities');
var utils = require('v1/utils');
var events = require('./events');
var constants = require('./constants');
var entityConverters = require('./entityConverters');
var jiraImportContext = require('./importContext');
var jiraClient = jiraImportContext.getJiraClient();

var toSimpleType = function (ytFieldName, project, jiraProject, jiraFieldPrototype, jiraProjectField) {
  var from = jiraFieldPrototype.id + '<' + jiraFieldPrototype.$typeName + '>';
  var to = jiraFieldPrototype.$ytPrototype.name + '<' + jiraFieldPrototype.$ytPrototype.getTypeName() + '>';
  console.debug('Converting schema for field: ' + from + ' -> ' + to);
  return jiraFieldPrototype.$ytPrototype.findOrCreateProjectCustomField(project);
};
var toEnumType = function (createBundleElement, defaultValuesName) {
  defaultValuesName = defaultValuesName || 'defaultValues';
  return function (ytFieldName, project, jiraProject, jiraFieldPrototype, jiraProjectField) {
    var ytProjectCustomField = toSimpleType(ytFieldName, project, jiraProject, jiraFieldPrototype, jiraProjectField);
    var ytFieldInfo = ytFieldName + '<' + jiraFieldPrototype.$ytPrototype.getTypeName() + '>';
    var bundle = ytProjectCustomField.bundle;
    if (bundle == null) { // the field has just been created
      var bundleName = project.shortName + ' ' + ytFieldName + ' Bundle';
      bundle = ytProjectCustomField.createBundle(bundleName);
      console.info('Created ' + bundle.name + ' bundle for field: ' + ytFieldInfo);
    } else {
      console.info('Found ' + bundle.name + ' bundle for field: ' + ytFieldInfo);
    }
    var lastAllowedValue;
    jiraProjectField && jiraProjectField.allowedValues && jiraProjectField.allowedValues.forEach(function (value) {
      var element = createBundleElement(bundle, value, jiraProject);
      // null element denotes skipped element, i.e 'done' statuses
      if (element) {
        lastAllowedValue = {
          name: valueFromName(value),
          element: element
        };
      }
    });

    // try to set canBeEmpty and defaultValues properties
    var required = (jiraProjectField && jiraProjectField.required) || false;
    var defaultValues = ytProjectCustomField[defaultValuesName];
    if (required && defaultValues && defaultValues.isEmpty() && lastAllowedValue) {
      ytProjectCustomField.canBeEmpty = false;
      defaultValues.add(lastAllowedValue.element);
      console.trace(ytFieldInfo + ' updated, (canBeEmpty: false, defaultValues: [' + lastAllowedValue.name + '])');
    } else if (required && defaultValues && !defaultValues.isEmpty()) {
      console.trace(ytFieldInfo + ' up-to-date, (canBeEmpty: ' +  ytProjectCustomField.canBeEmpty + ')');
    } else if (!ytProjectCustomField.canBeEmpty) {
      ytProjectCustomField.canBeEmpty = true;
      console.trace(ytFieldInfo + ' updated, (canBeEmpty: true)');
    }

    return ytProjectCustomField;
  }
};
var toGroupType = function (ytFieldName, project, jiraProject, jiraFieldPrototype, jiraProjectField) {
  var projectCustomField = toSimpleType(ytFieldName, project, jiraProject, jiraFieldPrototype, jiraProjectField);
  jiraProjectField && jiraProjectField.allowedValues && jiraProjectField.allowedValues.forEach(function (jiraGroup) {
    entityConverters.group(jiraGroup);
  });
  var required = jiraProjectField && jiraProjectField.required;
  projectCustomField.canBeEmpty = !required;
  var defaultValues = projectCustomField.defaultValues;
  var defaultValuesEmpty = !defaultValues || defaultValues.isEmpty();
  if (required && defaultValuesEmpty) {
    defaultValues.add(entities.UserGroup.getAllUsersGroup());
  }
  return projectCustomField;
};
var createEnumBundleElem = function (bundle, jiraFieldValue) {
  var jiraFieldValueName = jiraFieldValue && extractValueUniversally(jiraFieldValue);
  if (!jiraFieldValueName) {
    importUtils.throw('Tried to add undefined enum element or enum element with undefined name to bundle ' + bundle.name);
  }
  var ytFieldValueName = utils.StringUtils.unforbid(jiraFieldValueName);
  var elem = bundle.findOrCreateElement(ytFieldValueName);
  var elemInfo = '{jira name: '  + jiraFieldValueName + '} ' + ytFieldValueName;
  console.info('Added enum element ' + elemInfo + ' to bundle ' + bundle.name);
  return elem;
};
var createUserBundleElem = function (bundle, jiraUser) {
  var jiraUserName = jiraUser && jiraUser.name;
  // It's not supposed to be null users among the custom field values
  if (!jiraUserName) {
    importUtils.throw('Tried to add undefined user or user with undefined name to bundle ' + bundle.name);
  }
  console.info('Creating user ' + jiraUserName + ' to add to bundle ' + bundle.name);
  var ytUser = entityConverters.user(jiraUser);
  var userInfo = '{jira name: ' + jiraUserName + '} ' + ytUser.login;
  console.info('Add user ' + userInfo + ' to bundle ' + bundle.name);
  bundle.individuals.add(ytUser);
  return ytUser;
};

var findByName = function (arr, name) {
  arr = arr || [];
  for (var i = 0; i < arr.length; i++) {
    if (arr[i].name === name) {
      return arr[i];
    }
  }
  return null;
};


var createOwnedBundleElem = function (bundle, jiraComponent) {
  var componentName = jiraComponent && jiraComponent.name;
  if (!componentName) {
    importUtils.throw('Tried to add undefined owned field value or owned field value with undefined name to bundle ' + bundle.name);
  }
  var ytComponentName = utils.StringUtils.unforbid(componentName);
  var elem = bundle.findOrCreateElement(ytComponentName);
  jiraComponent = jiraClient.getComponent(jiraComponent.id, jiraImportContext.networkFailureHandler);
  var componentAssignee = jiraComponent.realAssignee || jiraComponent.assignee;
  var owner = componentAssignee && entityConverters.user(componentAssignee);
  elem.owner = owner ? owner : null;
  var versionInfo = '{jira name: '  + componentName + '} ' + ytComponentName;
  console.info('Added/Found owned field value ' + versionInfo + ' to bundle ' + bundle.name);
  return elem;
};

var createVersionBundleElem = function (bundle, jiraVersion, jiraProject) {
  var versionName = jiraVersion && jiraVersion.name;
  if (!versionName) {
    importUtils.throw('Tried to add undefined version or version with undefined name to bundle ' + bundle.name);
  }
  if (!jiraVersion.self) {
    var projectVersions = jiraClient.getProjectVersions(jiraProject.key, jiraImportContext.networkFailureHandler);
    jiraVersion = findByName(projectVersions, versionName) || jiraVersion;
  }
  var ytVersionName = utils.StringUtils.unforbid(versionName);
  var elem = bundle.findOrCreateElement(ytVersionName);
  if (jiraVersion.self) {
    elem.released = jiraVersion.released;
    elem.archived = jiraVersion.archived;
    jiraVersion.releaseDate && (elem.releaseDate = jira.parseDate(jiraVersion.releaseDate));
  }
  var versionInfo = '{jira name: '  + versionName + (jiraVersion.self ? ', actual} ' : ', obsolete} ') + ytVersionName;
  console.info('Added/Found version ' + versionInfo + ' to bundle ' + bundle.name);
  return elem;
};

var createStateBundleElemFromStatus = function (bundle, jiraStatus) {
  var statusName = jiraStatus && jiraStatus.name;
  if (!statusName) {
    importUtils.throw('Tried to add undefined status or status with undefined name to bundle ' + bundle.name);
  }
  if (!jiraStatus.self) {
    jiraStatus = findByName(jiraImportContext.fieldSchema.statuses, statusName) || jiraStatus;
  }
  var ytStateName = utils.StringUtils.unforbid(statusName);
  var elem = bundle.findOrCreateElement(ytStateName);
  if (jiraStatus.self) {
    elem.description = jiraStatus.description;
    var statusKey = jiraStatus.statusCategory && jiraStatus.statusCategory.key;
    if (statusKey) {
      elem.colorIndex = constants.stateColors[statusKey];
      elem.isResolved = statusKey === 'done';
    } else {
      elem.isResolved = false;
    }
  }
  var stateInfo = '{jira name: ' + statusName + (jiraStatus.self ? ', actual} ' : ', obsolete} ' + ytStateName);
  console.info('Added/Found status-state ' + stateInfo + ' to bundle ' + bundle.name);
  return elem;
};

var createStateBundleElemFromResolution = function (bundle, jiraResolution) {
  var resolutionName = jiraResolution && jiraResolution.name;
  if (!resolutionName) {
    importUtils.throw('Tried to add undefined resolution or resolution with undefined name to bundle ' + bundle.name);
  }
  if (!jiraResolution.self) {
    jiraResolution = findByName(jiraImportContext.fieldSchema.resolutions, resolutionName) || jiraResolution;
  }
  var ytStateName = utils.StringUtils.unforbid(resolutionName);
  var elem = bundle.findOrCreateElement(ytStateName);
  if (jiraResolution.self) {
    elem.description = jiraResolution.description;
  }
  elem.isResolved = true;
  var stateInfo = '{jira name: ' + resolutionName + (jiraResolution.self ? ', actual} ' : ', obsolete} ' + ytStateName);
  console.info('Added/Found resolution-state ' + stateInfo + ' to bundle ' + bundle.name);
  return elem;
};

var extractValueUniversally = function (element) {
  return element.value ? element.value : (element.name ? element.name : element);
};

var valueFromName = function (jiraFieldValue) {
  return jiraFieldValue ? utils.StringUtils.unforbid(extractValueUniversally(jiraFieldValue)) : null;
};

var valueFromUser = function (jiraUser) {
  return entityConverters.user(jiraUser);
};

var valueFromGroup = function (jiraGroup) {
  return entityConverters.group(jiraGroup);
};

var dumbConvertValue = function (ytFieldName, jiraFieldValue, issue, jiraIssue) {
  return issue[ytFieldName] = jiraFieldValue;
};
var convertSingleValue = function (extract) {
  return function (ytFieldName, jiraFieldValue, issue, jiraIssue) {
    return issue[ytFieldName] = jiraFieldValue ? extract(jiraFieldValue, jiraIssue) : null;
  };
};
var convertMultiValue = function (extract) {
  return function (ytFieldName, jiraFieldValue, issue, jiraIssue) {
    if (!issue[ytFieldName]) {
      console.warn('Field \'' + ytFieldName + '\' does not exist');
      return null;
    }
    if (!jiraFieldValue || jiraFieldValue.length == 0) {
      issue[ytFieldName].clear();
      return [];
    }
    var field = issue[ytFieldName];
    jiraFieldValue.forEach(function (singleValue) {
      // skip empty values
      if (singleValue) {
        field.add(extract(singleValue));
      }
    });
    return issue[ytFieldName];
  };
};

var valueFromShortTime = function (jiraFieldValue) {
  return jiraFieldValue ? jira.parseShortTime(jiraFieldValue).toString() : jiraFieldValue;
};

var valueFromLongTime = function (jiraFieldValue) {
  return jiraFieldValue ? jira.parseTimestamp(jiraFieldValue).toString() : jiraFieldValue;
};

var valueFromDate = function (jiraFieldValue) {
  return jiraFieldValue ? jira.parseDate(jiraFieldValue).toString() : jiraFieldValue;
};

var ytUserLoginFromJiraLogin = function (login) {
  if (!login) {
    return null;
  }
  console.trace('Transforming ' + login + ' to YT user login');
  var user = entityConverters.user({name: login});
  return user ? user.login : null;
};

var ytUserLoginsFromJiraLogins = function (logins) {
  if (!logins) {
    return null;
  }
  console.trace('Transforming ' + utils.StringUtils.toString(logins) + ' to YT user logins');
  return logins.map(ytUserLoginFromJiraLogin);
};

var attachImportLink = function (jiraIssue, jiraIssueTo, ytLinkTypeName, outward) {
    attachImportLinkByIssueId(jiraIssue, jiraIssueTo.id, ytLinkTypeName, outward)
};

var attachImportLinkByIssueId = function(jiraIssue, jiraIssueToId, ytLinkTypeName, outward) {
    jiraIssue.importLinks || (jiraIssue.importLinks = {});
    jiraIssue.importLinks[jiraIssueToId] = {
        toId: jiraIssueToId,
        typeName: ytLinkTypeName,
        outward: outward
    };
};

exports.attachImportLink = attachImportLink;

exports['date'] = {
  convertType: 'date',
  convertSchema: toSimpleType,
  convertValue: convertSingleValue(valueFromDate),
  convertEvent: events.field,
  transformEvent: events.extractFromId(valueFromDate)
};
exports['datetime'] = {
  convertType: 'date',
  convertSchema: toSimpleType,
  convertValue: convertSingleValue(valueFromLongTime),
  convertEvent: events.field,
  transformEvent: events.extractFromId(valueFromShortTime)
};
exports['string'] = {
  convertType: 'string',
  convertSchema: toSimpleType,
  convertValue: dumbConvertValue,
  convertEvent: events.field,
  transformEvent: events.extractFromString()
};
exports['text'] = {
  convertType: 'string',
  convertSchema: toSimpleType,
  convertValue: dumbConvertValue,
  convertEvent: events.field,
  transformEvent: events.extractFromString()
};
exports['number'] = {
  convertType: 'float',
  convertSchema: toSimpleType,
  convertValue: dumbConvertValue,
  convertEvent: events.field,
  transformEvent: events.extractFromString()
};
exports['user[1]'] = {
  convertType: 'user[1]',
  convertSchema: toEnumType(createUserBundleElem, 'defaultUsers'),
  convertValue: convertSingleValue(valueFromUser),
  convertEvent: function (event, ytFieldName) {
    event.from = ytUserLoginFromJiraLogin(event.from);
    event.to = ytUserLoginFromJiraLogin(event.to);
    events.field(event, ytFieldName);
  },
  transformEvent: events.extractFromId()
};
exports['user[*]'] = {
  convertType: 'user[*]',
  convertSchema: toEnumType(createUserBundleElem, 'defaultUsers'),
  convertValue: convertMultiValue(valueFromUser),
  convertEvent: function (event, ytFieldName) {
    event.from = ytUserLoginsFromJiraLogins(event.from);
    event.to = ytUserLoginsFromJiraLogins(event.to);
    events.field(event, ytFieldName);
  },
  transformEvent: events.extractFromId(events.stripBrackets(events.splitToArray()))
};
exports['group'] = exports['group[1]'] = {
  convertType: 'group[1]',
  convertSchema: toGroupType,
  convertValue: convertSingleValue(valueFromGroup),
  convertEvent: events.field,
  transformEvent: events.extractFromString(events.stripBrackets())
};
exports['group[*]'] = {
  convertType: 'group[*]',
  convertSchema: toGroupType,
  convertValue: convertMultiValue(valueFromGroup),
  convertEvent: events.field,
  transformEvent: events.extractFromString(events.stripBrackets(events.splitToArray()))
};
exports['priority[1]'] = {
  convertType: 'enum[1]',
  convertSchema: toEnumType(createEnumBundleElem),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['issuetype[1]'] = {
  convertType: 'enum[1]',
  convertSchema: toEnumType(createEnumBundleElem),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['string[1]'] = exports['option[1]'] = {
  convertType: 'enum[1]',
  convertSchema: toEnumType(createEnumBundleElem),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['string[*]'] = {
  convertType: 'enum[*]',
  convertSchema: toEnumType(createEnumBundleElem),
  convertValue: convertMultiValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(events.splitToArray(',', utils.StringUtils.unforbid))
};
exports['component[1]'] = {
  convertType: 'ownedField[1]',
  convertSchema: toEnumType(createOwnedBundleElem),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['component[*]'] = {
  convertType: 'ownedField[*]',
  convertSchema: toEnumType(createOwnedBundleElem),
  convertValue: convertMultiValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(events.splitToArray(',', utils.StringUtils.unforbid))
};
exports['version[1]'] = {
  convertType: 'version[1]',
  convertSchema: toEnumType(createVersionBundleElem),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['version[*]'] = {
  convertType: 'version[*]',
  convertSchema: toEnumType(createVersionBundleElem),
  convertValue: convertMultiValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(events.splitToArray(',', utils.StringUtils.unforbid))
};
exports['label[*]'] = {
  convertType: 'enum[*]',
  convertSchema: toEnumType(createEnumBundleElem),
  convertValue: convertMultiValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(events.splitToArray(' ', utils.StringUtils.unforbid))
};
exports['status'] = {
  convertType: 'state[1]',
  convertSchema: toEnumType(createStateBundleElemFromStatus),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['resolution'] = {
  convertType: 'state[1]',
  convertSchema: toEnumType(createStateBundleElemFromResolution),
  convertValue: convertSingleValue(valueFromName),
  convertEvent: events.field,
  transformEvent: events.extractFromString(utils.StringUtils.unforbid)
};
exports['com.pyxis.greenhopper.jira:gh-epic-link'] = {
  convertSchema: utils.no_op(),
  embedded: true,
  convertValue: function(ytFieldName, jiraFieldValue, issue, jiraIssue) {
      if (jiraFieldValue) {
          var jiraIssueId = jiraClient.getIssue(jiraFieldValue, jiraImportContext.networkFailureHandler).id;

          attachImportLinkByIssueId(jiraIssue, jiraIssueId, 'Subtask', false);
          var author = entityConverters.user(jiraIssue.fields.reporter);
          var constructedItem = {
              field: 'parent',
              to: jiraIssueId,
              toString: jiraIssueId
          };
          events.attachImportEvents(jiraIssue, 'parent', issue, author, issue.updated, constructedItem);
      }
  },
  transformEvent: events.extractFromId(),
  convertEvent: events.link
};
