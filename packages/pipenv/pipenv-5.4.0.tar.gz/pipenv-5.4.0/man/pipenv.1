.\" Man page generated from reStructuredText.
.
.TH "PIPENV" "1" "Jul 30, 2017" "5.1.2" "pipenv"
.SH NAME
pipenv \- pipenv Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
\fI\%\fP\fI\%\fP\fI\%\fP\fI\%\fP\fI\%\fP\fI\%\fP
.sp
.ce
----

.ce 0
.sp
.sp
\fBPipenv\fP is a project that aims to bring the best of all packaging worlds to the Python world. It harnesses \fI\%Pipfile\fP, \fI\%pip\fP, and \fI\%virtualenv\fP into one single toolchain. It features very pretty terminal colors.
.sp
It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your \fBPipfile\fP as you install/uninstall packages. The \fBlock\fP command generates a lockfile (\fBPipfile.lock\fP).
[image]
.SH USER TESTIMONIALS
.INDENT 0.0
.TP
\fBJannis Leidel\fP, former pip maintainer—
\fIPipenv is the porcelain I always wanted built for pip. It fits my brain and mostly replaces virtualenvwrapper and manual pip calls for me. Use it.\fP
.TP
\fBJhon Crypt\fP—
\fIpipenv is the best thing since pip, thank you!\fP
.TP
\fBIsaac Sanders\fP—
\fIpipenv is literally the best thing about my day today. Thanks, Kenneth!\fP
.UNINDENT
.SH ☤ PIPENV FEATURES
.INDENT 0.0
.IP \(bu 2
Enables truly \fIdeterministic builds\fP, while easily specifying \fIwhat you want\fP\&.
.IP \(bu 2
Automatically generates and checks file hashes for locked dependencies (via \fB\-\-hashes\fP).
.IP \(bu 2
Automatically finds your project home, recursively, by looking for a \fBPipfile\fP\&.
.IP \(bu 2
Automatically generates a \fBPipfile\fP, if one doesn’t exist.
.IP \(bu 2
Automatically generates a \fBPipfile.lock\fP, if one doesn’t exist.
.IP \(bu 2
Automatically creates a virtualenv in a standard location.
.IP \(bu 2
Automatically adds packages to a Pipfile when they are installed.
.IP \(bu 2
Automatically removes packages from a Pipfile when they are un\-installed.
.IP \(bu 2
Also automatically updates pip.
.UNINDENT
.sp
The main commands are \fBinstall\fP, \fBuninstall\fP, and \fBlock\fP, which generates a \fBPipfile.lock\fP\&. These are intended to replace \fB$ pip install\fP usage, as well as manual virtualenv management (to activate a virtualenv, run \fB$ pipenv shell\fP).
.SS Basic Concepts
.INDENT 0.0
.IP \(bu 2
A virtualenv will automatically be created, when one doesn’t exist.
.IP \(bu 2
When no parameters are passed to \fBinstall\fP, all packages \fB[packages]\fP specified will be installed.
.IP \(bu 2
To initialize a Python 3 virtual environment, run \fB$ pipenv \-\-three\fP\&.
.IP \(bu 2
To initialize a Python 2 virtual environment, run \fB$ pipenv \-\-two\fP\&.
.IP \(bu 2
Otherwise, whatever virtualenv defaults to will be the default.
.UNINDENT
.SS Other Commands
.INDENT 0.0
.IP \(bu 2
\fBshell\fP will spawn a shell with the virtualenv activated.
.IP \(bu 2
\fBrun\fP will run a given command from the virtualenv, with any arguments forwarded (e.g. \fB$ pipenv run python\fP).
.IP \(bu 2
\fBcheck\fP asserts that PEP 508 requirements are being met by the current environment.
.UNINDENT
.SH ☤ PIPENV USAGE
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipenv
Usage: pipenv [OPTIONS] COMMAND [ARGS]...

Options:
  \-\-where          Output project home information.
  \-\-venv           Output virtualenv information.
  \-\-rm             Remove the virtualenv.
  \-\-bare           Minimal output.
  \-\-three / \-\-two  Use Python 3/2 when creating virtualenv.
  \-\-python TEXT    Specify which version of Python virtualenv should use.
  \-h, \-\-help       Show this message then exit.
  \-\-version        Show the version and exit.


Usage Examples:
   Create a new project using Python 3:
   $ pipenv \-\-three

   Install all dependencies for a project (including dev):
   $ pipenv install \-\-dev

   Create a lockfile:
   $ pipenv lock

Commands:
  check      Checks PEP 508 markers provided in Pipfile.
  install    Installs provided packages and adds them to...
  lock       Generates Pipfile.lock.
  run        Spawns a command installed into the...
  shell      Spawns a shell within the virtualenv.
  uninstall  Un\-installs a provided package and removes it...
  update     Updates pip to latest version, uninstalls all...
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipenv \-\-where
Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipenv install
Creating a virtualenv for this project...
\&...
No package provided, installing all dependencies.
Virtualenv location: /Users/kennethreitz/repos/kr/pip2/test/.venv
Installing dependencies from Pipfile.lock...
\&...

To activate this project\(aqs virtualenv, run the following:
$ pipenv shell
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FURTHER DOCUMENTATION GUIDES
.SS Advanced Usage of Pipenv
.sp
This document covers some of pipenv’s more advanced features.
.SS ☤ Example Pipfile & Pipfile.lock
.sp
Here is a simple example of a \fBPipfile\fP and the resulting \fBPipfile.lock\fP\&.
.SS Example Pipfile
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[dev\-packages]
pytest = "*"

[packages]
requests = "*"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example Pipfile.lock
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  {
    "default": {
        "requests": {
            "version": "==2.13.0",
            "hash": "sha256:1a720e8862a41aa22e339373b526f508ef0c8988baf48b84d3fc891a8e237efb"
        }
    },
    "develop": {
        "packaging": {
            "version": "==16.8",
            "hash": "sha256:99276dc6e3a7851f32027a68f1095cd3f77c148091b092ea867a351811cfe388"
        },
        "pytest": {
            "version": "==3.0.6",
            "hash": "sha256:da0ab50c7eec0683bc24f1c1137db1f4111752054ecdad63125e7ec71316b813"
        },
        "setuptools": {
            "version": "==34.1.0",
            "hash": "sha256:edd9d39782fe38b9c533002b2e6fdf06498793cbd29266accdcc519431d4b7ba"
        },
        "pyparsing": {
            "version": "==2.1.10",
            "hash": "sha256:67101d7acee692962f33dd30b5dce079ff532dd9aa99ff48d52a3dad51d2fe84"
        },
        "py": {
            "version": "==1.4.32",
            "hash": "sha256:2d4bba2e25fff58140e6bdce1e485e89bb59776adbe01d490baa6b1f37a3dd6b"
        },
        "six": {
            "version": "==1.10.0",
            "hash": "sha256:0ff78c403d9bccf5a425a6d31a12aa6b47f1c21ca4dc2573a7e2f32a97335eb1"
        },
        "appdirs": {
            "version": "==1.4.0",
            "hash": "sha256:85e58578db8f29538f3109c11250c2a5514a2fcdc9890d9b2fe777eb55517736"
        }
    },
    "_meta": {
        "sources": [
            {
                "url": "https://pypi.python.org/simple",
                "verify_ssl": true
            }
        ],
        "requires": {},
        "hash": {
            "sha256": "08e3181df84d04301c9d435357ec9cf43c4a491d79a1ada682cce8936c492f49"
        }
    }
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ☤ Importing from requirements.txt
.sp
If you only have a \fBrequirements.txt\fP file available when running \fBpipenv install\fP,
pipenv will automatically import the contents of this file and create a \fBPipfile\fP for you.
.SS ☤ Specifying Versions
.sp
To tell pipenv to install a specific version of a library, the usage is simple:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipenv install requests==2.13.0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will update your \fBPipfile\fP to reflect this requirement, automatically.
.SS ☤ Fancy Installation of Pipenv
.sp
To install pipenv in a fancy way, we recommend using \fI\%pipsi\fP\&.
.sp
Pipsi is a powerful tool which allows you to install Python scripts into isolated virtual environments.
.sp
To install pipsi, first run this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ curl https://raw.githubusercontent.com/mitsuhiko/pipsi/master/get\-pipsi.py | python
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Follow the instructions, you’ll have to update your \fBPATH\fP\&.
.sp
Then, simply run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipsi install pew
$ pipsi install pipenv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To upgrade pipenv at any time:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipsi upgrade pipenv
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will install both \fBpipenv\fP and \fBpew\fP (one of our dependencies) in an isolated virtualenv, so it doesn’t interfere with the rest of your Python installation!
.SS ☤ Environment Management with Pipenv
.sp
The three primary commands you’ll use in managing your pipenv environment are
\fB$ pipenv install\fP, \fB$ pipenv uninstall\fP, and \fB$ pipenv lock\fP\&.
.SS $ pipenv install
.sp
\fB$ pipenv install\fP is used for installing packages into the pipenv virtual environment
and updating your Pipfile.
.sp
Along with the basic install command, which takes the form:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ pipenv install [package names]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The user can provide these additional parameters:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fB\-\-two\fP — Performs the installation in a virtualenv using the system \fBpython2\fP link.
.IP \(bu 2
\fB\-\-three\fP — Performs the installation in a virtualenv using the system \fBpython3\fP link.
.IP \(bu 2
\fB\-\-python\fP — Performs the installation in a virtualenv using the provided Python intepreter.
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
None of the above commands should be used together. They are also
\fBdestructive\fP and will delete your current virtualenv before replacing
it with an appropriately versioned one.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The virtualenv created by Pipenv may be different from what you were expecting.
Dangerous characters (i.e. \fB$\(ga!*@"\fP as well as space, line feed, carriage return,
and tab) are converted to underscores. Additionally, the full path to the current
folder is encoded into a “slug value” and appended to ensure the virtualenv name
is unique.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fB\-\-dev\fP — Install both \fBdevelop\fP and \fBdefault\fP packages from \fBPipfile.lock\fP\&.
.IP \(bu 2
\fB\-\-system\fP — Use the system \fBpip\fP command rather than the one from your virtualenv.
.IP \(bu 2
\fB\-\-lock\fP — Generate a new \fBPipfile.lock\fP adding the newly installed packages.
.IP \(bu 2
\fB\-\-ignore\-pipfile\fP — Ignore the \fBPipfile\fP and install from the \fBPipfile.lock\fP\&.
.UNINDENT
.UNINDENT
.UNINDENT
.SS $ pipenv uninstall
.sp
\fB$ pipenv uninstall\fP supports all of the parameters in \fI\%pipenv install\fP,
as well as one additonal, \fB\-\-all\fP\&.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fB\-\-all\fP — This parameter will purge all files from the virtual environment,
but leave the Pipfile untouched.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS $ pipenv lock
.sp
\fB$ pipenv lock\fP is used to create a \fBPipfile.lock\fP, which declares \fBall\fP dependencies (and sub\-depdendencies) of your project, their latest available versions, and the current hashes for the downloaded files. This ensures repeatable, and most importantly \fIdeterministic\fP, builds.
.SS ☤ Configuration With Environment Variables
.sp
\fBpipenv\fP comes with a handful of options that can be enabled via shell environment
variables. To activate them, simply create the variable in your shell and pipenv
will detect it.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBPIPENV_SHELL_COMPAT\fP — Toggle from our default \fBpipenv shell\fP mode to classic.
(Suggested for use with pyenv).
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBPIPENV_VENV_IN_PROJECT\fP — Toggle for detecting a \fB\&.venv\fP in your project directory
and using it over the default environment manager, \fBpew\fP\&.
.UNINDENT
.IP \(bu 2
\fBPIPENV_COLORBLIND\fP — Disable terminal colors, for some reason.
.IP \(bu 2
\fBPIPENV_NOSPIN\fP — Disable terminal spinner, for cleaner logs.
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBPIPENV_MAX_DEPTH\fP — Set to an integer for the maximum number of directories to
search for a Pipfile.
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBPIPENV_TIMEOUT\fP — Set to an integer for the max number of seconds pipenv will
wait for virtualenv creation to complete.  Defaults to 120 seconds.
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B \fBPIPENV_IGNORE_VIRTUALENVS\fP — Set to disable automatically using an activated virtualenv over
the current project.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS ☤ Custom Virtual Environment Location
.sp
Pipenv’s underlying \fBpew\fP dependency will automatically honor the \fBWORKON_HOME\fP environment
variable, if you have it set —\ so you can tell pipenv to store your virtual environments wherever you want, e.g.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
export WORKON_HOME=~/.venvs
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ☤ Testing Projects
.sp
While pipenv is still a relatively new project, it’s already being used in
projects like \fI\%Requests\fP\&. Specifically for transitioning to the new Pipfile
format and running the test suite.
.sp
We’ve currently tested deployments with both \fI\%Travis\-CI\fP and \fI\%tox\fP with success.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
It’s highly recommended to run \fBpipenv lock\fP before installing on a
CI platform, due to possible hash conflicts between system binaries.
.UNINDENT
.UNINDENT
.SS Travis CI
.sp
An example Travis CI setup can be found in \fI\%Requests\fP\&. The project uses a Makefile to
define common functions such as its \fBinit\fP and \fBtests\fP commands. Here is
a stripped down example \fB\&.travis.yml\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
language: python
python:
    \- "2.6"
    \- "2.7"
    \- "3.3"
    \- "3.4"
    \- "3.5"
    \- "3.6"
    \- "3.7dev"

# command to install dependencies
install: "make"

# command to run tests
script:
    \- make test
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and the corresponding Makefile:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
init:
    pip install pipenv
    pipenv install \-\-dev

test:
    pipenv run py.test tests
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Tox Automation Project
.sp
Alternatively, you can configure a \fBtox.ini\fP like the one below for both local
and external testing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[tox]
envlist = flake8\-py3, py26, py27, py33, py34, py35, py36, pypy

[testenv]
passenv=HOME
deps = pipenv
commands=
    pipenv install \-\-dev
    pipenv run py.test tests

[testenv:flake8\-py3]
passenv=HOME
basepython = python3.4
commands=
    {[testenv]deps}
    pipenv install \-\-dev
    pipenv run flake8 \-\-version
    pipenv run flake8 setup.py docs project test
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
With Pipenv’s default configuration, you’ll need to use tox’s \fBpassenv\fP parameter
to pass your shell’s \fBHOME\fP variable.
.UNINDENT
.UNINDENT
.SS ☤ Pipfile.lock Security Features
.sp
\fBPipfile.lock\fP takes advantage of some great new security improvements in \fBpip\fP\&.
By default, the \fBPipfile.lock\fP will be generated with a sha256 hash of each downloaded
package. This will allow \fBpip\fP to guarantee you’re installing what you intend to when
on a compromised network, or downloading dependencies from an untrusted PyPI endpoint.
.sp
We highly recommend approaching deployments with promoting projects from a development
environment into production. You can use \fBpipenv lock\fP to compile your dependencies on
your development environment and deploy the compiled \fBPipfile.lock\fP to all of your
production environments for reproducible builds.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Due to different hashes being generated between wheels on different systems, you
will find hashes don’t work cross\-platform or between Python versions.
To solve this, you may either compile the lock file on your target system, or use
the less secure \fBpipenv install \-\-ignore\-hashes\fP\&. If you wish to produce a
Pipfile.lock without hashes, you may also use \fBpipenv lock \-\-no\-hashes\fP\&.
.UNINDENT
.UNINDENT
.SS ☤ Shell Completion
.sp
Set \fB_PIPENV_COMPLETE\fP and then source the output of the program.
For example, with \fBfish\fP, put this in your
\fB~/.config/fish/completions/pipenv.fish\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
eval (env _PIPENV_COMPLETE=source\-fish pipenv)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Magic shell completions are now enabled!
.sp
✨🍰✨
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Kenneth Reitz
.SH COPYRIGHT
2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
.\" Generated by docutils manpage writer.
.
