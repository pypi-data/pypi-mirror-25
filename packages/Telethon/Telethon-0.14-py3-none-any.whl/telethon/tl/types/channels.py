"""File generated by TLObjects' generator. All changes will be ERASED"""
from ...tl.tlobject import TLObject
import os
import struct


class AdminLogResults(TLObject):
    constructor_id = 0xed8af74d
    subclass_of_id = 0x51f076bc

    def __init__(self, events, chats, users):
        """
        :param list[TLObject] events:
        :param list[TLObject] chats:
        :param list[TLObject] users:

        Constructor for channels.AdminLogResults: Instance of AdminLogResults.
        """
        super().__init__()

        self.events = events
        self.chats = chats
        self.users = users

    def to_dict(self, recursive=True):
        return {
            'events': ([] if self.events is None else [None if x is None else x.to_dict() for x in self.events]) if recursive else self.events,
            'chats': ([] if self.chats is None else [None if x is None else x.to_dict() for x in self.chats]) if recursive else self.chats,
            'users': ([] if self.users is None else [None if x is None else x.to_dict() for x in self.users]) if recursive else self.users,
        }

    def to_bytes(self):
        return b''.join((b'M\xf7\x8a\xed',b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.events)),b''.join(x.to_bytes() for x in self.events),b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.chats)),b''.join(x.to_bytes() for x in self.chats),b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(x.to_bytes() for x in self.users),))

    @staticmethod
    def empty():
        return AdminLogResults(None, None, None)

    def on_response(self, reader):
        reader.read_int()
        self.events = []
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.events.append(_x)

        reader.read_int()
        self.chats = []
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.chats.append(_x)

        reader.read_int()
        self.users = []
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.users.append(_x)

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class ChannelParticipant(TLObject):
    constructor_id = 0xd0d9b163
    subclass_of_id = 0x6658151a

    def __init__(self, participant, users):
        """
        :param TLObject participant:
        :param list[TLObject] users:

        Constructor for channels.ChannelParticipant: Instance of ChannelParticipant.
        """
        super().__init__()

        self.participant = participant
        self.users = users

    def to_dict(self, recursive=True):
        return {
            'participant': (None if self.participant is None else self.participant.to_dict()) if recursive else self.participant,
            'users': ([] if self.users is None else [None if x is None else x.to_dict() for x in self.users]) if recursive else self.users,
        }

    def to_bytes(self):
        return b''.join((b'c\xb1\xd9\xd0',self.participant.to_bytes(),b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(x.to_bytes() for x in self.users),))

    @staticmethod
    def empty():
        return ChannelParticipant(None, None)

    def on_response(self, reader):
        self.participant = reader.tgread_object()
        reader.read_int()
        self.users = []
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.users.append(_x)

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class ChannelParticipants(TLObject):
    constructor_id = 0xf56ee2a8
    subclass_of_id = 0xe60a6e64

    def __init__(self, count, participants, users):
        """
        :param int count:
        :param list[TLObject] participants:
        :param list[TLObject] users:

        Constructor for channels.ChannelParticipants: Instance of ChannelParticipants.
        """
        super().__init__()

        self.count = count
        self.participants = participants
        self.users = users

    def to_dict(self, recursive=True):
        return {
            'count': self.count,
            'participants': ([] if self.participants is None else [None if x is None else x.to_dict() for x in self.participants]) if recursive else self.participants,
            'users': ([] if self.users is None else [None if x is None else x.to_dict() for x in self.users]) if recursive else self.users,
        }

    def to_bytes(self):
        return b''.join((b'\xa8\xe2n\xf5',struct.pack('<i', self.count),b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.participants)),b''.join(x.to_bytes() for x in self.participants),b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.users)),b''.join(x.to_bytes() for x in self.users),))

    @staticmethod
    def empty():
        return ChannelParticipants(None, None, None)

    def on_response(self, reader):
        self.count = reader.read_int()
        reader.read_int()
        self.participants = []
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.participants.append(_x)

        reader.read_int()
        self.users = []
        _len = reader.read_int()
        for _ in range(_len):
            _x = reader.tgread_object()
            self.users.append(_x)

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
