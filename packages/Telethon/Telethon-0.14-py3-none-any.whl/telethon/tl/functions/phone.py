"""File generated by TLObjects' generator. All changes will be ERASED"""
from ...tl.tlobject import TLObject
from ...utils import get_input_peer, get_input_channel, get_input_user, get_input_media
import os
import struct


class AcceptCallRequest(TLObject):
    constructor_id = 0x3bd2b4a0
    subclass_of_id = 0xd48afe4f

    def __init__(self, peer, g_b, protocol):
        """
        :param TLObject peer:
        :param bytes g_b:
        :param TLObject protocol:

        :returns phone.PhoneCall: Instance of PhoneCall.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer
        self.g_b = g_b
        self.protocol = protocol

    def to_dict(self, recursive=True):
        return {
            'peer': (None if self.peer is None else self.peer.to_dict()) if recursive else self.peer,
            'g_b': self.g_b,
            'protocol': (None if self.protocol is None else self.protocol.to_dict()) if recursive else self.protocol,
        }

    def to_bytes(self):
        return b''.join((b'\xa0\xb4\xd2;',self.peer.to_bytes(),TLObject.serialize_bytes(self.g_b),self.protocol.to_bytes(),))

    @staticmethod
    def empty():
        return AcceptCallRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class ConfirmCallRequest(TLObject):
    constructor_id = 0x2efe1722
    subclass_of_id = 0xd48afe4f

    def __init__(self, peer, g_a, key_fingerprint, protocol):
        """
        :param TLObject peer:
        :param bytes g_a:
        :param int key_fingerprint:
        :param TLObject protocol:

        :returns phone.PhoneCall: Instance of PhoneCall.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer
        self.g_a = g_a
        self.key_fingerprint = key_fingerprint
        self.protocol = protocol

    def to_dict(self, recursive=True):
        return {
            'peer': (None if self.peer is None else self.peer.to_dict()) if recursive else self.peer,
            'g_a': self.g_a,
            'key_fingerprint': self.key_fingerprint,
            'protocol': (None if self.protocol is None else self.protocol.to_dict()) if recursive else self.protocol,
        }

    def to_bytes(self):
        return b''.join((b'"\x17\xfe.',self.peer.to_bytes(),TLObject.serialize_bytes(self.g_a),struct.pack('<q', self.key_fingerprint),self.protocol.to_bytes(),))

    @staticmethod
    def empty():
        return ConfirmCallRequest(None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class DiscardCallRequest(TLObject):
    constructor_id = 0x78d413a6
    subclass_of_id = 0x8af52aac

    def __init__(self, peer, duration, reason, connection_id):
        """
        :param TLObject peer:
        :param int duration:
        :param TLObject reason:
        :param int connection_id:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer
        self.duration = duration
        self.reason = reason
        self.connection_id = connection_id

    def to_dict(self, recursive=True):
        return {
            'peer': (None if self.peer is None else self.peer.to_dict()) if recursive else self.peer,
            'duration': self.duration,
            'reason': (None if self.reason is None else self.reason.to_dict()) if recursive else self.reason,
            'connection_id': self.connection_id,
        }

    def to_bytes(self):
        return b''.join((b'\xa6\x13\xd4x',self.peer.to_bytes(),struct.pack('<i', self.duration),self.reason.to_bytes(),struct.pack('<q', self.connection_id),))

    @staticmethod
    def empty():
        return DiscardCallRequest(None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class GetCallConfigRequest(TLObject):
    constructor_id = 0x55451fa9
    subclass_of_id = 0xad0352e8

    def __init__(self):
        super().__init__()
        self.result = None
        self.content_related = True

    def to_dict(self, recursive=True):
        return {}

    def to_bytes(self):
        return b''.join((b'\xa9\x1fEU',))

    @staticmethod
    def empty():
        return GetCallConfigRequest()

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class ReceivedCallRequest(TLObject):
    constructor_id = 0x17d54f61
    subclass_of_id = 0xf5b399ac

    def __init__(self, peer):
        """
        :param TLObject peer:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer

    def to_dict(self, recursive=True):
        return {
            'peer': (None if self.peer is None else self.peer.to_dict()) if recursive else self.peer,
        }

    def to_bytes(self):
        return b''.join((b'aO\xd5\x17',self.peer.to_bytes(),))

    @staticmethod
    def empty():
        return ReceivedCallRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class RequestCallRequest(TLObject):
    constructor_id = 0x5b95b3d4
    subclass_of_id = 0xd48afe4f

    def __init__(self, user_id, g_a_hash, protocol, random_id=None):
        """
        :param TLObject user_id:
        :param int random_id:
        :param bytes g_a_hash:
        :param TLObject protocol:

        :returns phone.PhoneCall: Instance of PhoneCall.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.user_id = get_input_user(user_id)
        self.random_id = random_id if random_id is not None else int.from_bytes(os.urandom(4), 'big', signed=True)
        self.g_a_hash = g_a_hash
        self.protocol = protocol

    def to_dict(self, recursive=True):
        return {
            'user_id': (None if self.user_id is None else self.user_id.to_dict()) if recursive else self.user_id,
            'random_id': self.random_id,
            'g_a_hash': self.g_a_hash,
            'protocol': (None if self.protocol is None else self.protocol.to_dict()) if recursive else self.protocol,
        }

    def to_bytes(self):
        return b''.join((b'\xd4\xb3\x95[',self.user_id.to_bytes(),struct.pack('<i', self.random_id),TLObject.serialize_bytes(self.g_a_hash),self.protocol.to_bytes(),))

    @staticmethod
    def empty():
        return RequestCallRequest(None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class SaveCallDebugRequest(TLObject):
    constructor_id = 0x277add7e
    subclass_of_id = 0xf5b399ac

    def __init__(self, peer, debug):
        """
        :param TLObject peer:
        :param TLObject debug:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer
        self.debug = debug

    def to_dict(self, recursive=True):
        return {
            'peer': (None if self.peer is None else self.peer.to_dict()) if recursive else self.peer,
            'debug': (None if self.debug is None else self.debug.to_dict()) if recursive else self.debug,
        }

    def to_bytes(self):
        return b''.join((b"~\xddz'",self.peer.to_bytes(),self.debug.to_bytes(),))

    @staticmethod
    def empty():
        return SaveCallDebugRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class SetCallRatingRequest(TLObject):
    constructor_id = 0x1c536a34
    subclass_of_id = 0x8af52aac

    def __init__(self, peer, rating, comment):
        """
        :param TLObject peer:
        :param int rating:
        :param str comment:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.peer = peer
        self.rating = rating
        self.comment = comment

    def to_dict(self, recursive=True):
        return {
            'peer': (None if self.peer is None else self.peer.to_dict()) if recursive else self.peer,
            'rating': self.rating,
            'comment': self.comment,
        }

    def to_bytes(self):
        return b''.join((b'4jS\x1c',self.peer.to_bytes(),struct.pack('<i', self.rating),TLObject.serialize_string(self.comment),))

    @staticmethod
    def empty():
        return SetCallRatingRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
