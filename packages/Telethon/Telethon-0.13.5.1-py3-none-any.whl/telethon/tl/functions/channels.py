"""File generated by TLObjects' generator. All changes will be ERASED"""
from ...tl.tlobject import TLObject
import os
from ...utils import get_input_channel


class CheckUsernameRequest(TLObject):
    constructor_id = 0x10e6bd2c
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, username):
        """
        :param TLObject channel:
        :param str username:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.username = username

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'username': self.username,
        }

    def on_send(self, writer):
        writer.write_int(CheckUsernameRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.tgwrite_string(self.username)

    @staticmethod
    def empty():
        return CheckUsernameRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class CreateChannelRequest(TLObject):
    constructor_id = 0xf4893d7f
    subclass_of_id = 0x8af52aac

    def __init__(self, title, about, broadcast=None, megagroup=None):
        """
        :param bool | None broadcast:
        :param bool | None megagroup:
        :param str title:
        :param str about:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.broadcast = broadcast
        self.megagroup = megagroup
        self.title = title
        self.about = about

    def to_dict(self):
        return {
            'broadcast': self.broadcast,
            'megagroup': self.megagroup,
            'title': self.title,
            'about': self.about,
        }

    def on_send(self, writer):
        writer.write_int(CreateChannelRequest.constructor_id, signed=False)
        flags = 0
        flags |= (1 << 0) if self.broadcast else 0
        flags |= (1 << 1) if self.megagroup else 0
        writer.write_int(flags)

        writer.tgwrite_string(self.title)
        writer.tgwrite_string(self.about)

    @staticmethod
    def empty():
        return CreateChannelRequest(None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class DeleteChannelRequest(TLObject):
    constructor_id = 0xc0111fe3
    subclass_of_id = 0x8af52aac

    def __init__(self, channel):
        """
        :param TLObject channel:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(DeleteChannelRequest.constructor_id, signed=False)
        self.channel.on_send(writer)

    @staticmethod
    def empty():
        return DeleteChannelRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class DeleteMessagesRequest(TLObject):
    constructor_id = 0x84c1fd4e
    subclass_of_id = 0xced3c06e

    def __init__(self, channel, id):
        """
        :param TLObject channel:
        :param list[int] id:

        :returns messages.AffectedMessages: Instance of AffectedMessages.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.id = id

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'id': [] if self.id is None else self.id[:],
        }

    def on_send(self, writer):
        writer.write_int(DeleteMessagesRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)
        writer.write_int(len(self.id))
        for _x in self.id:
            writer.write_int(_x)

    @staticmethod
    def empty():
        return DeleteMessagesRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class DeleteUserHistoryRequest(TLObject):
    constructor_id = 0xd10dd71b
    subclass_of_id = 0x2c49c116

    def __init__(self, channel, user_id):
        """
        :param TLObject channel:
        :param TLObject user_id:

        :returns messages.AffectedHistory: Instance of AffectedHistory.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.user_id = get_input_user(user_id)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(DeleteUserHistoryRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.user_id.on_send(writer)

    @staticmethod
    def empty():
        return DeleteUserHistoryRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class EditAboutRequest(TLObject):
    constructor_id = 0x13e27f1e
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, about):
        """
        :param TLObject channel:
        :param str about:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.about = about

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'about': self.about,
        }

    def on_send(self, writer):
        writer.write_int(EditAboutRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.tgwrite_string(self.about)

    @staticmethod
    def empty():
        return EditAboutRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class EditAdminRequest(TLObject):
    constructor_id = 0x20b88214
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, user_id, admin_rights):
        """
        :param TLObject channel:
        :param TLObject user_id:
        :param TLObject admin_rights:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.user_id = get_input_user(user_id)
        self.admin_rights = admin_rights

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'admin_rights': None if self.admin_rights is None else self.admin_rights.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(EditAdminRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.user_id.on_send(writer)
        self.admin_rights.on_send(writer)

    @staticmethod
    def empty():
        return EditAdminRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class EditBannedRequest(TLObject):
    constructor_id = 0xbfd915cd
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, user_id, banned_rights):
        """
        :param TLObject channel:
        :param TLObject user_id:
        :param TLObject banned_rights:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.user_id = get_input_user(user_id)
        self.banned_rights = banned_rights

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'banned_rights': None if self.banned_rights is None else self.banned_rights.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(EditBannedRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.user_id.on_send(writer)
        self.banned_rights.on_send(writer)

    @staticmethod
    def empty():
        return EditBannedRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class EditPhotoRequest(TLObject):
    constructor_id = 0xf12e57c9
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, photo):
        """
        :param TLObject channel:
        :param TLObject photo:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.photo = photo

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'photo': None if self.photo is None else self.photo.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(EditPhotoRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.photo.on_send(writer)

    @staticmethod
    def empty():
        return EditPhotoRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class EditTitleRequest(TLObject):
    constructor_id = 0x566decd0
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, title):
        """
        :param TLObject channel:
        :param str title:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.title = title

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'title': self.title,
        }

    def on_send(self, writer):
        writer.write_int(EditTitleRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.tgwrite_string(self.title)

    @staticmethod
    def empty():
        return EditTitleRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class ExportInviteRequest(TLObject):
    constructor_id = 0xc7560885
    subclass_of_id = 0xb4748a58

    def __init__(self, channel):
        """
        :param TLObject channel:

        :returns ExportedChatInvite: Instance of either ChatInviteEmpty, ChatInviteExported.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(ExportInviteRequest.constructor_id, signed=False)
        self.channel.on_send(writer)

    @staticmethod
    def empty():
        return ExportInviteRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class ExportMessageLinkRequest(TLObject):
    constructor_id = 0xc846d22d
    subclass_of_id = 0xdee644cc

    def __init__(self, channel, id):
        """
        :param TLObject channel:
        :param int id:

        :returns ExportedMessageLink: Instance of ExportedMessageLink.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.id = id

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'id': self.id,
        }

    def on_send(self, writer):
        writer.write_int(ExportMessageLinkRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(self.id)

    @staticmethod
    def empty():
        return ExportMessageLinkRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class GetAdminLogRequest(TLObject):
    constructor_id = 0x33ddf480
    subclass_of_id = 0x51f076bc

    def __init__(self, channel, q, max_id, min_id, limit, events_filter=None, admins=None):
        """
        :param TLObject channel:
        :param str q:
        :param TLObject | None events_filter:
        :param list[TLObject] | None admins:
        :param int max_id:
        :param int min_id:
        :param int limit:

        :returns channels.AdminLogResults: Instance of AdminLogResults.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.q = q
        self.events_filter = events_filter
        self.admins = [get_input_user(_x) for _x in admins]
        self.max_id = max_id
        self.min_id = min_id
        self.limit = limit

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'q': self.q,
            'events_filter': None if self.events_filter is None else self.events_filter.to_dict(),
            'admins': [] if self.admins is None else [None if x is None else x.to_dict() for x in self.admins],
            'max_id': self.max_id,
            'min_id': self.min_id,
            'limit': self.limit,
        }

    def on_send(self, writer):
        writer.write_int(GetAdminLogRequest.constructor_id, signed=False)
        flags = 0
        flags |= (1 << 0) if self.events_filter else 0
        flags |= (1 << 1) if self.admins else 0
        writer.write_int(flags)

        self.channel.on_send(writer)
        writer.tgwrite_string(self.q)
        if self.events_filter:
            self.events_filter.on_send(writer)

        if self.admins:
            writer.write_int(0x1cb5c415, signed=False)
            writer.write_int(len(self.admins))
            for _x in self.admins:
                if _x:
                    _x.on_send(writer)

        writer.write_long(self.max_id)
        writer.write_long(self.min_id)
        writer.write_int(self.limit)

    @staticmethod
    def empty():
        return GetAdminLogRequest(None, None, None, None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)


class GetAdminedPublicChannelsRequest(TLObject):
    constructor_id = 0x8d8d82d7
    subclass_of_id = 0x99d5cb14

    def __init__(self):
        super().__init__()
        self.result = None
        self.content_related = True

    @staticmethod
    def to_dict():
        return {}

    def on_send(self, writer):
        writer.write_int(GetAdminedPublicChannelsRequest.constructor_id, signed=False)

    @staticmethod
    def empty():
        return GetAdminedPublicChannelsRequest()

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class GetChannelsRequest(TLObject):
    constructor_id = 0xa7f6bbb
    subclass_of_id = 0x99d5cb14

    def __init__(self, id):
        """
        :param list[TLObject] id:

        :returns messages.Chats: Instance of either Chats, ChatsSlice.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.id = [get_input_channel(_x) for _x in id]

    def to_dict(self):
        return {
            'id': [] if self.id is None else [None if x is None else x.to_dict() for x in self.id],
        }

    def on_send(self, writer):
        writer.write_int(GetChannelsRequest.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)
        writer.write_int(len(self.id))
        for _x in self.id:
            _x.on_send(writer)

    @staticmethod
    def empty():
        return GetChannelsRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class GetFullChannelRequest(TLObject):
    constructor_id = 0x8736a09
    subclass_of_id = 0x225a5109

    def __init__(self, channel):
        """
        :param TLObject channel:

        :returns messages.ChatFull: Instance of ChatFull.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(GetFullChannelRequest.constructor_id, signed=False)
        self.channel.on_send(writer)

    @staticmethod
    def empty():
        return GetFullChannelRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class GetMessagesRequest(TLObject):
    constructor_id = 0x93d7b347
    subclass_of_id = 0xd4b40b5e

    def __init__(self, channel, id):
        """
        :param TLObject channel:
        :param list[int] id:

        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.id = id

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'id': [] if self.id is None else self.id[:],
        }

    def on_send(self, writer):
        writer.write_int(GetMessagesRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)
        writer.write_int(len(self.id))
        for _x in self.id:
            writer.write_int(_x)

    @staticmethod
    def empty():
        return GetMessagesRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class GetParticipantRequest(TLObject):
    constructor_id = 0x546dd7a6
    subclass_of_id = 0x6658151a

    def __init__(self, channel, user_id):
        """
        :param TLObject channel:
        :param TLObject user_id:

        :returns channels.ChannelParticipant: Instance of ChannelParticipant.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.user_id = get_input_user(user_id)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(GetParticipantRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.user_id.on_send(writer)

    @staticmethod
    def empty():
        return GetParticipantRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class GetParticipantsRequest(TLObject):
    constructor_id = 0x24d98f92
    subclass_of_id = 0xe60a6e64

    def __init__(self, channel, filter, offset, limit):
        """
        :param TLObject channel:
        :param TLObject filter:
        :param int offset:
        :param int limit:

        :returns channels.ChannelParticipants: Instance of ChannelParticipants.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.filter = filter
        self.offset = offset
        self.limit = limit

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'filter': None if self.filter is None else self.filter.to_dict(),
            'offset': self.offset,
            'limit': self.limit,
        }

    def on_send(self, writer):
        writer.write_int(GetParticipantsRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.filter.on_send(writer)
        writer.write_int(self.offset)
        writer.write_int(self.limit)

    @staticmethod
    def empty():
        return GetParticipantsRequest(None, None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class InviteToChannelRequest(TLObject):
    constructor_id = 0x199f3a6c
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, users):
        """
        :param TLObject channel:
        :param list[TLObject] users:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.users = [get_input_user(_x) for _x in users]

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'users': [] if self.users is None else [None if x is None else x.to_dict() for x in self.users],
        }

    def on_send(self, writer):
        writer.write_int(InviteToChannelRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)
        writer.write_int(len(self.users))
        for _x in self.users:
            _x.on_send(writer)

    @staticmethod
    def empty():
        return InviteToChannelRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class JoinChannelRequest(TLObject):
    constructor_id = 0x24b524c5
    subclass_of_id = 0x8af52aac

    def __init__(self, channel):
        """
        :param TLObject channel:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(JoinChannelRequest.constructor_id, signed=False)
        self.channel.on_send(writer)

    @staticmethod
    def empty():
        return JoinChannelRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class LeaveChannelRequest(TLObject):
    constructor_id = 0xf836aa95
    subclass_of_id = 0x8af52aac

    def __init__(self, channel):
        """
        :param TLObject channel:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(LeaveChannelRequest.constructor_id, signed=False)
        self.channel.on_send(writer)

    @staticmethod
    def empty():
        return LeaveChannelRequest(None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class ReadHistoryRequest(TLObject):
    constructor_id = 0xcc104937
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, max_id):
        """
        :param TLObject channel:
        :param int max_id:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.max_id = max_id

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'max_id': self.max_id,
        }

    def on_send(self, writer):
        writer.write_int(ReadHistoryRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(self.max_id)

    @staticmethod
    def empty():
        return ReadHistoryRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class ReadMessageContentsRequest(TLObject):
    constructor_id = 0xeab5dc38
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, id):
        """
        :param TLObject channel:
        :param list[int] id:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.id = id

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'id': [] if self.id is None else self.id[:],
        }

    def on_send(self, writer):
        writer.write_int(ReadMessageContentsRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)
        writer.write_int(len(self.id))
        for _x in self.id:
            writer.write_int(_x)

    @staticmethod
    def empty():
        return ReadMessageContentsRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel, get_input_user


class ReportSpamRequest(TLObject):
    constructor_id = 0xfe087810
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, user_id, id):
        """
        :param TLObject channel:
        :param TLObject user_id:
        :param list[int] id:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.user_id = get_input_user(user_id)
        self.id = id

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'id': [] if self.id is None else self.id[:],
        }

    def on_send(self, writer):
        writer.write_int(ReportSpamRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.user_id.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)
        writer.write_int(len(self.id))
        for _x in self.id:
            writer.write_int(_x)

    @staticmethod
    def empty():
        return ReportSpamRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class SetStickersRequest(TLObject):
    constructor_id = 0xea8ca4f9
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, stickerset):
        """
        :param TLObject channel:
        :param TLObject stickerset:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.stickerset = stickerset

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'stickerset': None if self.stickerset is None else self.stickerset.to_dict(),
        }

    def on_send(self, writer):
        writer.write_int(SetStickersRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.stickerset.on_send(writer)

    @staticmethod
    def empty():
        return SetStickersRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class ToggleInvitesRequest(TLObject):
    constructor_id = 0x49609307
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, enabled):
        """
        :param TLObject channel:
        :param TLObject enabled:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.enabled = enabled

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'enabled': self.enabled,
        }

    def on_send(self, writer):
        writer.write_int(ToggleInvitesRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.tgwrite_bool(self.enabled)

    @staticmethod
    def empty():
        return ToggleInvitesRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class ToggleSignaturesRequest(TLObject):
    constructor_id = 0x1f69b606
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, enabled):
        """
        :param TLObject channel:
        :param TLObject enabled:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.enabled = enabled

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'enabled': self.enabled,
        }

    def on_send(self, writer):
        writer.write_int(ToggleSignaturesRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.tgwrite_bool(self.enabled)

    @staticmethod
    def empty():
        return ToggleSignaturesRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class UpdatePinnedMessageRequest(TLObject):
    constructor_id = 0xa72ded52
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, id, silent=None):
        """
        :param bool | None silent:
        :param TLObject channel:
        :param int id:

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.silent = silent
        self.channel = get_input_channel(channel)
        self.id = id

    def to_dict(self):
        return {
            'silent': self.silent,
            'channel': None if self.channel is None else self.channel.to_dict(),
            'id': self.id,
        }

    def on_send(self, writer):
        writer.write_int(UpdatePinnedMessageRequest.constructor_id, signed=False)
        flags = 0
        flags |= (1 << 0) if self.silent else 0
        writer.write_int(flags)

        self.channel.on_send(writer)
        writer.write_int(self.id)

    @staticmethod
    def empty():
        return UpdatePinnedMessageRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
from ...utils import get_input_channel


class UpdateUsernameRequest(TLObject):
    constructor_id = 0x3514b3de
    subclass_of_id = 0xf5b399ac

    def __init__(self, channel, username):
        """
        :param TLObject channel:
        :param str username:

        :returns Bool: This type has no constructors.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.channel = get_input_channel(channel)
        self.username = username

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'username': self.username,
        }

    def on_send(self, writer):
        writer.write_int(UpdateUsernameRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        writer.tgwrite_string(self.username)

    @staticmethod
    def empty():
        return UpdateUsernameRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __str__(self):
        return TLObject.pretty_format(self)

    def stringify(self):
        return TLObject.pretty_format(self, indent=0)
