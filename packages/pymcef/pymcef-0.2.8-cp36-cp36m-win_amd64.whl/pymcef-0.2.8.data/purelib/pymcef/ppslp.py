# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ppslp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ppslp')
    _ppslp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ppslp', [dirname(__file__)])
        except ImportError:
            import _ppslp
            return _ppslp
        if fp is not None:
            try:
                _mod = imp.load_module('_ppslp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ppslp = swig_import_helper()
    del swig_import_helper
else:
    import _ppslp
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ppslp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ppslp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ppslp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ppslp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ppslp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ppslp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ppslp.SwigPyIterator_copy(self)

    def next(self):
        return _ppslp.SwigPyIterator_next(self)

    def __next__(self):
        return _ppslp.SwigPyIterator___next__(self)

    def previous(self):
        return _ppslp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ppslp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ppslp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ppslp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ppslp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ppslp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ppslp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ppslp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ppslp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class map_int_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_int_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_int_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ppslp.map_int_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ppslp.map_int_double___nonzero__(self)

    def __bool__(self):
        return _ppslp.map_int_double___bool__(self)

    def __len__(self):
        return _ppslp.map_int_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ppslp.map_int_double___getitem__(self, key)

    def __delitem__(self, key):
        return _ppslp.map_int_double___delitem__(self, key)

    def has_key(self, key):
        return _ppslp.map_int_double_has_key(self, key)

    def keys(self):
        return _ppslp.map_int_double_keys(self)

    def values(self):
        return _ppslp.map_int_double_values(self)

    def items(self):
        return _ppslp.map_int_double_items(self)

    def __contains__(self, key):
        return _ppslp.map_int_double___contains__(self, key)

    def key_iterator(self):
        return _ppslp.map_int_double_key_iterator(self)

    def value_iterator(self):
        return _ppslp.map_int_double_value_iterator(self)

    def __setitem__(self, *args):
        return _ppslp.map_int_double___setitem__(self, *args)

    def asdict(self):
        return _ppslp.map_int_double_asdict(self)

    def __init__(self, *args):
        this = _ppslp.new_map_int_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _ppslp.map_int_double_empty(self)

    def size(self):
        return _ppslp.map_int_double_size(self)

    def swap(self, v):
        return _ppslp.map_int_double_swap(self, v)

    def begin(self):
        return _ppslp.map_int_double_begin(self)

    def end(self):
        return _ppslp.map_int_double_end(self)

    def rbegin(self):
        return _ppslp.map_int_double_rbegin(self)

    def rend(self):
        return _ppslp.map_int_double_rend(self)

    def clear(self):
        return _ppslp.map_int_double_clear(self)

    def get_allocator(self):
        return _ppslp.map_int_double_get_allocator(self)

    def count(self, x):
        return _ppslp.map_int_double_count(self, x)

    def erase(self, *args):
        return _ppslp.map_int_double_erase(self, *args)

    def find(self, x):
        return _ppslp.map_int_double_find(self, x)

    def lower_bound(self, x):
        return _ppslp.map_int_double_lower_bound(self, x)

    def upper_bound(self, x):
        return _ppslp.map_int_double_upper_bound(self, x)
    __swig_destroy__ = _ppslp.delete_map_int_double
    __del__ = lambda self: None
map_int_double_swigregister = _ppslp.map_int_double_swigregister
map_int_double_swigregister(map_int_double)

class dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictionary, name)
    __repr__ = _swig_repr
    FULL = _ppslp.dictionary_FULL
    MAX_OMEGA = _ppslp.dictionary_MAX_OMEGA
    MAX_SHARPE = _ppslp.dictionary_MAX_SHARPE
    DEFAULT = _ppslp.dictionary_DEFAULT

    def __init__(self, *args):
        this = _ppslp.new_dictionary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def find_lambdalower_encol_entype(self):
        return _ppslp.dictionary_find_lambdalower_encol_entype(self)

    def find_lecol_then_pivot(self):
        return _ppslp.dictionary_find_lecol_then_pivot(self)

    def isentire(self):
        return _ppslp.dictionary_isentire(self)

    def isMaxOmegaAchieved(self):
        return _ppslp.dictionary_isMaxOmegaAchieved(self)

    def isMaxSharpeAchieved(self):
        return _ppslp.dictionary_isMaxSharpeAchieved(self)

    def Weights(self):
        return _ppslp.dictionary_Weights(self)

    def Max_omega_index(self):
        return _ppslp.dictionary_Max_omega_index(self)

    def Max_sharpe_index(self):
        return _ppslp.dictionary_Max_sharpe_index(self)

    def Max_omega_portfolio(self):
        return _ppslp.dictionary_Max_omega_portfolio(self)

    def Max_sharpe_portfolio(self):
        return _ppslp.dictionary_Max_sharpe_portfolio(self)

    def Current_portfolio(self):
        return _ppslp.dictionary_Current_portfolio(self)

    def reward2sd(self, reward):
        return _ppslp.dictionary_reward2sd(self, reward)
    __swig_destroy__ = _ppslp.delete_dictionary
    __del__ = lambda self: None
dictionary_swigregister = _ppslp.dictionary_swigregister
dictionary_swigregister(dictionary)

class portfolio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, portfolio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, portfolio, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _ppslp.new_portfolio()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Weights(self):
        return _ppslp.portfolio_Weights(self)

    def Risk(self):
        return _ppslp.portfolio_Risk(self)

    def Reward(self):
        return _ppslp.portfolio_Reward(self)

    def Omega(self):
        return _ppslp.portfolio_Omega(self)

    def Sd(self):
        return _ppslp.portfolio_Sd(self)

    def Sharpe(self):
        return _ppslp.portfolio_Sharpe(self)

    def Lambda_lower(self):
        return _ppslp.portfolio_Lambda_lower(self)

    def Lambda_upper(self):
        return _ppslp.portfolio_Lambda_upper(self)
    __swig_destroy__ = _ppslp.delete_portfolio
    __del__ = lambda self: None
portfolio_swigregister = _ppslp.portfolio_swigregister
portfolio_swigregister(portfolio)

# This file is compatible with both classic and new-style classes.


