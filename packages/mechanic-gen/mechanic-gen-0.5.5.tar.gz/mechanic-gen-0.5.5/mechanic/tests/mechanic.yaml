openapi: 3.0.0
servers:
- url: http://petstore.swagger.io/api
  x-mechanic-microservice:
    name: petstore
info:
  contact:
    email: foo@example.com
    name: Swagger API Team
    url: http://madskristensen.net
  description: A sample API that uses a petstore as an example to demonstrate features
    in the swagger-2.0 specification
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
  termsOfService: http://swagger.io/terms/
  title: Swagger Petstore
  version: 1.0.0
paths:
  /billing/customers:
    servers:
    - url: http://petstore.swagger.io/api/billing
      x-mechanic-microservice:
        name: billing
  /pets:
    get:
      description: 'Returns all pets from the system that the user has access to

        Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem
        sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio
        lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar
        ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer
        at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie
        imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis.
        Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend
        fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat
        id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum
        libero. Morbi euismod sagittis libero sed lacinia.


        Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum
        ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis
        elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque
        posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend
        nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce
        malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique,
        sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan
        tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend
        lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.

        '
      operationId: findPets
      parameters:
      - description: tags to filter by
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: maximum number of results to return
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                input:
                  oneOf:
                  - type: string
                  - type: boolean
                output:
                  type: string
              title: RequestBodyPet
              type: object
        description: Pet to add to the store
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
  /pets/food:
    get:
      parameters:
      - description: maximum number of results to return
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        '201':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Food'
                type: array
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
  /pets/{id}:
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
      - description: ID of pet to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: pet deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
    get:
      description: Returns a user based on a single ID, if the user does not have
        access to the pet
      operationId: find pet by id
      parameters:
      - description: ID of pet to fetch
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: pet response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    Cat:
      properties:
        food:
          oneOf:
          - type: string
          - $ref: '#/components/schemas/Food'
          x-mechanic-uri-option: true
        isTerrible:
          example: true
          type: boolean
        isWorthOwning:
          example: false
          type: boolean
      type: object
    Dog:
      allOf:
      - $ref: '#/components/schemas/Pet'
      - properties:
          barks:
            type: boolean
          breed:
            type: string
        required:
        - breed
        - barks
        type: object
      type: object
    Drink:
      properties:
        foods:
          items:
            $ref: '#/components/schemas/Food'
          type: array
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    Food:
      properties:
        brand:
          type: string
        drinks:
          items:
            $ref: '#/components/schemas/Drink'
          type: array
        pet:
          oneOf:
          - $ref: '#/components/schemas/Cat'
          - $ref: '#/components/schemas/Dog'
        tasty:
          type: boolean
      type: object
    Pet:
      properties:
        bestFriends:
          oneOf:
          - type: string
          - $ref: '#/components/schemas/Dog'
          - $ref: '#/components/schemas/Cat'
          x-mechanic-uri-option: true
        food:
          $ref: '#/components/schemas/Food'
        friends:
          items:
            $ref: '#/components/schemas/Dog'
          type: array
        name:
          type: string
        tag:
          type: string
      type: object
  securitySchemes: {}
