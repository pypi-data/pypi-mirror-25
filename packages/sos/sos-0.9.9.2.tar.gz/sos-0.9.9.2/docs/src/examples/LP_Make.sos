#!/usr/bin/env sos-runner
# fileformat=SOS1.0
# Author: Gao Wang and Bo Peng

#
# Linear-model based prediction
#
# This script fits linear models
# using Lasso and Ridge regression
# and summarizes their prediction performance
# This script is written in a "backward" flavor
# aka the "Make Style"

parameter: beta = [3, 1.5, 0, 0, 2, 0, 0, 0]
ridge_result = ['data_{}.ridge.mse.csv'.format(x+1) for x in range(5)]
lasso_result = ['data_{}.lasso.mse.csv'.format(x+1) for x in range(5)]

[simulation: provides = ["data_{id}.train.csv", "data_{id}.test.csv"]]
# Simulate sparse data-sets
depends: R_library("MASS")
parameter: N = (40, 200) # training and testing samples
parameter: rstd = 3
output: "data_${id}.train.csv", "data_${id}.test.csv"
task:
R:
  set.seed(${id})
  N = sum(c(${N!,}))
  p = length(c(${beta!,}))
  X = MASS::mvrnorm(n = N, rep(0, p), 0.5^abs(outer(1:p, 1:p, FUN = "-")))
  Y = X %*% c(${beta!,}) + rnorm(N, mean = 0, sd = ${rstd})
  Xtrain = X[1:${N[0]},]; Xtest = X[(${N[0]}+1):(${N[0]}+${N[1]}),]
  Ytrain = Y[1:${N[0]}]; Ytest = Y[(${N[0]}+1):(${N[0]}+${N[1]})]
  write.table(cbind(Ytrain, Xtrain), ${_output[0]!r}, row.names = F, col.names = F, sep = ',')
  write.table(cbind(Ytest, Xtest), ${_output[1]!r}, row.names = F, col.names = F, sep = ',')

[ridge: provides = ["data_{id}.ridge.predicted.csv", "data_{id}.ridge.coef.csv"]]
# Ridge regression model implemented in R
# Build predictor via cross-validation and make prediction
parameter: nfolds = 5
depends: "data_${id}.train.csv", "data_${id}.test.csv", R_library("glmnet")
output: "data_${id}.ridge.predicted.csv", "data_${id}.ridge.coef.csv"
task:
R:
  train = read.csv(${depends[0]!r}, header = F)
  test = read.csv(${depends[1]!r}, header = F)
  model = glmnet::cv.glmnet(as.matrix(train[,-1]), train[,1], family = "gaussian", alpha = 0, nfolds = ${nfolds}, intercept = F)
  betahat = as.vector(coef(model, s = "lambda.min")[-1])
  Ypred = predict(model, as.matrix(test[,-1]), s = "lambda.min")
  write.table(Ypred, ${output[0]!r}, row.names = F, col.names = F, sep = ',')
  write.table(betahat, ${output[1]!r}, row.names = F, col.names = F, sep = ',')

[lasso: provides = ["data_{id}.lasso.predicted.csv", "data_{id}.lasso.coef.csv"]]
# LASSO model implemented in Python
# Build predictor via cross-validation and make prediction
parameter: nfolds = 5
depends: "data_${id}.train.csv", "data_${id}.test.csv", Py_Module("sklearn")
output: "data_${id}.lasso.predicted.csv", "data_${id}.lasso.coef.csv"
task:
python:
  import numpy as np
  from sklearn.linear_model import LassoCV
  train = np.genfromtxt(${depends[0]!r}, delimiter = ",")
  test = np.genfromtxt(${depends[1]!r}, delimiter = ",")
  model = LassoCV(cv = ${nfolds}, fit_intercept = False).fit(train[:,1:], train[:,1])
  Ypred = model.predict(test[:,1:])
  np.savetxt(${output[0]!r}, Ypred)
  np.savetxt(${output[1]!r}, model.coef_)

[evaluation: provides = 'data_{id}.{method}.mse.csv']
# Evaluate predictors by calculating mean squared error
# of prediction vs truth (first line of output)
# and of betahat vs truth (2nd line of output)
depends: "data_${id}.test.csv", "data_${id}.${method}.predicted.csv",
         "data_${id}.${method}.coef.csv"
R:
  b = c(${beta!,})
  Ytruth = as.matrix(read.csv(${depends[0]!r}, header = F)[,-1]) %*% b
  Ypred = scan(${depends[1]!r})
  prediction_mse = mean((Ytruth - Ypred)^2)
  betahat = scan(${depends[2]!r})
  estimation_mse = mean((betahat - b) ^ 2)
  cat(paste(prediction_mse, estimation_mse), file = ${output!r})

[get-pandoc-css: provides = 'pandoc.css']
download:
  https://vatlab.github.io/SOS/css/pandoc.css

[default]
depends: ridge_result, lasso_result, "pandoc.css", executable('pandoc')
import numpy as np
ridge_summary = np.mean(np.matrix([sum([x.strip().split() for x in open(f).readlines()], []) for f in ridge_result], dtype = float).T, axis = 1).tolist()
lasso_summary = np.mean(np.matrix([sum([x.strip().split() for x in open(f).readlines()], []) for f in lasso_result], dtype = float).T, axis = 1).tolist()

report: output = "report.md"

| Method | Avg. Estimation Error | Avg. Prediction Error |
|:------:|:-------:|:-------:|
| LASSO | ${lasso_summary[1]} | ${lasso_summary[0]} |
| Ridge | ${ridge_summary[1]} | ${ridge_summary[0]} |

pandoc: input = "report.md", output = "report.html", args = '${input!q} --css pandoc.css --output ${output!q}'